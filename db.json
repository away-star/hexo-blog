{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/hello-world-1701430188804.png","path":"images/hello-world-1701430188804.png","modified":0,"renderable":0},{"_id":"themes/anzhiyu/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/512.png","path":"img/512.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/add-to-list.svg","path":"img/add-to-list.svg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/aperture.svg","path":"img/aperture.svg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/touxiang.png","path":"img/touxiang.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/weixin.png","path":"img/weixin.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/zhifubao.jpg","path":"img/zhifubao.jpg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","path":"img/siteicon/16.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","path":"img/siteicon/32.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","path":"js/anzhiyu/people.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/hexo-anzhiyu学习-1701497363539.png","path":"images/hexo-anzhiyu学习-1701497363539.png","modified":0,"renderable":0},{"_id":"themes/anzhiyu/source/img/suanfa.png","path":"img/suanfa.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/houduan.png","path":"img/houduan.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/qianduan.png","path":"img/qianduan.png","modified":0,"renderable":1},{"_id":"source/images/docker常用命令合集-1701679683733.png","path":"images/docker常用命令合集-1701679683733.png","modified":0,"renderable":0},{"_id":"source/images/docker常用命令合集-1701679704149.png","path":"images/docker常用命令合集-1701679704149.png","modified":0,"renderable":0},{"_id":"source/images/docker常用命令合集-1701679717546.png","path":"images/docker常用命令合集-1701679717546.png","modified":0,"renderable":0},{"_id":"source/images/CSS之At-rules-1701680236420.png","path":"images/CSS之At-rules-1701680236420.png","modified":0,"renderable":0},{"_id":"source/images/umi-max的简易数据流方案-1701680121582.png","path":"images/umi-max的简易数据流方案-1701680121582.png","modified":0,"renderable":0},{"_id":"source/images/CSS之At-rules-1701680251744.png","path":"images/CSS之At-rules-1701680251744.png","modified":0,"renderable":0},{"_id":"source/images/CSS之At-rules-1701680245005.png","path":"images/CSS之At-rules-1701680245005.png","modified":0,"renderable":0},{"_id":"source/images/umi-max的简易数据流方案-1701680109557.png","path":"images/umi-max的简易数据流方案-1701680109557.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680751840.png","path":"images/回溯——排列、组合、子集-1701680751840.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680842452.png","path":"images/回溯——排列、组合、子集-1701680842452.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680879514.png","path":"images/回溯——排列、组合、子集-1701680879514.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680859373.png","path":"images/回溯——排列、组合、子集-1701680859373.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680799652.png","path":"images/回溯——排列、组合、子集-1701680799652.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680821919.png","path":"images/回溯——排列、组合、子集-1701680821919.png","modified":0,"renderable":0},{"_id":"source/images/回溯——排列、组合、子集-1701680779347.png","path":"images/回溯——排列、组合、子集-1701680779347.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701680995740.png","path":"images/回溯——flood-fill、字符串-1701680995740.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681216686.png","path":"images/回溯——flood-fill、字符串-1701681216686.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681234910.png","path":"images/回溯——flood-fill、字符串-1701681234910.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681338321.png","path":"images/回溯——flood-fill、字符串-1701681338321.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681257321.png","path":"images/回溯——flood-fill、字符串-1701681257321.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681356056.png","path":"images/回溯——flood-fill、字符串-1701681356056.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681296977.png","path":"images/回溯——flood-fill、字符串-1701681296977.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681314905.png","path":"images/回溯——flood-fill、字符串-1701681314905.png","modified":0,"renderable":0},{"_id":"source/images/回溯——flood-fill、字符串-1701681281060.png","path":"images/回溯——flood-fill、字符串-1701681281060.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744061305.png","path":"images/mysql小记-1701744061305.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744069648.png","path":"images/mysql小记-1701744069648.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744076874.png","path":"images/mysql小记-1701744076874.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744087281.png","path":"images/mysql小记-1701744087281.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744094831.png","path":"images/mysql小记-1701744094831.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744109641.png","path":"images/mysql小记-1701744109641.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744101965.png","path":"images/mysql小记-1701744101965.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744125502.png","path":"images/mysql小记-1701744125502.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744118087.png","path":"images/mysql小记-1701744118087.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744138342.png","path":"images/mysql小记-1701744138342.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744131762.png","path":"images/mysql小记-1701744131762.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744145264.png","path":"images/mysql小记-1701744145264.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744154056.png","path":"images/mysql小记-1701744154056.png","modified":0,"renderable":0},{"_id":"source/images/mysql小记-1701744163753.png","path":"images/mysql小记-1701744163753.png","modified":0,"renderable":0},{"_id":"source/images/next-js实战-1701744267906.png","path":"images/next-js实战-1701744267906.png","modified":0,"renderable":0},{"_id":"source/images/next-js实战-1701744261397.png","path":"images/next-js实战-1701744261397.png","modified":0,"renderable":0},{"_id":"themes/anzhiyu/source/img/yunyuansheng.png","path":"img/yunyuansheng.png","modified":0,"renderable":1},{"_id":"source/images/http请求内容详解-1701757597107.png","path":"images/http请求内容详解-1701757597107.png","modified":0,"renderable":0},{"_id":"source/images/http请求内容详解-1701757614367.png","path":"images/http请求内容详解-1701757614367.png","modified":0,"renderable":0},{"_id":"source/images/http请求内容详解-1701757620332.png","path":"images/http请求内容详解-1701757620332.png","modified":0,"renderable":0},{"_id":"source/images/http请求内容详解-1701757625731.png","path":"images/http请求内容详解-1701757625731.png","modified":0,"renderable":0},{"_id":"source/images/http请求内容详解-1701757634525.png","path":"images/http请求内容详解-1701757634525.png","modified":0,"renderable":0},{"_id":"source/images/react-markdown踩坑实记-1701757666333.png","path":"images/react-markdown踩坑实记-1701757666333.png","modified":0,"renderable":0},{"_id":"source/images/react-markdown踩坑实记-1701757671966.png","path":"images/react-markdown踩坑实记-1701757671966.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757439810.png","path":"images/springcloud-gateway初体验-1701757439810.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757449291.png","path":"images/springcloud-gateway初体验-1701757449291.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757454579.png","path":"images/springcloud-gateway初体验-1701757454579.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757469772.png","path":"images/springcloud-gateway初体验-1701757469772.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757498800.png","path":"images/springcloud-gateway初体验-1701757498800.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757506021.png","path":"images/springcloud-gateway初体验-1701757506021.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757512055.png","path":"images/springcloud-gateway初体验-1701757512055.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757517086.png","path":"images/springcloud-gateway初体验-1701757517086.png","modified":0,"renderable":0},{"_id":"source/images/springcloud-gateway初体验-1701757523867.png","path":"images/springcloud-gateway初体验-1701757523867.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757102187.png","path":"images/名片创作-1701757102187.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757096669.png","path":"images/名片创作-1701757096669.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757118115.png","path":"images/名片创作-1701757118115.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757110488.png","path":"images/名片创作-1701757110488.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757127095.png","path":"images/名片创作-1701757127095.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757134734.png","path":"images/名片创作-1701757134734.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757141855.png","path":"images/名片创作-1701757141855.png","modified":0,"renderable":0},{"_id":"source/images/名片创作-1701757146672.png","path":"images/名片创作-1701757146672.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"26029618f98b8981bad429c005044722419262c2","modified":1701430308372},{"_id":"source/images/hello-world-1701430188804.png","hash":"1085603f8a3fd9aa8dd00fd9afcc98e433fe297a","modified":1701430190839},{"_id":"source/_posts/hexo-anzhiyu学习.md","hash":"988916edc9e8e29b939909a19af421c885c61f31","modified":1701746155324},{"_id":"source/tags/index.md","hash":"f44278c54aa4ef90091115f78a41707f338b41c8","modified":1701433245764},{"_id":"source/categories/index.md","hash":"8456a4325ed101768012718a26d5023b38d3b727","modified":1701433284033},{"_id":"themes/anzhiyu/source/css/_extra/home_top/random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701427075778},{"_id":"themes/anzhiyu/.gitignore","hash":"d507747699b68b0ec536b91d8be526c71ccf5c74","modified":1701427072005},{"_id":"themes/anzhiyu/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1701427072017},{"_id":"themes/anzhiyu/README.md","hash":"46c4c8c308bd18c813da6b37356c7953f0d2e4af","modified":1701427072045},{"_id":"themes/anzhiyu/README_EN.md","hash":"3b27231432adf2bd180857fc6d3de646dfd444bf","modified":1701427072069},{"_id":"themes/anzhiyu/_config.yml","hash":"de03b85e2a959023593b1378565fe7d148f52012","modified":1701427072084},{"_id":"themes/anzhiyu/languages/default.yml","hash":"be22c8d1730408a2ac3ec9a57406e297fc1f7ce6","modified":1701427072344},{"_id":"themes/anzhiyu/package.json","hash":"06baae9d4a3e6feb1861721f547a55d416638209","modified":1701427072102},{"_id":"themes/anzhiyu/plugins.yml","hash":"1221d029e98112917b9987ae06d3d935dbd2e692","modified":1701427072117},{"_id":"themes/anzhiyu/sw-rules.js","hash":"ae946d1b197940f8021d81a65474ea474a82c0cf","modified":1701427072133},{"_id":"themes/anzhiyu/languages/en.yml","hash":"4c46ef35360b8322269417bcae68e609ca8f85be","modified":1701427072359},{"_id":"themes/anzhiyu/layout/archive.pug","hash":"b8778e55f1aab2431daa4a64cba991ef40e33224","modified":1701443642512},{"_id":"themes/anzhiyu/layout/index.pug","hash":"cf1b756e06864a47352bb9890519eafcf5d0340d","modified":1701443645755},{"_id":"themes/anzhiyu/languages/zh-CN.yml","hash":"dbd5b387322693ed53df84eab709bf04ffeb8b81","modified":1701427072375},{"_id":"themes/anzhiyu/layout/post.pug","hash":"0d8d8cfd31e97053c908dac3ee19072825a6a2dc","modified":1701427072481},{"_id":"themes/anzhiyu/layout/category.pug","hash":"1d55b22a50675d1ecfb95d031ea011245c7c6511","modified":1701427072434},{"_id":"themes/anzhiyu/layout/page.pug","hash":"98e81d10e6caab2ff79b4a2788d2312acded36ef","modified":1701427072465},{"_id":"themes/anzhiyu/languages/zh-TW.yml","hash":"0e0b432912390e3de9d99bc54add99e4d265d3d1","modified":1701427072391},{"_id":"themes/anzhiyu/layout/tag.pug","hash":"354b85519feab71c0233eb240655d0e0ec67021c","modified":1701427072497},{"_id":"themes/anzhiyu/.github/workflows/issue_close_stale.yml","hash":"6151bdec23ded908adf01ba5ecdf3c0da573449d","modified":1701427072228},{"_id":"themes/anzhiyu/source/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1701427075047},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"3978be1ecdd21be564aa590b17eda6f03cd77e19","modified":1701427072161},{"_id":"themes/anzhiyu/.github/workflows/issue_close_question.yml","hash":"a7f1bf4578faa6092898a9a44bfd467cbb1788dd","modified":1701427072213},{"_id":"themes/anzhiyu/.github/workflows/issue_duplicate.yml","hash":"42a8e022434604081fe443d416bd443efd887015","modified":1701427072244},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"53260c55a97ed93e6a1f9acc23b9d21193cae6ef","modified":1701427072191},{"_id":"themes/anzhiyu/.github/workflows/issue_question.yml","hash":"72ce6e36847f20952d8f8742e4fd1969cd086320","modified":1701427072275},{"_id":"themes/anzhiyu/.github/workflows/issue_invalid.yml","hash":"8cdde230c8f9330cc7cd5c149ea5fc258ffb0b8b","modified":1701427072260},{"_id":"themes/anzhiyu/.github/workflows/issue_wontfix.yml","hash":"3b498c22281bb454f8ee1135a4becee0adc5b9ae","modified":1701427072291},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/config.yml","hash":"a23b745378bc745b15f2dfefcc6a203d5d1d5fcd","modified":1701427072176},{"_id":"themes/anzhiyu/layout/includes/additional-js.pug","hash":"d7e42261a79651ce13ff2213947ecb3e4c41ee81","modified":1701427072534},{"_id":"themes/anzhiyu/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1701427072307},{"_id":"themes/anzhiyu/layout/includes/bbTimeList.pug","hash":"0a0c4cdf69314c3a9ecb078f4213c76129a9ac06","modified":1701427072550},{"_id":"themes/anzhiyu/layout/includes/404.pug","hash":"aa158d5a661aa2fab4737b9460ce34f6784fdee5","modified":1701427072519},{"_id":"themes/anzhiyu/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1701427072323},{"_id":"themes/anzhiyu/layout/includes/categoryGroup.pug","hash":"243f63820db5f3241e682ae8f3baffd6501df3de","modified":1701427072567},{"_id":"themes/anzhiyu/layout/includes/footer.pug","hash":"50131aa8ad85fd6c08d8e1cb2d3dcfceb5964abe","modified":1701427072584},{"_id":"themes/anzhiyu/layout/includes/head.pug","hash":"8db5b7382011745f53b99b5b5577ae28140068e2","modified":1701427072601},{"_id":"themes/anzhiyu/layout/includes/pagination.pug","hash":"1e0be343f9bdc6cefc5ff0dd3c2936ed91d5be86","modified":1701427072663},{"_id":"themes/anzhiyu/layout/includes/layout.pug","hash":"3bc51657414be0c94bd27752616cc7f7d54f20cd","modified":1701427072617},{"_id":"themes/anzhiyu/layout/includes/rightside.pug","hash":"d865835bc5432d8ec15fd0cb168643f3e9b77a18","modified":1701427072678},{"_id":"themes/anzhiyu/layout/includes/music.pug","hash":"95e5ad1c387af377d1801f2c61bfb48f3e857e31","modified":1701442917624},{"_id":"themes/anzhiyu/layout/includes/mourn.pug","hash":"d114b9493fbe6551b0c4ad1c1d8886b7f98a0d60","modified":1701427072632},{"_id":"themes/anzhiyu/scripts/events/404.js","hash":"170e72e851257365468024557c767360c3deafbf","modified":1701427074395},{"_id":"themes/anzhiyu/layout/includes/shortcutKey.pug","hash":"dcf8fb7bbddd4a64626f4fcf2523ace2dfce879f","modified":1701427072694},{"_id":"themes/anzhiyu/layout/includes/sidebar.pug","hash":"fd6d7873df74994ed6a36bd07a438c427db97e18","modified":1701427072709},{"_id":"themes/anzhiyu/scripts/events/stylus.js","hash":"d3dd2d28751b9956459624f6b492e8590de83061","modified":1701427074450},{"_id":"themes/anzhiyu/scripts/events/cdn.js","hash":"39aaf1d4fed1382c85776581225747285b7b388c","modified":1701427074409},{"_id":"themes/anzhiyu/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1701427074424},{"_id":"themes/anzhiyu/scripts/events/welcome.js","hash":"3177e070519a10fff904595e152a329115d22c61","modified":1701427074464},{"_id":"themes/anzhiyu/scripts/helpers/aside_archives.js","hash":"ca03ba2a0a7f2132ac5d3f66cb1bbd9e078aed3f","modified":1701427074517},{"_id":"themes/anzhiyu/scripts/events/init.js","hash":"006401bd6f4bb3fc8756e752d6ab93bf770bb77f","modified":1701427074437},{"_id":"themes/anzhiyu/scripts/filters/random_cover.js","hash":"98275d777b3c388345de3ee8caf5d16900388925","modified":1701427074498},{"_id":"themes/anzhiyu/scripts/filters/post_lazyload.js","hash":"61f06b25c09434340e81c8c3dbbd1a0d58406652","modified":1701427074484},{"_id":"themes/anzhiyu/scripts/helpers/catalog_list.js","hash":"aa38fd791d58df3fd518adf144578f160073d06e","modified":1701427074545},{"_id":"themes/anzhiyu/scripts/helpers/get_version.js","hash":"f2b7364706fc4d039da4a486e133baf7accf6836","modified":1701427074574},{"_id":"themes/anzhiyu/scripts/helpers/aside_categories.js","hash":"19244d6a9e42c34b9df2250be2467c352fa5fd41","modified":1701427074532},{"_id":"themes/anzhiyu/scripts/helpers/inject_head_js.js","hash":"847bc24452bc23dfc860b219588cfb2bff84cfbf","modified":1701427074589},{"_id":"themes/anzhiyu/scripts/helpers/findArchiveLength.js","hash":"d8aa1a4824ba6b0df911af563ae5fb361257a88a","modified":1701427074560},{"_id":"themes/anzhiyu/scripts/helpers/page.js","hash":"0ee9ac8a03e6cf9f2df55c4c5abd83417a7cd1d4","modified":1701427074604},{"_id":"themes/anzhiyu/scripts/helpers/related_post.js","hash":"c5f70efdbfd733f4dfec0ca8fe4aded0eec394cf","modified":1701427074633},{"_id":"themes/anzhiyu/scripts/helpers/sort_attr_post.js","hash":"6b6e9fb0d0dc38e8d7136dc7720c70f0c29619ab","modified":1701427074648},{"_id":"themes/anzhiyu/scripts/helpers/random.js","hash":"d659d1d05c919d1abba2dc55439749e6e5b6e707","modified":1701427074618},{"_id":"themes/anzhiyu/scripts/helpers/tags_page_list.js","hash":"35d71c025a3289be188371cc56320c563213c4af","modified":1701427074662},{"_id":"themes/anzhiyu/source/css/index.styl","hash":"ddded5cd1da248fdc30556a33877579ff8379a48","modified":1701427075069},{"_id":"themes/anzhiyu/source/css/var.styl","hash":"7bdedada1176e55d5fb72e3cc9f46e01d03b704a","modified":1701427075086},{"_id":"themes/anzhiyu/scripts/tag/Introduction-card.js","hash":"61a55f9b1f5f576e6900d2900cb42754575a4cb7","modified":1701427074696},{"_id":"themes/anzhiyu/scripts/helpers/year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1701427074676},{"_id":"themes/anzhiyu/scripts/tag/bilibili.js","hash":"085e033cb359e8f109968748cedbd0079515e7c6","modified":1701427074710},{"_id":"themes/anzhiyu/scripts/tag/btns.js","hash":"200e1ce72f335caa71dc8423f5c5e2aba1195b61","modified":1701427074725},{"_id":"themes/anzhiyu/scripts/tag/dogeplayer.js","hash":"e9b0d88e38d3caf88b66ea39ca704d45c643ba51","modified":1701427074768},{"_id":"themes/anzhiyu/scripts/tag/button.js","hash":"430c31584930bc5407811c3dbc01be92473cfcbf","modified":1701427074739},{"_id":"themes/anzhiyu/scripts/tag/checkbox.js","hash":"fa93b169fe74bced502b0d16fe3d6bd17434b8f3","modified":1701427074754},{"_id":"themes/anzhiyu/scripts/tag/flink.js","hash":"5b0086d1b726d1068b3d8ee0563ae31485896c4b","modified":1701427074781},{"_id":"themes/anzhiyu/scripts/tag/folding.js","hash":"dc4e409eabebf5769b50c12c9e8c66b749d0ae85","modified":1701427074796},{"_id":"themes/anzhiyu/scripts/tag/hide.js","hash":"37b81ff46d104554b9a5934bfd434dbfd6a84958","modified":1701427074825},{"_id":"themes/anzhiyu/scripts/tag/gallery.js","hash":"0364b021f2519a937464e585a7e2cbdde57ca412","modified":1701427074811},{"_id":"themes/anzhiyu/scripts/tag/image.js","hash":"0b7051574af6cf28c378db65f6c6dab722a8e118","modified":1701427074855},{"_id":"themes/anzhiyu/scripts/tag/iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1701427074841},{"_id":"themes/anzhiyu/scripts/tag/label.js","hash":"87acd7d5615dd8034c51ba28d4964992d2ffed37","modified":1701427074899},{"_id":"themes/anzhiyu/scripts/tag/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1701427074870},{"_id":"themes/anzhiyu/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1701427074885},{"_id":"themes/anzhiyu/scripts/tag/link.js","hash":"a5d49f1d0e4602b0fce158efd0b1ec02c0bfd3e3","modified":1701427074914},{"_id":"themes/anzhiyu/scripts/tag/media.js","hash":"76efb072e0716e55deedb044fed1ad585871335b","modified":1701427074927},{"_id":"themes/anzhiyu/scripts/tag/mermaid.js","hash":"d3d6c8a23ddfecac35f7022eecd4ffc6171a37fa","modified":1701427074940},{"_id":"themes/anzhiyu/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1701427074955},{"_id":"themes/anzhiyu/scripts/tag/site.js","hash":"bc34bfab53f520bec33d273ee599de5905ca19a9","modified":1701427074969},{"_id":"themes/anzhiyu/scripts/tag/span.js","hash":"0a2188be1e3ee6ed183c0f16d24795ef31116e10","modified":1701427074983},{"_id":"themes/anzhiyu/scripts/tag/tabs.js","hash":"dea5cd52bb9fd658bc03074b2388d91ea528fc2b","modified":1701427074996},{"_id":"themes/anzhiyu/scripts/tag/tip.js","hash":"e45a0955439dfbe6c0b4d27f8403896a0fb1d33b","modified":1701427075025},{"_id":"themes/anzhiyu/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1701427075011},{"_id":"themes/anzhiyu/source/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1701427077095},{"_id":"themes/anzhiyu/source/img/add-to-list.svg","hash":"31265e9da9b51e3a5e2e4de9398e4884258347e3","modified":1701435420814},{"_id":"themes/anzhiyu/source/img/aperture.svg","hash":"919a589007e3d00d191df7804cbfeee3ac2b8458","modified":1701435420842},{"_id":"themes/anzhiyu/source/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1701427077135},{"_id":"themes/anzhiyu/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1701427077118},{"_id":"themes/anzhiyu/source/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1701427077169},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1701427077152},{"_id":"themes/anzhiyu/source/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1701427077343},{"_id":"themes/anzhiyu/source/js/main.js","hash":"754730a48fe170d4c3a802ba52e88706b7b3d696","modified":1701427077328},{"_id":"themes/anzhiyu/source/js/utils.js","hash":"2519befd6127526c553d21117efc91a3b4a700f4","modified":1701427077358},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/ai-info.pug","hash":"0c2e9e58069880c0617208840cf2f0712339ddf0","modified":1701427072729},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/clock.pug","hash":"c13b21cdcbc5280deb26537c58af5443cb66c62f","modified":1701427072744},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/console.pug","hash":"d46c93a7a22129795cc856045967b0e07c5e53c2","modified":1701427072759},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/rightmenu.pug","hash":"2747252c6337d8fb7ba773cdb466611607f9a23b","modified":1701427072788},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/log-js.pug","hash":"348ab6e29f46ea9858d9c86fa0dafe26dc96b6fa","modified":1701682005278},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/tags-group-all.pug","hash":"bc16fa91883895544273161cc8672bfe5c010e5e","modified":1701427072806},{"_id":"themes/anzhiyu/layout/includes/bili-banner/index.pug","hash":"8cb1c404adc6fe188bdceca3c09d3f215048e9bd","modified":1701427072828},{"_id":"themes/anzhiyu/layout/includes/head/Open_Graph.pug","hash":"dff5b967a641f385c4661fe66ad62d53cabf857a","modified":1701427072851},{"_id":"themes/anzhiyu/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1701427072870},{"_id":"themes/anzhiyu/layout/includes/head/config_site.pug","hash":"3038adec24b17f019bdd7d6aa15ebe091b11397d","modified":1701427072901},{"_id":"themes/anzhiyu/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1701427072916},{"_id":"themes/anzhiyu/layout/includes/head/config.pug","hash":"270cdf99f0405f8f9cac38b24f9ed1f5d5d18cfc","modified":1701427072885},{"_id":"themes/anzhiyu/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1701427072932},{"_id":"themes/anzhiyu/layout/includes/head/pwa.pug","hash":"a4cc65381275e09f3f54f6e958d359c89c7b2c4e","modified":1701427072962},{"_id":"themes/anzhiyu/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1701427072979},{"_id":"themes/anzhiyu/layout/includes/loading/fullpage-loading.pug","hash":"39977280dd32f1435a97f285a75f2a02902472d6","modified":1701427073081},{"_id":"themes/anzhiyu/layout/includes/head/preconnect.pug","hash":"56ef61e74598cf60551d363a15fc53842b8dc41b","modified":1701427072947},{"_id":"themes/anzhiyu/layout/includes/header/menu_item.pug","hash":"4537154b8830310ce5dff3c9cfd558f0ec1311a5","modified":1701427073016},{"_id":"themes/anzhiyu/layout/includes/header/index.pug","hash":"c865d51436cfd5413df6c691a7ab1f0eb600e79c","modified":1701427073000},{"_id":"themes/anzhiyu/layout/includes/loading/index.pug","hash":"f86b0c45874ae1335ab575c29d4f9c8ea09ab92a","modified":1701427073095},{"_id":"themes/anzhiyu/layout/includes/header/nav.pug","hash":"e567624b78d723346193a9b0d28032031997b865","modified":1701427073031},{"_id":"themes/anzhiyu/layout/includes/header/post-info.pug","hash":"0f1503c88d05ada69919e0bdbbf7b2ea1603d20b","modified":1701427073046},{"_id":"themes/anzhiyu/layout/includes/header/social.pug","hash":"2185b69eb54656ed9e401bc47ca3cd9905b022f3","modified":1701427073060},{"_id":"themes/anzhiyu/layout/includes/loading/pace.pug","hash":"7f04cabd68f75d7f953503283316e1594bbec45f","modified":1701427073110},{"_id":"themes/anzhiyu/layout/includes/page/about.pug","hash":"fa529ca6b5ab9001822668697f410cc3020980ad","modified":1701427073169},{"_id":"themes/anzhiyu/layout/includes/mixins/article-sort.pug","hash":"7a06f5f24f8e32b3025cf43474db9519d48517e5","modified":1701427073132},{"_id":"themes/anzhiyu/layout/includes/page/album.pug","hash":"0ca70f1ec4757d6127048d71762752dabf1af2ea","modified":1701427073184},{"_id":"themes/anzhiyu/layout/includes/mixins/post-ui.pug","hash":"80858e19caf57c275cb7d6acf3bfff7d0c90c774","modified":1701427073148},{"_id":"themes/anzhiyu/layout/includes/page/album_detail.pug","hash":"c735533f7671905d06bae5645306cd08abb0b43c","modified":1701427073199},{"_id":"themes/anzhiyu/layout/includes/page/categories.pug","hash":"f23d074ef6875311e74169da7592ecf667539775","modified":1701427073214},{"_id":"themes/anzhiyu/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1701427073229},{"_id":"themes/anzhiyu/layout/includes/page/equipment.pug","hash":"87ca40c49ddfe9c266cd96b4eb3594d7c64c1d55","modified":1701427073244},{"_id":"themes/anzhiyu/layout/includes/page/essay.pug","hash":"b0a25ded52c72c84bd29593bd7a57046c4b36195","modified":1701427073260},{"_id":"themes/anzhiyu/layout/includes/popup/index.pug","hash":"3ac8714556f94a614100aeddeb7f7e0cdff2fb9c","modified":1701427073362},{"_id":"themes/anzhiyu/layout/includes/page/flink.pug","hash":"56638092eef96fdb0072967fb95b857e31144fe2","modified":1701427073293},{"_id":"themes/anzhiyu/layout/includes/page/fcircle.pug","hash":"a4bfc9855bcfc859f0c04e869e0ec8cb8d2a1357","modified":1701427073275},{"_id":"themes/anzhiyu/layout/includes/post/post-copyright.pug","hash":"10638ede3b9ea1ef4e336f5c4d690239ef353843","modified":1701427073382},{"_id":"themes/anzhiyu/layout/includes/page/music.pug","hash":"3cbec3b3dc0f0e812f29c222ebb2d2a3d8c2719f","modified":1701427073309},{"_id":"themes/anzhiyu/layout/includes/post/ptool.pug","hash":"173d1a63099109bd909de919281db9f2b2a023f0","modified":1701427073398},{"_id":"themes/anzhiyu/layout/includes/page/room.pug","hash":"c35a2fb076e0196ba28389b5309dde33a2add576","modified":1701427073324},{"_id":"themes/anzhiyu/layout/includes/page/tags.pug","hash":"62882d8a699254486add2f7b0f089521732e4869","modified":1701427073339},{"_id":"themes/anzhiyu/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1701427073435},{"_id":"themes/anzhiyu/layout/includes/post/reward.pug","hash":"cdf5ff34ba8efe526cfe77ddf3277d997d172d41","modified":1701427073413},{"_id":"themes/anzhiyu/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1701427073451},{"_id":"themes/anzhiyu/layout/includes/third-party/footerBarSubtitle.pug","hash":"bb2df2fbbdc9fe0f4b9d66928247faa49f70e2e5","modified":1701427073468},{"_id":"themes/anzhiyu/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1701427073483},{"_id":"themes/anzhiyu/layout/includes/third-party/pjax.pug","hash":"4ee026b34e6ecc2c03cf04933973b496472309c2","modified":1701427073499},{"_id":"themes/anzhiyu/layout/includes/top/top.pug","hash":"9f849b05e220efa72d56f524a27ab2877e27e9e3","modified":1701427074112},{"_id":"themes/anzhiyu/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1701427073514},{"_id":"themes/anzhiyu/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1701427073529},{"_id":"themes/anzhiyu/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1701427074134},{"_id":"themes/anzhiyu/layout/includes/widget/card_archives.pug","hash":"9ca97d85cc7b214e1107d0b4feac4d8ad2fd0ac8","modified":1701427074165},{"_id":"themes/anzhiyu/layout/includes/widget/card_author.pug","hash":"b7e11bcd199f343a844315e5d16735205dded9d2","modified":1701427074181},{"_id":"themes/anzhiyu/layout/includes/widget/card_announcement.pug","hash":"ed8796dd3c5710d745fdcc0021b02a3cda07fd1b","modified":1701427074150},{"_id":"themes/anzhiyu/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1701427074196},{"_id":"themes/anzhiyu/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1701427074212},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_archives.pug","hash":"8c095ae91183d6a2aeed64f378e60baaa29d4065","modified":1701427074228},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_tags.pug","hash":"d723516d48cd94a68819df5c61087c9e7339e2af","modified":1701427074244},{"_id":"themes/anzhiyu/layout/includes/widget/card_newest_comment.pug","hash":"419eed9a771299c9ffb85fdf38073bbd5bd7775c","modified":1701427074259},{"_id":"themes/anzhiyu/layout/includes/widget/card_post_toc.pug","hash":"638417324111b66c834314b96cbf02e959be58f4","modified":1701427074276},{"_id":"themes/anzhiyu/layout/includes/widget/card_recent_post.pug","hash":"544272cb0977b8a941de22f1f58f76d370b2cbbd","modified":1701427074292},{"_id":"themes/anzhiyu/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1701427074322},{"_id":"themes/anzhiyu/layout/includes/widget/card_tags.pug","hash":"3475134643b70cbf0e806806bd2e0d2a7371f8a5","modified":1701427074307},{"_id":"themes/anzhiyu/source/css/_global/function.styl","hash":"dc7e5463ec340feab4eab5a5d5c48b14500f3822","modified":1701495567250},{"_id":"themes/anzhiyu/layout/includes/widget/card_webinfo.pug","hash":"5ddf285ca0ecbb57cbbbc36a4e9eaaca40406257","modified":1701427074338},{"_id":"themes/anzhiyu/layout/includes/widget/card_weixin.pug","hash":"28f11437bcba4df1e53fc1e32df213392b9ca4b6","modified":1701427074353},{"_id":"themes/anzhiyu/source/css/_global/icon.styl","hash":"da488461e8c5e504961c0a8f44b1e3605f72f956","modified":1701427076061},{"_id":"themes/anzhiyu/layout/includes/widget/index.pug","hash":"e33c360217b11a7980e780a5bc20e9d31f5dacf5","modified":1701427074369},{"_id":"themes/anzhiyu/source/css/_highlight/highlight.styl","hash":"3b8ed7884ce87bec2fa248df8d9dd1878a7010fe","modified":1701427076109},{"_id":"themes/anzhiyu/source/css/_global/index.styl","hash":"55850e21e138a0ad8250f4b2ff38412fdb343d1d","modified":1701427076075},{"_id":"themes/anzhiyu/source/css/_layout/404.styl","hash":"02a8df2e9734848cc4670a4b9f6e9a776e995644","modified":1701427076229},{"_id":"themes/anzhiyu/source/css/_highlight/theme.styl","hash":"c074efc93f4f118c3fc3b3d3c9f9abc42e4858b4","modified":1701427076123},{"_id":"themes/anzhiyu/source/css/_layout/banner.styl","hash":"62f4202467cc9f313361911ed2a2005e66b3b2ca","modified":1701427076254},{"_id":"themes/anzhiyu/source/css/_global/loading.styl","hash":"734c69c16135543267794e12b43e776d501fb6ca","modified":1701427076089},{"_id":"themes/anzhiyu/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1701427076269},{"_id":"themes/anzhiyu/source/css/_layout/aside.styl","hash":"b62fbde63342f779b4dd27492e6da878c25f7dfb","modified":1701427076241},{"_id":"themes/anzhiyu/source/css/_layout/comments.styl","hash":"16bd9e2f05db23a677dddc82ae621e9339e75cdc","modified":1701427076283},{"_id":"themes/anzhiyu/source/css/_layout/footer.styl","hash":"ce21052dd27e752c3734083ec1401b96c542bfda","modified":1701427076298},{"_id":"themes/anzhiyu/source/css/_layout/head.styl","hash":"bfb5d818394942ea243a1a0379521d4de4ca4010","modified":1701427076311},{"_id":"themes/anzhiyu/source/css/_layout/home_top.styl","hash":"c975f539ae6bed3b24c9dc3914b412f179ee2543","modified":1701427076323},{"_id":"themes/anzhiyu/source/css/_layout/oneGraphFlow.styl","hash":"1e5843caf8674429a5782712879c4a532074514d","modified":1701427076349},{"_id":"themes/anzhiyu/source/css/_layout/pagination.styl","hash":"88f2fbb0ccb061410b07e1ed6303583230e96d4e","modified":1701427076363},{"_id":"themes/anzhiyu/source/css/_layout/nav.styl","hash":"25524f214e245737c5bfc551de1b76b5d6515a20","modified":1701427076336},{"_id":"themes/anzhiyu/source/css/_layout/ptool.styl","hash":"2ffeca0499c6ad1c4ea2ef783d7493b713b24569","modified":1701427076390},{"_id":"themes/anzhiyu/source/css/_layout/post.styl","hash":"2a4a8af05bc24edbd14c4160b17489242164727f","modified":1701427076377},{"_id":"themes/anzhiyu/source/css/_layout/relatedposts.styl","hash":"c67558ba609b59375f8ee6ad479fcb16ddda9cb6","modified":1701427076403},{"_id":"themes/anzhiyu/source/css/_layout/reward.styl","hash":"152b802a38f029dece2b8f8812404cec25975212","modified":1701427076416},{"_id":"themes/anzhiyu/source/css/_layout/rightmenu.styl","hash":"cc622c70ff61ef70dfa6445b5b4b09eb92cf9994","modified":1701427076429},{"_id":"themes/anzhiyu/source/css/_layout/rightside.styl","hash":"bebc753a414d3fb807b5bf8dfeb87fe602e92e73","modified":1701427076442},{"_id":"themes/anzhiyu/source/css/_mode/darkmode.styl","hash":"43391bb6a4d1908c87515851c41b8d97b847b49b","modified":1701427076500},{"_id":"themes/anzhiyu/source/css/_layout/shortcutKey.styl","hash":"ca7674768558396a8e2f9eaa452575bff099e4e8","modified":1701427076455},{"_id":"themes/anzhiyu/source/css/_layout/third-party.styl","hash":"a6b708dfeda4ad837bbfc76bd74810805ca521a0","modified":1701427076480},{"_id":"themes/anzhiyu/source/css/_layout/sidebar.styl","hash":"57d6857a1209dacb6f3fd0eb3c3f539fef3a2daf","modified":1701427076468},{"_id":"themes/anzhiyu/source/css/_mode/readmode.styl","hash":"a5a27dea73ed993ce81ca691eff9eb71c2b311a7","modified":1701427076513},{"_id":"themes/anzhiyu/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1701427076533},{"_id":"themes/anzhiyu/source/css/_page/about.styl","hash":"72a3345b9791fcf51bb74ff6eebfda4674e8f60d","modified":1701427076546},{"_id":"themes/anzhiyu/source/css/_page/archives.styl","hash":"8652be12d88083f71a1efb88a2482a0aeda2c65f","modified":1701427076558},{"_id":"themes/anzhiyu/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1701427076572},{"_id":"themes/anzhiyu/source/css/_page/common.styl","hash":"99ca9cb011349c045ed779bd5db9763c2073bbfe","modified":1701427076585},{"_id":"themes/anzhiyu/source/css/_page/flink.styl","hash":"990a1b5d937980ec1f6f764f4b5ce371279cc451","modified":1701427076613},{"_id":"themes/anzhiyu/source/css/_page/homepage.styl","hash":"7b2b2b4a7f3139f7db2d535b2ed7167db8bfd0ed","modified":1701427076626},{"_id":"themes/anzhiyu/source/css/_page/equipment.styl","hash":"8ed450c37e8b5b5d6ce04245b54fc0877b0ad0d9","modified":1701427076599},{"_id":"themes/anzhiyu/source/css/_page/music.styl","hash":"290dd82c05bc21a0f22a7b666f2af233e9e8bbb2","modified":1701427076639},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1701427077255},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1701427077238},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1701427077378},{"_id":"themes/anzhiyu/source/css/_page/reward.styl","hash":"3a6e95f58b1692c6ee67a669fc965d9dea026186","modified":1701427076653},{"_id":"themes/anzhiyu/source/css/_page/tag_page.styl","hash":"704a74185d0e872ca3358567a2ecede5c2d35910","modified":1701427076666},{"_id":"themes/anzhiyu/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1701427076680},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1701427077272},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1701427077392},{"_id":"themes/anzhiyu/source/css/_search/algolia.styl","hash":"f7cb2effef6b4e587fad385d7c11b4b23c110589","modified":1701427076700},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1701427077307},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1701427077290},{"_id":"themes/anzhiyu/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1701427076726},{"_id":"themes/anzhiyu/source/css/_search/index.styl","hash":"fd2833ec664a9de9a7b3dd1cade7d65e3ad80ddd","modified":1701427076713},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1701427077406},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1701427077421},{"_id":"themes/anzhiyu/source/css/_third-party/normalize.min.css","hash":"56fb92b28926290d6e609eb039d698eb94a3b2bb","modified":1701427077028},{"_id":"themes/anzhiyu/source/css/_third-party/snackbar.styl","hash":"47a90d6a87744c6e4ced18b95220debef8f278d0","modified":1701427077042},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1701427077435},{"_id":"themes/anzhiyu/source/css/_third-party/twikoo.styl","hash":"51475a99ec3281fb98ca8707e28064f91dd9c68a","modified":1701427077056},{"_id":"themes/anzhiyu/source/css/_tags/bilbili.styl","hash":"081833e071be562201c56ec4db000b7ac144a39a","modified":1701427076758},{"_id":"themes/anzhiyu/source/css/_tags/Introduction-card.styl","hash":"ec70e67c2a8bc1a0ebe536091d97bc326faf9973","modified":1701427076746},{"_id":"themes/anzhiyu/source/css/_tags/btns.styl","hash":"903b571a6e352e5014e35e9a675b7d2d6e5b82bd","modified":1701427076773},{"_id":"themes/anzhiyu/source/css/_tags/button.styl","hash":"af1840996356aeae6ffbee49ab86aa7834ab18a0","modified":1701427076787},{"_id":"themes/anzhiyu/source/css/_tags/checkbox.styl","hash":"2a31f4c0cd31f67342564ef22254eb317d82f331","modified":1701427076800},{"_id":"themes/anzhiyu/source/css/_tags/folding.styl","hash":"537320d4762bef842beabfbde9b27f0e2ece2ba6","modified":1701427076813},{"_id":"themes/anzhiyu/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1701427076839},{"_id":"themes/anzhiyu/source/css/_tags/gallery.styl","hash":"697408d915056ae6e6814e0f24ca013f68227f74","modified":1701427076826},{"_id":"themes/anzhiyu/source/css/_tags/hide.styl","hash":"810c54530d3799fe492d9c3d4842ab5ca4243092","modified":1701427076852},{"_id":"themes/anzhiyu/source/css/_tags/inline-labels.styl","hash":"d9bdac4ca48b19cc028efc1a084ebf99c38bb8ec","modified":1701427076882},{"_id":"themes/anzhiyu/source/css/_tags/image.styl","hash":"4cf305b1d57d0c9bfe948f916fe9b124ee62fc0a","modified":1701427076867},{"_id":"themes/anzhiyu/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1701427076910},{"_id":"themes/anzhiyu/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1701427076896},{"_id":"themes/anzhiyu/source/css/_tags/media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1701427076923},{"_id":"themes/anzhiyu/source/css/_tags/note.styl","hash":"3b357c94cb8e80039cc1689161637d5b9690ff18","modified":1701427076936},{"_id":"themes/anzhiyu/source/css/_tags/site-card.styl","hash":"5ff77bfa663aca406e3a0bd822da0d6e3c3c2c8b","modified":1701427076948},{"_id":"themes/anzhiyu/source/css/_tags/span.styl","hash":"f75112e431fcbef352a7ee7f0aa85e8b2f0b4a26","modified":1701427076962},{"_id":"themes/anzhiyu/source/css/_tags/tabs.styl","hash":"b0dc66d3daafe8c3a022f7235de3d8224cb56ec9","modified":1701427076976},{"_id":"themes/anzhiyu/source/css/_tags/tip.styl","hash":"0f712be285681bac71e96c48d0836b8fea52bf6f","modified":1701427077005},{"_id":"themes/anzhiyu/source/css/_tags/timeline.styl","hash":"3076b68fece8ef394cbd44570037e5e479fdd277","modified":1701427076991},{"_id":"themes/anzhiyu/source/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1701427077458},{"_id":"themes/anzhiyu/source/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1701427077472},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1701427073550},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/index.pug","hash":"a20dd36c318c7a37870fbc9dcecbc03f94ade817","modified":1701427073566},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1701427073580},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1701427073596},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1701427073636},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/waline.pug","hash":"b40b0cbd0389f03fed5ddf624fa598613135046a","modified":1701427073613},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1701427073652},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1701427073667},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/index.pug","hash":"9eff7757c825d776edde1c1dd09623a91d891e6b","modified":1701427073682},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/tidio.pug","hash":"76b08a6da3eed8f90304fa6546783e5c04a792fb","modified":1701427073697},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/index.pug","hash":"a77f0e963a59ab2e28c7ce294d4bb951a0262877","modified":1701427073735},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/twikoo.pug","hash":"1582986ede8a9c727004d1dc114bd7ee92880641","modified":1701427073766},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/js.pug","hash":"d7ec11022237359926a4ff1d3aa8355c1713765e","modified":1701427073751},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/artalk.pug","hash":"78c33bec5e0ce34f5fd71d6a64fc357b3a635fd6","modified":1701427073719},{"_id":"themes/anzhiyu/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1701427073821},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/valine.pug","hash":"e54a60b1795721153faaa887b46a68b68bcd3abc","modified":1701427073782},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/waline.pug","hash":"b996993c61e53be6a46dd78634c95ab8e42fb4ab","modified":1701427073798},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/artalk.pug","hash":"744ba5c57a76eca3eabb79f0dea236f042ccdacb","modified":1701427073891},{"_id":"themes/anzhiyu/layout/includes/third-party/math/katex.pug","hash":"235fb3c8b4da8ec6b010d4d30d3594d3dbfd0bbe","modified":1701427073836},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1701427073853},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/index.pug","hash":"6dafa98f6082e909c00396a4793ed3e7c866f824","modified":1701427073906},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mermaid.pug","hash":"10f3949da0889c1ec3e3617da290927d834d1f6d","modified":1701427073868},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"456d0072d5e1be5575c06607c3148105ee719da8","modified":1701427073921},{"_id":"themes/anzhiyu/source/css/_extra/album/album.css","hash":"d3938a8e6edcf2be0dff02728f605406feba800d","modified":1701427075113},{"_id":"themes/anzhiyu/source/css/_extra/album/album_detail.css","hash":"b75189ece986fa6b645751791a72d2783fbae05f","modified":1701427075131},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/valine.pug","hash":"964515f09e92884f0a14bd262382ce884dd3d53c","modified":1701427073936},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/waline.pug","hash":"ccf040263c728ccfd14f8a2a0f9b1ceea7ca87f0","modified":1701427073952},{"_id":"themes/anzhiyu/layout/includes/third-party/search/docsearch.pug","hash":"cb42537ea530d6679a46a1db092da0e91756b2c3","modified":1701427074012},{"_id":"themes/anzhiyu/layout/includes/third-party/search/algolia.pug","hash":"fbdeb32013088e8f7f4c8a6a1f20622e58dc09c2","modified":1701427073998},{"_id":"themes/anzhiyu/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1701427074062},{"_id":"themes/anzhiyu/layout/includes/third-party/runtime/runtime-js.pug","hash":"63391ff01fd55d8c48b3a9e46d83d4af75908ffb","modified":1701427073977},{"_id":"themes/anzhiyu/layout/includes/third-party/search/local-search.pug","hash":"d3f133564dda5e2c51661a914ae5aab8fb9dbaf6","modified":1701427074042},{"_id":"themes/anzhiyu/source/css/_extra/anzhiyu/custom.css","hash":"82769d1c1dae4ea347211e271c96cdeca508da1e","modified":1701427075154},{"_id":"themes/anzhiyu/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1701427074027},{"_id":"themes/anzhiyu/layout/includes/third-party/share/index.pug","hash":"b0e932171cbdfeb8a98bc1e8b78172f672f5fdfd","modified":1701427074077},{"_id":"themes/anzhiyu/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1701427074091},{"_id":"themes/anzhiyu/source/css/_extra/aside_weixin/aside_weixin.css","hash":"17015ed4c296ea890e807716c6abe0a11ddcb906","modified":1701427075178},{"_id":"themes/anzhiyu/source/css/_extra/catalog_list/catalog_list.css","hash":"a1551158577967485ebce34cc3b19040d7e4ab64","modified":1701427075202},{"_id":"themes/anzhiyu/source/css/_extra/categoryBar/categoryBar.css","hash":"b9ab5612f4d24092388defcb8db7399445a10710","modified":1701427075226},{"_id":"themes/anzhiyu/source/css/_extra/clock/clock.css","hash":"b91f3216c6e859f89d9348bd9517c764e607402d","modified":1701427075248},{"_id":"themes/anzhiyu/source/css/_extra/console/console.css","hash":"f61b9504a5f7b33d7508c9c5201c0c21ae9f8d53","modified":1701427075341},{"_id":"themes/anzhiyu/source/css/_extra/code/code.css","hash":"976b68722d6698d7687f362532d7a0e6b6050d3e","modified":1701427075274},{"_id":"themes/anzhiyu/source/css/_extra/commentBarrage/commentBarrage.css","hash":"a1355fe5e03c5e5dbd17761cc7a80fa9758c5891","modified":1701427075317},{"_id":"themes/anzhiyu/source/css/_extra/code/details_summary.css","hash":"30b01d74157aaccea84c4c0d7e0ebb65f5a7f9c9","modified":1701427075292},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/home_essay_bar.css","hash":"bfb259092223dcdfcb1a652330dc8ea1236fe76c","modified":1701427075382},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/essay_page.css","hash":"0d62e0d6b6f57fce49d347c8ce969071933dcd45","modified":1701427075365},{"_id":"themes/anzhiyu/source/css/_extra/fix/categories.css","hash":"563bd4583007329c6e34c28883ee26a39af6c8f3","modified":1701427075453},{"_id":"themes/anzhiyu/source/css/_extra/fix/aplayer.css","hash":"00aee0451ccb5b2f402ecb7f358acf78c53cee60","modified":1701427075406},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-bangumi.css","hash":"81567514e32d5c2cc647aff121f405c7a7b50897","modified":1701427075422},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-ratio.css","hash":"ad6edf2b75dd717e9dff9fe4ca4db79c1599a6f9","modified":1701427075437},{"_id":"themes/anzhiyu/source/css/_extra/fix/comments.css","hash":"667a4182d046cb6bf0561bdb7fe8c788ae79438f","modified":1701427075485},{"_id":"themes/anzhiyu/source/css/_extra/fix/clock.css","hash":"90e0bce1341d9e01aa0efaf9c70256ef5fe6139b","modified":1701427075469},{"_id":"themes/anzhiyu/source/css/_extra/fix/dark.css","hash":"febe18af9e0cc45c6a35f0e0ef085c182985afa6","modified":1701427075500},{"_id":"themes/anzhiyu/source/css/_extra/fix/gitcalendar.css","hash":"f99c63423cbedb8f12ccea673d8e79e10a4cfb6c","modified":1701427075532},{"_id":"themes/anzhiyu/source/css/_extra/fix/fcircle_page.css","hash":"02ce333e7f9ed6b9756a6706475192e2fd3fbd4b","modified":1701427075516},{"_id":"themes/anzhiyu/source/css/_extra/fix/hide-block.css","hash":"15e0c13f8451bfe36fa5e464b86767bd98cab70b","modified":1701427075565},{"_id":"themes/anzhiyu/source/css/_extra/footer/footer.css","hash":"d94ed305398eb831b9e7160ce54510b0d25fcf67","modified":1701427075656},{"_id":"themes/anzhiyu/source/css/_extra/fix/hexo-tag-dplayer.css","hash":"90e6ba180e0b9267aa0bf27eb9f0a1d2e9cb3ecc","modified":1701427075549},{"_id":"themes/anzhiyu/source/css/_extra/fix/overflow.css","hash":"71e3bd9905684e6e2ba6e18282e982d96dc4d61d","modified":1701427075598},{"_id":"themes/anzhiyu/source/css/_extra/fix/link_page.css","hash":"69e5ed458c0dc10d93ebb7e4943196be1167ed5a","modified":1701427075581},{"_id":"themes/anzhiyu/source/css/_extra/fix/radius.css","hash":"6ef242f7a79427da9651a26c8a07e4e56ac56a42","modified":1701427075614},{"_id":"themes/anzhiyu/source/css/_extra/fix/site-card.css","hash":"0a662f62c69d36ac583528c02346d848aa1d026a","modified":1701427075632},{"_id":"themes/anzhiyu/source/css/_extra/friends/friends.css","hash":"a2e50f529aa1fd60732d9a892166bb1d3ae725d7","modified":1701427075680},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top.css","hash":"4bf724bd2f1a0447532456c60701e79b906c8dd0","modified":1701427075744},{"_id":"themes/anzhiyu/source/css/_extra/greeting_box/greeting_box.css","hash":"208ba729979dffdaa2f82639027a09b8c64fc5c2","modified":1701427075703},{"_id":"themes/anzhiyu/source/css/_extra/home_top/categorygroup.css","hash":"bc5b8a6cddca8c36a96ea5ecd1e56a5860bbb09a","modified":1701427075727},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top_post_group.css","hash":"04d9a3bd9cb247f4c391af0cd7cb47206974ceaf","modified":1701427075761},{"_id":"themes/anzhiyu/source/css/_extra/home_top/top_group_banner.css","hash":"785789d5f07da4d0865f083641ad3ffe4756d589","modified":1701427075811},{"_id":"themes/anzhiyu/source/css/_extra/home_top/swiperstyle.css","hash":"ea249de8cebc68cda7e62705df2acd7c78d13f37","modified":1701427075795},{"_id":"themes/anzhiyu/source/css/_extra/local_search/local_search.css","hash":"d3bc30e147897fb3026284d4244c4cf195d4588a","modified":1701427075836},{"_id":"themes/anzhiyu/source/css/_extra/reset/reset.css","hash":"0617cd338ebe4be2820d03d88376b30e0f378c1c","modified":1701427075861},{"_id":"themes/anzhiyu/source/css/_extra/skills/skills.css","hash":"6dcf742c38dcdf988e3d6f545fbfa0227d3155ea","modified":1701427075984},{"_id":"themes/anzhiyu/source/css/_extra/room/room.css","hash":"82eb83dc296c045b0388cd9417ff1bc822e46f41","modified":1701427075911},{"_id":"themes/anzhiyu/source/css/_extra/reward/about-reward.css","hash":"f95871737b0e883ab70b30948b2cd4339bf36756","modified":1701427075886},{"_id":"themes/anzhiyu/source/css/_extra/tag/site.css","hash":"631a068d827a84a46fa03282b4ca38936c4bc4f3","modified":1701427076025},{"_id":"themes/anzhiyu/source/css/_extra/runtime/runtime.css","hash":"7fd033212b0dcdb06ca7f7a83343ea1b6044d59c","modified":1701427075935},{"_id":"themes/anzhiyu/source/css/_extra/tag/link.css","hash":"dbc87df28d7dfa366ab3c91ac61967ac48d7877c","modified":1701427076009},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1701427076144},{"_id":"themes/anzhiyu/source/css/_extra/single_card/single_card.css","hash":"1559219f059389933e435dd081af5e6e17ef4b75","modified":1701427075960},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/index.styl","hash":"a097508cf229a100eb358431c7cea86dbc0ea9a5","modified":1701427076157},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1701427076180},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/index.styl","hash":"7751de787861a9b45cf3879fb18601abc8935bde","modified":1701427076194},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1701427076209},{"_id":"themes/anzhiyu/source/img/weixin.png","hash":"6c529ce1002a6e675813ac89ced5b37a0a592779","modified":1701434682946},{"_id":"themes/anzhiyu/source/img/zhifubao.jpg","hash":"13bce0db779da0bc6e9734ad2f950f2599753a55","modified":1701434727185},{"_id":"themes/anzhiyu/source/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1701427077079},{"_id":"themes/anzhiyu/source/img/touxiang.png","hash":"4b288603503185ade6b3c4f2f5303d60a2cdc494","modified":1701434262723},{"_id":"themes/anzhiyu/source/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1701427077191},{"_id":"themes/anzhiyu/source/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1701427077215},{"_id":"public/anzhiyu/random.js","hash":"15bd97b469496ac84aff86e2f6754f2ddc219f60","modified":1701757740798},{"_id":"public/categories/index.html","hash":"2d93d7a6dae9f6b8a3b4990caab447afab61d9b9","modified":1701757740798},{"_id":"public/tags/index.html","hash":"e57f5068eae1a1d086213a825e7e5d971c6eaefc","modified":1701757740798},{"_id":"public/2023/12/01/hexo-anzhiyu学习/index.html","hash":"b7c4b151a05efdbab3c97c0b01e41b8de2caf337","modified":1701501433227},{"_id":"public/archives/index.html","hash":"e043268998b4ec17585a8c57dcad0a504d2f8fee","modified":1701757763675},{"_id":"public/404.html","hash":"205cd8089cfa2b42dd452f44e031982e8418c3a2","modified":1701757763675},{"_id":"public/2023/12/01/hello-world/index.html","hash":"b89697665b52d5d45d05b68ff9d61f61cb738789","modified":1701678641977},{"_id":"public/archives/2023/12/index.html","hash":"a291cc29d031c8505d76985b19ee3c92ed725905","modified":1701757763675},{"_id":"public/archives/2023/index.html","hash":"88698cd738decb499aabd54e7c7130bdbc3ac9af","modified":1701757763675},{"_id":"public/index.html","hash":"66b42d32fdb7acd0a4c02d002ac53a95c0141509","modified":1701757763675},{"_id":"public/images/hello-world-1701430188804.png","hash":"1085603f8a3fd9aa8dd00fd9afcc98e433fe297a","modified":1701436892128},{"_id":"public/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1701436892128},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1701436892128},{"_id":"public/img/add-to-list.svg","hash":"31265e9da9b51e3a5e2e4de9398e4884258347e3","modified":1701436892128},{"_id":"public/img/aperture.svg","hash":"919a589007e3d00d191df7804cbfeee3ac2b8458","modified":1701436892128},{"_id":"public/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1701436892128},{"_id":"public/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1701436892128},{"_id":"public/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1701436892128},{"_id":"public/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1701436892128},{"_id":"public/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1701436892128},{"_id":"public/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1701436892128},{"_id":"public/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1701436892128},{"_id":"public/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1701436892128},{"_id":"public/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1701436892128},{"_id":"public/img/weixin.png","hash":"6c529ce1002a6e675813ac89ced5b37a0a592779","modified":1701436892128},{"_id":"public/img/zhifubao.jpg","hash":"13bce0db779da0bc6e9734ad2f950f2599753a55","modified":1701436892128},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701436892128},{"_id":"public/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1701436892128},{"_id":"public/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1701436892128},{"_id":"public/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1701436892128},{"_id":"public/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1701436892128},{"_id":"public/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1701436892128},{"_id":"public/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1701436892128},{"_id":"public/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1701436892128},{"_id":"public/css/index.css","hash":"5305ce9fbabc35370d4450b903e677d4e0785975","modified":1701436892128},{"_id":"public/js/main.js","hash":"754730a48fe170d4c3a802ba52e88706b7b3d696","modified":1701436892128},{"_id":"public/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1701436892128},{"_id":"public/js/utils.js","hash":"2519befd6127526c553d21117efc91a3b4a700f4","modified":1701436892128},{"_id":"public/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1701436892128},{"_id":"public/img/touxiang.png","hash":"4b288603503185ade6b3c4f2f5303d60a2cdc494","modified":1701436892128},{"_id":"public/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1701436892128},{"_id":"public/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1701436892128},{"_id":"source/images/hexo-anzhiyu学习-1701497363539.png","hash":"30e969a61ec66010cf76fc0d6a93619ce8a21696","modified":1701497364716},{"_id":"themes/anzhiyu/source/img/suanfa.png","hash":"08b529da5e564de42c36f8d2303f3036f81a21d2","modified":1701499185154},{"_id":"public/categories/算法/index.html","hash":"e5e842acddc69c385f8ebd87d2e279ece4b67bfd","modified":1701757763675},{"_id":"public/tags/就业/index.html","hash":"762e28d05e7503afb88a710a6a220168cedf3da9","modified":1701757763675},{"_id":"public/images/hexo-anzhiyu学习-1701497363539.png","hash":"30e969a61ec66010cf76fc0d6a93619ce8a21696","modified":1701499686472},{"_id":"public/img/suanfa.png","hash":"08b529da5e564de42c36f8d2303f3036f81a21d2","modified":1701499686472},{"_id":"source/_data/about.yml","hash":"38d9d2256085e1f9870242d8c4d930d93161aba0","modified":1701682323501},{"_id":"source/_data/album.yml","hash":"df7f03c7f7f8413398d749ecc03f4f6e429908cf","modified":1701501385991},{"_id":"source/_data/equipment.yml","hash":"af92d7c1d6b164d7bed9bd2dc09d375ac4d860cd","modified":1701500883518},{"_id":"source/about/index.md","hash":"f3a995f0e765f26c1dbd5b23189ee6fd384f2a19","modified":1701501100377},{"_id":"source/_data/essay.yml","hash":"aebfe684f96ffb2ee668edf0851d03a95e4d2c0f","modified":1701676885331},{"_id":"source/_data/link.yml","hash":"6e13e7cb657f802202f165b8da5cdd4178ffa230","modified":1701500743495},{"_id":"source/album/index.md","hash":"0745a57bd03779c2f82b76ad47abfe157ab6fffd","modified":1701501346831},{"_id":"source/essay/index.md","hash":"c907700f13e501ca5599abbc14a6700c68e61631","modified":1701501406324},{"_id":"source/equipment/index.md","hash":"e7cd7a7bbaee99b6a2d6ac0c0ddffc203825a371","modified":1701500868855},{"_id":"source/fcircle/index.md","hash":"2acaf9023dad5d8b3c9b12d58f95309b4aa5a193","modified":1701501258587},{"_id":"source/json/music.json","hash":"c1d46df151b6c4a006b31f9f73e83d80b651e97e","modified":1701501208085},{"_id":"source/link/index.md","hash":"b9ea8fdca6b08086c30c637e7fb571a92729967a","modified":1701500420516},{"_id":"source/music/index.md","hash":"de15ab0901b3d207cbd041fe6a9d358363a3fc36","modified":1701501158821},{"_id":"public/json/music.json","hash":"305c37be063d582110889b657bebcb66c0122252","modified":1701501433227},{"_id":"public/about/index.html","hash":"bb78be2c853ea2f23c90916c1b7ffa72fb0a5dd1","modified":1701757740798},{"_id":"public/equipment/index.html","hash":"ce1ca2e5ce3cfcf528bc737edec68d19ca2cc810","modified":1701757740798},{"_id":"public/album/index.html","hash":"913c0e8147bc56f54abe9f422c71941d377ab69d","modified":1701757740798},{"_id":"public/essay/index.html","hash":"551e7fc03c777c2e6854507968907a1533545ac4","modified":1701757740798},{"_id":"public/fcircle/index.html","hash":"80d3661507efad52ca4db86257ed03158441fe6a","modified":1701757740798},{"_id":"public/music/index.html","hash":"5d664f35346ea87553b63c01973763b9354506bd","modified":1701757740798},{"_id":"public/link/index.html","hash":"94dd4cfcb908e865468130023a529821cbc2803a","modified":1701757740798},{"_id":"public/bangumis/index.html","hash":"f4ba42aa5d09e26ccdb8550468939a4cc451f3bc","modified":1701757763675},{"_id":"public/comments/index.html","hash":"7865a91730538548d8979382f8e1690919f971e2","modified":1701757763675},{"_id":"themes/anzhiyu/source/img/github.png","hash":"eb8993b33467b067e3475e1cf8b630f392921cae","modified":1701678376366},{"_id":"public/img/github.png","hash":"eb8993b33467b067e3475e1cf8b630f392921cae","modified":1701678423970},{"_id":"public/2023/09/01/hexo-anzhiyu学习/index.html","hash":"f37295cae490475492d72f59bdb1184bab6e6be3","modified":1701757763675},{"_id":"public/archives/2023/09/index.html","hash":"a6f6b76c6c7fad13bca9f912e0762b80de97c2b6","modified":1701757763675},{"_id":"source/_posts/docker常用命令合集.md","hash":"ec1a200ad9796033deb5e3eed8529ff022ec6dfd","modified":1701748810884},{"_id":"themes/anzhiyu/source/img/houduan.png","hash":"f8c9f674d4890fc80593a4dcadbbc87b46836a8d","modified":1701679176191},{"_id":"themes/anzhiyu/source/img/qianduan.png","hash":"afc93e1a6ad749a544c649ad229242f7862cb2a4","modified":1701679204542},{"_id":"public/2023/12/04/docker常用命令合集/index.html","hash":"5b7d48d840c27990148b6c887699ad6788eb9b35","modified":1701757763675},{"_id":"public/img/houduan.png","hash":"f8c9f674d4890fc80593a4dcadbbc87b46836a8d","modified":1701679438511},{"_id":"public/img/qianduan.png","hash":"afc93e1a6ad749a544c649ad229242f7862cb2a4","modified":1701679438511},{"_id":"source/images/docker常用命令合集-1701679704149.png","hash":"70a8abc2616c214efc39c91b513a95b29c92ca0d","modified":1701679705923},{"_id":"source/images/docker常用命令合集-1701679683733.png","hash":"5cd94ee49cc70a5e23f8edcee5247c86c76f06f3","modified":1701679688352},{"_id":"source/images/docker常用命令合集-1701679717546.png","hash":"333a5607dab6b731a997f7ae3bb89ac12407c3e9","modified":1701679719287},{"_id":"public/images/docker常用命令合集-1701679704149.png","hash":"70a8abc2616c214efc39c91b513a95b29c92ca0d","modified":1701679734901},{"_id":"public/images/docker常用命令合集-1701679683733.png","hash":"5cd94ee49cc70a5e23f8edcee5247c86c76f06f3","modified":1701679734901},{"_id":"public/images/docker常用命令合集-1701679717546.png","hash":"333a5607dab6b731a997f7ae3bb89ac12407c3e9","modified":1701679734901},{"_id":"source/_posts/CSS之At-rules.md","hash":"88f93b3a59b49b8b289ba11ac750edead382b0f6","modified":1701745650644},{"_id":"source/_posts/回溯——排列、组合、子集.md","hash":"f130b66641aec053afc08cb402fb33b3357ff916","modified":1701745245611},{"_id":"source/_posts/images/CSS之At-rules-1701680236420.png","hash":"d78d693fdfd8b6662128f960344cc5532964ff55","modified":1701680238619},{"_id":"source/_posts/umi-max的简易数据流方案.md","hash":"248e0b6c949bc5254678f94a68ec1105b53eed18","modified":1701745588536},{"_id":"source/_posts/回溯——flood-fill、字符串.md","hash":"4655ea75be9ee4242d0eaf4c421f47ca24a7c9e1","modified":1701745588528},{"_id":"source/_posts/images/umi-max的简易数据流方案-1701680121582.png","hash":"452ed218f4ba044df537a591b0b6d828463cf23e","modified":1701680123203},{"_id":"source/_posts/images/umi-max的简易数据流方案-1701680109557.png","hash":"3dd5d768fee172fefa37f824ab4272554a961986","modified":1701680111146},{"_id":"source/_posts/images/CSS之At-rules-1701680245005.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680246638},{"_id":"source/_posts/images/CSS之At-rules-1701680251744.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680253025},{"_id":"public/2023/12/04/umi-max的简易数据流方案/index.html","hash":"8ffb397cca7a2ad9081ddf5a5821f64c9785ec5a","modified":1701757763675},{"_id":"public/2023/12/04/CSS之At-rules/index.html","hash":"b06a8cfb6d88338183048a6b749974b4c871703f","modified":1701757763675},{"_id":"public/2023/12/04/回溯——flood-fill、字符串/index.html","hash":"b09c5c54aaba21a34b5d830c3f455c52b1fd689a","modified":1701757763675},{"_id":"public/2023/12/04/回溯——排列、组合、子集/index.html","hash":"e0a379b44beb009f43a2edcd2aad79348ae92791","modified":1701757763675},{"_id":"public/categories/前端/index.html","hash":"be35828c724becbdb30d7c9c8c172406ee814bff","modified":1701757763675},{"_id":"public/categories/docker/index.html","hash":"2dddac1be4551b62431e4cc3b8b3987414ff122b","modified":1701757763675},{"_id":"public/tags/css/index.html","hash":"cd0d326024311eb0d8dacd93e019e215a119e72e","modified":1701757763675},{"_id":"public/tags/docker/index.html","hash":"491c86c1da808734f24e8f6b77f4d1ce2c0dfe08","modified":1701757763675},{"_id":"source/images/umi-max的简易数据流方案-1701680109557.png","hash":"3dd5d768fee172fefa37f824ab4272554a961986","modified":1701680111146},{"_id":"source/images/umi-max的简易数据流方案-1701680121582.png","hash":"452ed218f4ba044df537a591b0b6d828463cf23e","modified":1701680123203},{"_id":"source/images/CSS之At-rules-1701680236420.png","hash":"d78d693fdfd8b6662128f960344cc5532964ff55","modified":1701680238619},{"_id":"source/images/CSS之At-rules-1701680245005.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680246638},{"_id":"source/images/CSS之At-rules-1701680251744.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680253025},{"_id":"public/images/CSS之At-rules-1701680236420.png","hash":"d78d693fdfd8b6662128f960344cc5532964ff55","modified":1701680387017},{"_id":"public/images/umi-max的简易数据流方案-1701680121582.png","hash":"452ed218f4ba044df537a591b0b6d828463cf23e","modified":1701680387017},{"_id":"public/images/umi-max的简易数据流方案-1701680109557.png","hash":"3dd5d768fee172fefa37f824ab4272554a961986","modified":1701680387017},{"_id":"public/images/CSS之At-rules-1701680251744.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680387017},{"_id":"public/images/CSS之At-rules-1701680245005.png","hash":"ced04f82d31f865cc8525821c7102a117fd84851","modified":1701680387017},{"_id":"source/images/回溯——排列、组合、子集-1701680799652.png","hash":"09ed4c26237d90aeb124a4902e305da53828f25f","modified":1701680801938},{"_id":"source/images/回溯——排列、组合、子集-1701680779347.png","hash":"cd0414a307e1d13b1ccdacabc047c401ec216672","modified":1701680781112},{"_id":"source/images/回溯——排列、组合、子集-1701680842452.png","hash":"2dbd7116cbc30575e30c5219607dd43f330f16b2","modified":1701680843961},{"_id":"source/images/回溯——排列、组合、子集-1701680751840.png","hash":"eb01e2b639e0f58561b89efb93b8a0fc7b12b837","modified":1701680752661},{"_id":"source/images/回溯——排列、组合、子集-1701680821919.png","hash":"9d7369f93cd078da7ed1ded2cd90bb2a0cbd4e91","modified":1701680823477},{"_id":"source/images/回溯——排列、组合、子集-1701680879514.png","hash":"b6bd490b66ed5cc6f9a91c52e69c6427a13b7a50","modified":1701680881046},{"_id":"source/images/回溯——排列、组合、子集-1701680859373.png","hash":"61db1a14c660f372f7d4e8e449541de32902721d","modified":1701680860970},{"_id":"public/images/回溯——排列、组合、子集-1701680799652.png","hash":"09ed4c26237d90aeb124a4902e305da53828f25f","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680842452.png","hash":"2dbd7116cbc30575e30c5219607dd43f330f16b2","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680779347.png","hash":"cd0414a307e1d13b1ccdacabc047c401ec216672","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680751840.png","hash":"eb01e2b639e0f58561b89efb93b8a0fc7b12b837","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680821919.png","hash":"9d7369f93cd078da7ed1ded2cd90bb2a0cbd4e91","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680879514.png","hash":"b6bd490b66ed5cc6f9a91c52e69c6427a13b7a50","modified":1701680911057},{"_id":"public/images/回溯——排列、组合、子集-1701680859373.png","hash":"61db1a14c660f372f7d4e8e449541de32902721d","modified":1701680911057},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681216686.png","hash":"e311b25b531db8d3f12bc9c9c6d0c77269509818","modified":1701681218590},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681234910.png","hash":"0077768a5af7c1a0fc9ef5fbb90c48079551c283","modified":1701681236044},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681281060.png","hash":"9e256fcfb729c7bb55ce0a4a15c99bfca62f6f58","modified":1701681282309},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681257321.png","hash":"58ff260dd84c1388c486579cefaf64662469a207","modified":1701681258373},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681314905.png","hash":"38bd6ec253e1409934995531d9a5cf0f716b766d","modified":1701681316024},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681296977.png","hash":"a555bc2ba24dae2c7015df8e2307c6cae999e95d","modified":1701681298931},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681338321.png","hash":"75af7e87ac82175fbacbb8ef1e180c421ca407be","modified":1701681339453},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701681356056.png","hash":"2818d2320d361ab202888ef56a06b7b38919bd75","modified":1701681357255},{"_id":"source/_posts/images/回溯——flood-fill、字符串-1701680995740.png","hash":"3762c708567d7f91f89fa36598c005977db6dd6b","modified":1701680997280},{"_id":"source/images/回溯——flood-fill、字符串-1701681216686.png","hash":"e311b25b531db8d3f12bc9c9c6d0c77269509818","modified":1701681218590},{"_id":"source/images/回溯——flood-fill、字符串-1701681234910.png","hash":"0077768a5af7c1a0fc9ef5fbb90c48079551c283","modified":1701681236044},{"_id":"source/images/回溯——flood-fill、字符串-1701681281060.png","hash":"9e256fcfb729c7bb55ce0a4a15c99bfca62f6f58","modified":1701681282309},{"_id":"source/images/回溯——flood-fill、字符串-1701681257321.png","hash":"58ff260dd84c1388c486579cefaf64662469a207","modified":1701681258373},{"_id":"source/images/回溯——flood-fill、字符串-1701681296977.png","hash":"a555bc2ba24dae2c7015df8e2307c6cae999e95d","modified":1701681298931},{"_id":"source/images/回溯——flood-fill、字符串-1701681314905.png","hash":"38bd6ec253e1409934995531d9a5cf0f716b766d","modified":1701681316024},{"_id":"source/images/回溯——flood-fill、字符串-1701681356056.png","hash":"2818d2320d361ab202888ef56a06b7b38919bd75","modified":1701681357255},{"_id":"source/images/回溯——flood-fill、字符串-1701681338321.png","hash":"75af7e87ac82175fbacbb8ef1e180c421ca407be","modified":1701681339453},{"_id":"source/images/回溯——flood-fill、字符串-1701680995740.png","hash":"3762c708567d7f91f89fa36598c005977db6dd6b","modified":1701680997280},{"_id":"public/categories/后端/index.html","hash":"cb08778f7eb447d2db9e49fe9ea32bd1cee63f4e","modified":1701757763675},{"_id":"public/tags/umi/index.html","hash":"618eddb05f1f48768819f7099923be1b32029f57","modified":1701757763675},{"_id":"public/images/回溯——flood-fill、字符串-1701681216686.png","hash":"e311b25b531db8d3f12bc9c9c6d0c77269509818","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681234910.png","hash":"0077768a5af7c1a0fc9ef5fbb90c48079551c283","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681281060.png","hash":"9e256fcfb729c7bb55ce0a4a15c99bfca62f6f58","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681338321.png","hash":"75af7e87ac82175fbacbb8ef1e180c421ca407be","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681257321.png","hash":"58ff260dd84c1388c486579cefaf64662469a207","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681296977.png","hash":"a555bc2ba24dae2c7015df8e2307c6cae999e95d","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681356056.png","hash":"2818d2320d361ab202888ef56a06b7b38919bd75","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701680995740.png","hash":"3762c708567d7f91f89fa36598c005977db6dd6b","modified":1701681947358},{"_id":"public/images/回溯——flood-fill、字符串-1701681314905.png","hash":"38bd6ec253e1409934995531d9a5cf0f716b766d","modified":1701681947358},{"_id":"source/_posts/mysql小记.md","hash":"91cae8bc0e13b1eabbf2a969e50168f4cc3a5e5d","modified":1701745588506},{"_id":"source/_posts/next-js实战.md","hash":"4fb3c05fbeb4e74fec5cc4b8291b3e8ebf936851","modified":1701745588483},{"_id":"source/_posts/redis在springboot项目中的使用.md","hash":"a7e9d83177f577d86077b3af85e1f2c8beb6c1a3","modified":1701745588496},{"_id":"source/images/mysql小记-1701744076874.png","hash":"4a46137f79d0ef33d17985a0f56252c21e0741ec","modified":1701744078076},{"_id":"source/images/mysql小记-1701744087281.png","hash":"17d65a2a92996a3a533a62cff07f421cfc0cdf54","modified":1701744088463},{"_id":"source/images/mysql小记-1701744094831.png","hash":"86be3a1104a50ce91492a3d5483ce1bc8a40b1d9","modified":1701744095875},{"_id":"source/images/mysql小记-1701744101965.png","hash":"b869a6872e598bd53fa165a16852a9827ebe18e8","modified":1701744102881},{"_id":"source/images/next-js实战-1701744267906.png","hash":"a08ea9ad42023ac0767cc6ef859423ec93c9f611","modified":1701744268947},{"_id":"source/images/mysql小记-1701744061305.png","hash":"05cc480e312ce41b354d5176020da391be024ced","modified":1701744062598},{"_id":"source/images/mysql小记-1701744069648.png","hash":"8aaaa1bea9b95a9a35553cdd308681b11b989550","modified":1701744070782},{"_id":"source/images/mysql小记-1701744109641.png","hash":"b5b809ae8e7ebf2c39f76163d19ff431378af5de","modified":1701744110889},{"_id":"source/images/mysql小记-1701744118087.png","hash":"e24f9fe410282bc10326acf7b6a36122ee3d1b2c","modified":1701744119262},{"_id":"source/images/mysql小记-1701744154056.png","hash":"13e996b6eef979d6e7010cced004710e5dfd5b76","modified":1701744155081},{"_id":"source/images/next-js实战-1701744261397.png","hash":"0eb34c91edb569d1643fea93ed7c35fc021fc060","modified":1701744262624},{"_id":"source/images/mysql小记-1701744131762.png","hash":"66c3049bdcd2f4e36aaff10f8e0ac957754334c0","modified":1701744132796},{"_id":"source/images/mysql小记-1701744145264.png","hash":"542b5e68320260ebbf2be64eae2972ecbfd12f47","modified":1701744146238},{"_id":"source/images/mysql小记-1701744125502.png","hash":"3e5c97de6a566ff8cc75692a91482c076016701e","modified":1701744126610},{"_id":"source/images/mysql小记-1701744163753.png","hash":"9cb08d92fdf81e05ca8a3e1fcede52d476ee4079","modified":1701744165817},{"_id":"source/images/mysql小记-1701744138342.png","hash":"529a71e4d43932114cb20dd2956571350062df88","modified":1701744139336},{"_id":"public/2023/12/05/next-js实战/index.html","hash":"182399f43426f5ae4bd23fcadaa66aae4e7c0e3f","modified":1701757763675},{"_id":"public/2023/12/05/redis在springboot项目中的使用/index.html","hash":"2addac63230208d0c11d2b26b21546bc955c70a0","modified":1701757763675},{"_id":"public/2023/12/05/mysql小记/index.html","hash":"ecec0de97a6d3ebe64bb9da9d30d2a59586c3e01","modified":1701757763675},{"_id":"public/tags/mysql-面试-就业/index.html","hash":"66e2df15c8191255669c3f9ac5ea16ac84ae9b86","modified":1701745249595},{"_id":"public/tags/next-js-前端/index.html","hash":"f181cd8aa70d7f05540a9eb1681dc2da59439047","modified":1701744537357},{"_id":"public/tags/springboot-redis/index.html","hash":"ca87d9b245d052ae9557376135a68e4aac9c2278","modified":1701745249595},{"_id":"public/images/mysql小记-1701744076874.png","hash":"4a46137f79d0ef33d17985a0f56252c21e0741ec","modified":1701744381093},{"_id":"public/images/mysql小记-1701744087281.png","hash":"17d65a2a92996a3a533a62cff07f421cfc0cdf54","modified":1701744381093},{"_id":"public/images/mysql小记-1701744094831.png","hash":"86be3a1104a50ce91492a3d5483ce1bc8a40b1d9","modified":1701744381093},{"_id":"public/images/mysql小记-1701744101965.png","hash":"b869a6872e598bd53fa165a16852a9827ebe18e8","modified":1701744381093},{"_id":"public/images/mysql小记-1701744061305.png","hash":"05cc480e312ce41b354d5176020da391be024ced","modified":1701744381093},{"_id":"public/images/mysql小记-1701744069648.png","hash":"8aaaa1bea9b95a9a35553cdd308681b11b989550","modified":1701744381093},{"_id":"public/images/next-js实战-1701744267906.png","hash":"a08ea9ad42023ac0767cc6ef859423ec93c9f611","modified":1701744381093},{"_id":"public/images/mysql小记-1701744109641.png","hash":"b5b809ae8e7ebf2c39f76163d19ff431378af5de","modified":1701744381093},{"_id":"public/images/mysql小记-1701744118087.png","hash":"e24f9fe410282bc10326acf7b6a36122ee3d1b2c","modified":1701744381093},{"_id":"public/images/mysql小记-1701744154056.png","hash":"13e996b6eef979d6e7010cced004710e5dfd5b76","modified":1701744381093},{"_id":"public/images/next-js实战-1701744261397.png","hash":"0eb34c91edb569d1643fea93ed7c35fc021fc060","modified":1701744381093},{"_id":"public/images/mysql小记-1701744131762.png","hash":"66c3049bdcd2f4e36aaff10f8e0ac957754334c0","modified":1701744381093},{"_id":"public/images/mysql小记-1701744125502.png","hash":"3e5c97de6a566ff8cc75692a91482c076016701e","modified":1701744381093},{"_id":"public/images/mysql小记-1701744145264.png","hash":"542b5e68320260ebbf2be64eae2972ecbfd12f47","modified":1701744381093},{"_id":"public/images/mysql小记-1701744163753.png","hash":"9cb08d92fdf81e05ca8a3e1fcede52d476ee4079","modified":1701744381093},{"_id":"public/images/mysql小记-1701744138342.png","hash":"529a71e4d43932114cb20dd2956571350062df88","modified":1701744381093},{"_id":"public/tags/mysql、面试、就业/index.html","hash":"11d441ff08a4ccd91c9ffbcfc18fd47ac37d7b4d","modified":1701744537357},{"_id":"public/tags/next-js-react/index.html","hash":"ed04c2a351faaee00ac6408918843649fd829491","modified":1701745249595},{"_id":"public/tags/就业-回溯-刷题/index.html","hash":"815b4abdc952243f63173102b4755b7ba5a31b9c","modified":1701745103888},{"_id":"public/tags/就业-刷题-回溯/index.html","hash":"1614cfe1b489a9dc56d167712935b94e6564965a","modified":1701745249595},{"_id":"public/tags/docker-云原生/index.html","hash":"2422544841c5cc7d3d06df057ebae6012fd842e5","modified":1701745592196},{"_id":"public/tags/umi-react/index.html","hash":"6b265920f5928f6dab26bb00dd943bcdd2f1b6ef","modified":1701745249595},{"_id":"public/tags/回溯/index.html","hash":"fc312156941ec9f2d55dffc72c14f933ad5344ae","modified":1701757763675},{"_id":"public/tags/刷题/index.html","hash":"029551955257de5dea3b552174a323a26c7cdeab","modified":1701757763675},{"_id":"public/tags/springboot/index.html","hash":"d01e2f6641fffa55789967f655b7d85d82d9e088","modified":1701757763675},{"_id":"public/tags/redis/index.html","hash":"d70424e0851327d143892b4cdc43d895b93fa1d2","modified":1701757763675},{"_id":"public/tags/react/index.html","hash":"7a5693f542c6089ac21f999d055940485d22d8c8","modified":1701757763675},{"_id":"public/tags/mysql/index.html","hash":"17c50a4d51006258e43bcefec50b8415e67fc4d9","modified":1701757763675},{"_id":"public/tags/next-js/index.html","hash":"5228dd7f6ca85ffbd4ec5c905cee56c552c9dcc2","modified":1701757763675},{"_id":"public/tags/面试/index.html","hash":"f5f4544dc8c7c4320edd06fe812b44ce132ee078","modified":1701757763675},{"_id":"public/tags/云原生/index.html","hash":"026a4204e2c4fe7ce467109cf0434e95374af7d4","modified":1701757763675},{"_id":"source/_data/bangumis.json","hash":"4c332b12f53b1e06d66efd659d3ca8ae5ab8c098","modified":1701748824245},{"_id":"themes/anzhiyu/source/img/yunyuansheng.png","hash":"fc2cad5e572a2cbd3bedc591a30f024819b117cb","modified":1701748751839},{"_id":"public/img/yunyuansheng.png","hash":"fc2cad5e572a2cbd3bedc591a30f024819b117cb","modified":1701748831193},{"_id":"source/_posts/http请求内容详解.md","hash":"9e09151c0d5c8f137bf083d674d8915bcff48f2f","modified":1701757755561},{"_id":"source/_posts/spring-cloud-starter-oauth2-securit-jwt微服务实战.md","hash":"8b17b4fa3624d579270ff24d2c6a639c705f9246","modified":1701757392578},{"_id":"source/_posts/react-markdown踩坑实记.md","hash":"3edacd143a1ff1bd2d74254a924ae5d47e0e5cbf","modified":1701757755565},{"_id":"source/_posts/springcloud-gateway初体验.md","hash":"9faac7eb7713a2c221816c7c5263bde730e2c4b6","modified":1701757755537},{"_id":"source/_posts/images/http请求内容详解-1701757614367.png","hash":"3518c330186be1d4fd54f6d354f60b6692b3b920","modified":1701757615109},{"_id":"source/_posts/前端http请求发送详解.md","hash":"89c8be51e61bcdfb54f0391b504062f168296384","modified":1701757319759},{"_id":"source/_posts/名片创作.md","hash":"f757f1eee0d697017f7be80f1688b2143bfa6878","modified":1701757755558},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757449291.png","hash":"4adf4732e85f0a86b041bc637207fbc1b9041b62","modified":1701757450281},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757517086.png","hash":"8d1d29f54a9da5c4ef2c3ca8bdcbf707064b5089","modified":1701757518017},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757523867.png","hash":"3048d1d2a01932f7819c883760ae625203c19d44","modified":1701757524701},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757506021.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757507346},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757512055.png","hash":"b940cdde3bc5f9954e002424a93613143b36220c","modified":1701757513011},{"_id":"source/_posts/images/名片创作-1701757118115.png","hash":"c5525e0cae5aa1b46165a61d6f0798e29a9c7f50","modified":1701757119519},{"_id":"source/_posts/images/名片创作-1701757134734.png","hash":"ac09108ac9dab92d3e6e4d31699cfa105b4314c4","modified":1701757135541},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757469772.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757472127},{"_id":"source/_posts/images/react-markdown踩坑实记-1701757666333.png","hash":"3846d28253ef86f59455a21e4844b400004aed49","modified":1701757667413},{"_id":"source/_posts/images/http请求内容详解-1701757634525.png","hash":"9f1f88013ca00fefb631c7e612c3699cc01df5f0","modified":1701757635314},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757439810.png","hash":"3173d06a1dfd228074f985e02f4afa6edc0333c7","modified":1701757442075},{"_id":"source/_posts/images/名片创作-1701757102187.png","hash":"266d89f26c0bcd9c73f2fd16075a2fa25dfef198","modified":1701757102980},{"_id":"source/_posts/images/名片创作-1701757096669.png","hash":"33101213ca42a5645a2fa2e64ab18bb6379bb248","modified":1701757097680},{"_id":"source/_posts/images/名片创作-1701757127095.png","hash":"ed37496faedf821b9eb6c4bebd96e361a677d068","modified":1701757128041},{"_id":"source/_posts/images/名片创作-1701757110488.png","hash":"685fbf47636e526426b5ab418f52c8d76a6f78cc","modified":1701757111519},{"_id":"source/_posts/images/名片创作-1701757146672.png","hash":"34fb450411306abdf2f590a4c2030a959ae46540","modified":1701757147525},{"_id":"source/_posts/images/名片创作-1701757141855.png","hash":"f7a4aedc1f3f70fab204b061334cfd8d0efdaa9f","modified":1701757142818},{"_id":"source/_posts/images/http请求内容详解-1701757625731.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757629891},{"_id":"source/_posts/images/http请求内容详解-1701757620332.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757621107},{"_id":"source/_posts/images/react-markdown踩坑实记-1701757671966.png","hash":"c46d2646e432609ff6022c86bbea8ca8d272f4be","modified":1701757673023},{"_id":"source/_posts/images/http请求内容详解-1701757597107.png","hash":"30656a521c3c3dc4c136c446386ec74ee8f21e21","modified":1701757601932},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757454579.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757455600},{"_id":"source/_posts/images/springcloud-gateway初体验-1701757498800.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757500001},{"_id":"public/2023/12/05/前端http请求发送详解/index.html","hash":"b176c3fb92c840c533b7921a180cf93ac1ed1bf0","modified":1701757763675},{"_id":"public/2023/12/05/http请求内容详解/index.html","hash":"c6c0cfbb042307d58248f590113fdc04e837e74e","modified":1701757763675},{"_id":"public/2023/12/05/springcloud-gateway初体验/index.html","hash":"0fc1a290a0ab46326447d6352c80be0496dda320","modified":1701757763675},{"_id":"public/2023/12/05/spring-cloud-starter-oauth2-securit-jwt微服务实战/index.html","hash":"02ca19c0720e5d37d8bf6374a88293439c28945a","modified":1701757763675},{"_id":"public/2023/12/05/react-markdown踩坑实记/index.html","hash":"47ac033a19487c63c2c05e39896f6f5036dca5da","modified":1701757763675},{"_id":"public/2023/12/05/名片创作/index.html","hash":"9d2a0653b6696ffe1929cd8ffc7643cbfa8c38dc","modified":1701757763675},{"_id":"public/archives/page/2/index.html","hash":"8d894719697b0d2e159224d13b7efe8fe99f79ac","modified":1701757763675},{"_id":"public/archives/2023/page/2/index.html","hash":"1c9003d36310eda95802d29b5cf604533c132519","modified":1701757763675},{"_id":"public/archives/2023/12/page/2/index.html","hash":"42bd781de6eb800a0e221a9cafb527debc30fbea","modified":1701757763675},{"_id":"public/page/2/index.html","hash":"74d1e55047faed74591197eb9e9697b94936e6f6","modified":1701757763675},{"_id":"public/tags/http/index.html","hash":"1b9d6a4eb2e25d44393fd7c4f5706b359746d586","modified":1701757763675},{"_id":"public/tags/前端/index.html","hash":"b8355f3e62f02c59705147b9e8b0f80b49528734","modified":1701757763675},{"_id":"public/tags/后端/index.html","hash":"b354cf030e821d74d9fe6417e3ff9cfcece7f86b","modified":1701757763675},{"_id":"public/tags/springcloud/index.html","hash":"90490b7708eb4fe2fc3fe453a6a2a0c4a13452ef","modified":1701757763675},{"_id":"public/tags/springsecurity/index.html","hash":"c8ec85b5d06f92856ed2e9b299ef12f4c7842e02","modified":1701757763675},{"_id":"public/tags/gateway/index.html","hash":"d2201eaa24f5d450344cc965353206fe83abc307","modified":1701757763675},{"_id":"source/images/http请求内容详解-1701757614367.png","hash":"3518c330186be1d4fd54f6d354f60b6692b3b920","modified":1701757615109},{"_id":"source/images/springcloud-gateway初体验-1701757449291.png","hash":"4adf4732e85f0a86b041bc637207fbc1b9041b62","modified":1701757450281},{"_id":"source/images/springcloud-gateway初体验-1701757469772.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757472127},{"_id":"source/images/springcloud-gateway初体验-1701757512055.png","hash":"b940cdde3bc5f9954e002424a93613143b36220c","modified":1701757513011},{"_id":"source/images/springcloud-gateway初体验-1701757517086.png","hash":"8d1d29f54a9da5c4ef2c3ca8bdcbf707064b5089","modified":1701757518017},{"_id":"source/images/springcloud-gateway初体验-1701757506021.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757507346},{"_id":"source/images/springcloud-gateway初体验-1701757523867.png","hash":"3048d1d2a01932f7819c883760ae625203c19d44","modified":1701757524701},{"_id":"source/images/名片创作-1701757118115.png","hash":"c5525e0cae5aa1b46165a61d6f0798e29a9c7f50","modified":1701757119519},{"_id":"source/images/名片创作-1701757134734.png","hash":"ac09108ac9dab92d3e6e4d31699cfa105b4314c4","modified":1701757135541},{"_id":"source/images/http请求内容详解-1701757634525.png","hash":"9f1f88013ca00fefb631c7e612c3699cc01df5f0","modified":1701757635314},{"_id":"source/images/springcloud-gateway初体验-1701757439810.png","hash":"3173d06a1dfd228074f985e02f4afa6edc0333c7","modified":1701757442075},{"_id":"source/images/react-markdown踩坑实记-1701757666333.png","hash":"3846d28253ef86f59455a21e4844b400004aed49","modified":1701757667413},{"_id":"source/images/名片创作-1701757102187.png","hash":"266d89f26c0bcd9c73f2fd16075a2fa25dfef198","modified":1701757102980},{"_id":"source/images/名片创作-1701757096669.png","hash":"33101213ca42a5645a2fa2e64ab18bb6379bb248","modified":1701757097680},{"_id":"source/images/名片创作-1701757110488.png","hash":"685fbf47636e526426b5ab418f52c8d76a6f78cc","modified":1701757111519},{"_id":"source/images/名片创作-1701757127095.png","hash":"ed37496faedf821b9eb6c4bebd96e361a677d068","modified":1701757128041},{"_id":"source/images/名片创作-1701757146672.png","hash":"34fb450411306abdf2f590a4c2030a959ae46540","modified":1701757147525},{"_id":"source/images/名片创作-1701757141855.png","hash":"f7a4aedc1f3f70fab204b061334cfd8d0efdaa9f","modified":1701757142818},{"_id":"source/images/http请求内容详解-1701757620332.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757621107},{"_id":"source/images/http请求内容详解-1701757625731.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757629891},{"_id":"source/images/react-markdown踩坑实记-1701757671966.png","hash":"c46d2646e432609ff6022c86bbea8ca8d272f4be","modified":1701757673023},{"_id":"source/images/http请求内容详解-1701757597107.png","hash":"30656a521c3c3dc4c136c446386ec74ee8f21e21","modified":1701757601932},{"_id":"source/images/springcloud-gateway初体验-1701757498800.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757500001},{"_id":"source/images/springcloud-gateway初体验-1701757454579.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757455600},{"_id":"public/images/http请求内容详解-1701757614367.png","hash":"3518c330186be1d4fd54f6d354f60b6692b3b920","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757449291.png","hash":"4adf4732e85f0a86b041bc637207fbc1b9041b62","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757469772.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757506021.png","hash":"e3a40193fd2eee5c283fa6dd7ad3cfaea1885ba1","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757512055.png","hash":"b940cdde3bc5f9954e002424a93613143b36220c","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757523867.png","hash":"3048d1d2a01932f7819c883760ae625203c19d44","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757517086.png","hash":"8d1d29f54a9da5c4ef2c3ca8bdcbf707064b5089","modified":1701757763675},{"_id":"public/images/名片创作-1701757118115.png","hash":"c5525e0cae5aa1b46165a61d6f0798e29a9c7f50","modified":1701757763675},{"_id":"public/images/名片创作-1701757134734.png","hash":"ac09108ac9dab92d3e6e4d31699cfa105b4314c4","modified":1701757763675},{"_id":"public/images/http请求内容详解-1701757634525.png","hash":"9f1f88013ca00fefb631c7e612c3699cc01df5f0","modified":1701757763675},{"_id":"public/images/react-markdown踩坑实记-1701757666333.png","hash":"3846d28253ef86f59455a21e4844b400004aed49","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757439810.png","hash":"3173d06a1dfd228074f985e02f4afa6edc0333c7","modified":1701757763675},{"_id":"public/images/名片创作-1701757102187.png","hash":"266d89f26c0bcd9c73f2fd16075a2fa25dfef198","modified":1701757763675},{"_id":"public/images/名片创作-1701757110488.png","hash":"685fbf47636e526426b5ab418f52c8d76a6f78cc","modified":1701757763675},{"_id":"public/images/名片创作-1701757096669.png","hash":"33101213ca42a5645a2fa2e64ab18bb6379bb248","modified":1701757763675},{"_id":"public/images/名片创作-1701757127095.png","hash":"ed37496faedf821b9eb6c4bebd96e361a677d068","modified":1701757763675},{"_id":"public/images/名片创作-1701757141855.png","hash":"f7a4aedc1f3f70fab204b061334cfd8d0efdaa9f","modified":1701757763675},{"_id":"public/images/http请求内容详解-1701757620332.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757763675},{"_id":"public/images/名片创作-1701757146672.png","hash":"34fb450411306abdf2f590a4c2030a959ae46540","modified":1701757763675},{"_id":"public/images/http请求内容详解-1701757625731.png","hash":"9e4db4a4a50042e9db48ae012b4b17635bd1da65","modified":1701757763675},{"_id":"public/images/react-markdown踩坑实记-1701757671966.png","hash":"c46d2646e432609ff6022c86bbea8ca8d272f4be","modified":1701757763675},{"_id":"public/images/http请求内容详解-1701757597107.png","hash":"30656a521c3c3dc4c136c446386ec74ee8f21e21","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757498800.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757763675},{"_id":"public/images/springcloud-gateway初体验-1701757454579.png","hash":"b3559dd9adb519b23f7691a6c64d8c2570175fa7","modified":1701757763675}],"Category":[{"name":"算法","_id":"clpnozddn0000h0pkcfjc3xbn"},{"name":"前端","_id":"clpqoimiz00010cpkdevrf590"},{"name":"docker","_id":"clpqoimj200070cpkaag2fnhw"},{"name":"后端","_id":"clpqpb73s0003rspkgp0ieqvo"}],"Data":[{"_id":"about","data":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}]},{"_id":"album","data":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}]},{"_id":"equipment","data":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}]},{"_id":"essay","data":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}]},{"_id":"link","data":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]},{"_id":"bangumis","data":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}],"Page":[{"title":"tags","date":"2023-12-01T12:19:10.000Z","type":"tags","comments":0,"top_img":false,"orderby":"random","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-12-01 20:19:10\ntype: \"tags\"\ncomments: false\ntop_img: false\norderby: \"random\"\n---\n","updated":"2023-12-01T12:20:45.764Z","path":"tags/index.html","layout":"page","_id":"clpmnlgr30000qopkasow78gc","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2023-12-01T12:21:05.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-12-01 20:21:05\naside: false\ntop_img: false\ntype: \"categories\"\n---\n","updated":"2023-12-01T12:21:24.033Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clpmnlgr90002qopkcliz29mz","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"about","date":"2023-12-02T07:11:22.000Z","aside":false,"top_img":false,"background":"#f8f9fe","comments":0,"type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-12-02 15:11:22\naside: false\ntop_img: false\nbackground: \"#f8f9fe\"\ncomments: false\ntype: \"about\"\n---\n","updated":"2023-12-02T07:11:40.377Z","path":"about/index.html","layout":"page","_id":"clpnq0t8n0000pspkearxdujc","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"title":"equipment","date":"2023-12-02T07:07:19.000Z","type":"equipment","aside":false,"top_img":false,"_content":"","source":"equipment/index.md","raw":"---\ntitle: equipment\ndate: 2023-12-02 15:07:19\ntype: equipment\naside: false\ntop_img: false\n---\n","updated":"2023-12-02T07:07:48.855Z","path":"equipment/index.html","comments":1,"layout":"page","_id":"clpnq0t8q0001pspk92x26slx","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"title":"相册集","date":"2023-12-02T07:15:01.000Z","aside":false,"top_img":false,"type":"album","_content":"","source":"album/index.md","raw":"---\ntitle: 相册集\ndate: 2023-12-02 15:15:01\naside: false\ntop_img: false\ntype: \"album\"\n---\n","updated":"2023-12-02T07:15:46.831Z","path":"album/index.html","comments":1,"layout":"page","_id":"clpnq0t8r0002pspkbnka9d2n","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"title":"essay","date":"2023-12-02T07:16:32.000Z","comments":1,"aside":false,"top_img":false,"type":"essay","_content":"","source":"essay/index.md","raw":"---\ntitle: essay\ndate: 2023-12-02 15:16:32\ncomments: true\naside: false\ntop_img: false\ntype: essay\n---\n","updated":"2023-12-02T07:16:46.324Z","path":"essay/index.html","layout":"page","_id":"clpnq0t8s0003pspk468q0z9f","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"title":"fcircle","date":"2023-12-02T07:13:45.000Z","comments":0,"aside":false,"top_img":false,"type":"fcircle","_content":"","source":"fcircle/index.md","raw":"---\ntitle: fcircle\ndate: 2023-12-02 15:13:45\ncomments: false\naside: false\ntop_img: false\ntype: \"fcircle\"\n---\n","updated":"2023-12-02T07:14:18.587Z","path":"fcircle/index.html","layout":"page","_id":"clpnq0t8t0004pspkgm0250tv","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"_content":"[\n  {\n    \"name\": \"青花瓷\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n  },\n  {\n    \"name\": \"稻香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n  },\n  {\n    \"name\": \"晴天\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n  },\n  {\n    \"name\": \"七里香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n  },\n  {\n    \"name\": \"花海\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n  },\n  {\n    \"name\": \"反方向的钟\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n  },\n  {\n    \"name\": \"兰亭序\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n  },\n  {\n    \"name\": \"说好的辛福呢\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n  },\n  {\n    \"name\": \"等你下课 (with 杨瑞代)\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n  },\n  {\n    \"name\": \"我落泪情绪零碎\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n  },\n  {\n    \"name\": \"听妈妈的话\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n  },\n  {\n    \"name\": \"明明就\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n  },\n  {\n    \"name\": \"我是如此相信\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n  },\n  {\n    \"name\": \"发如雪\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n  },\n  {\n    \"name\": \"以父之名\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n  },\n  {\n    \"name\": \"园游会\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n  },\n  {\n    \"name\": \"本草纲目\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n  },\n  {\n    \"name\": \"龙卷风\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n  }\n]","source":"json/music.json","raw":"[\n  {\n    \"name\": \"青花瓷\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n  },\n  {\n    \"name\": \"稻香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n  },\n  {\n    \"name\": \"晴天\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n  },\n  {\n    \"name\": \"七里香\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n  },\n  {\n    \"name\": \"花海\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n  },\n  {\n    \"name\": \"反方向的钟\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n  },\n  {\n    \"name\": \"兰亭序\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n  },\n  {\n    \"name\": \"说好的辛福呢\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n  },\n  {\n    \"name\": \"等你下课 (with 杨瑞代)\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n  },\n  {\n    \"name\": \"我落泪情绪零碎\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n  },\n  {\n    \"name\": \"听妈妈的话\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n  },\n  {\n    \"name\": \"明明就\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n  },\n  {\n    \"name\": \"我是如此相信\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n  },\n  {\n    \"name\": \"发如雪\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n  },\n  {\n    \"name\": \"以父之名\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n  },\n  {\n    \"name\": \"园游会\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n  },\n  {\n    \"name\": \"本草纲目\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n  },\n  {\n    \"name\": \"龙卷风\",\n    \"artist\": \"周杰伦\",\n    \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n    \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n    \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n  }\n]","date":"2023-12-02T07:13:28.085Z","updated":"2023-12-02T07:13:28.085Z","path":"json/music.json","layout":"false","title":"","comments":1,"_id":"clpnq0t8w0005pspkfwz0h2qg","content":"[{\"name\":\"青花瓷\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"},{\"name\":\"稻香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"},{\"name\":\"晴天\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"},{\"name\":\"七里香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"},{\"name\":\"花海\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"},{\"name\":\"反方向的钟\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"},{\"name\":\"兰亭序\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"},{\"name\":\"说好的辛福呢\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"},{\"name\":\"等你下课 (with 杨瑞代)\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"},{\"name\":\"我落泪情绪零碎\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"},{\"name\":\"听妈妈的话\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"},{\"name\":\"明明就\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"},{\"name\":\"我是如此相信\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"},{\"name\":\"发如雪\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"},{\"name\":\"以父之名\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"},{\"name\":\"园游会\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"},{\"name\":\"本草纲目\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"},{\"name\":\"龙卷风\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"}]","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":"[{\"name\":\"青花瓷\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"},{\"name\":\"稻香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"},{\"name\":\"晴天\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"},{\"name\":\"七里香\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"},{\"name\":\"花海\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"},{\"name\":\"反方向的钟\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"},{\"name\":\"兰亭序\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"},{\"name\":\"说好的辛福呢\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"},{\"name\":\"等你下课 (with 杨瑞代)\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"},{\"name\":\"我落泪情绪零碎\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"},{\"name\":\"听妈妈的话\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"},{\"name\":\"明明就\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"},{\"name\":\"我是如此相信\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"},{\"name\":\"发如雪\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"},{\"name\":\"以父之名\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"},{\"name\":\"园游会\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"},{\"name\":\"本草纲目\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"},{\"name\":\"龙卷风\",\"artist\":\"周杰伦\",\"url\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\"cover\":\"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\"lrc\":\"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"}]"},{"title":"music","date":"2023-12-02T07:12:18.000Z","type":"music","aplayer":true,"top_img":false,"comments":0,"aside":false,"_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2023-12-02 15:12:18\ntype: music\naplayer: true\ntop_img: false\ncomments: false\naside: false\n---\n","updated":"2023-12-02T07:12:38.821Z","path":"music/index.html","layout":"page","_id":"clpnq0t8x0006pspkbulzglk7","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2023-12-02T06:58:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-12-02 14:58:49\ntype: \"link\"\n---\n","updated":"2023-12-02T07:00:20.516Z","path":"link/index.html","comments":1,"layout":"page","_id":"clpnq0t8x0007pspkfc5w7ccb","content":"","site":{"data":{"about":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"陈志伟","description":"是一名 前端工程师、学生、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，长沙市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"咸鱼的日常生活。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"hexo-anzhiyu学习","date":"2023-09-01T12:12:32.000Z","keywords":"hexo-anzhiyu学习","description":"hexo-anzhiyu学习","top_img":"/img/houduan.png","comments":1,"cover":"/img/houduan.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_url":null,"copyright_info":"可转载哦","mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"swiper_index":1,"top_group_index":1,"background":"#fff","_content":"\n\n## \n\nPost Front-matter\n\n\n| _**写法**_            | _**解释**_                                                                                  |\n| --------------------- | ------------------------------------------------------------------------------------------- |\n| title                 | 【必需】文章标题                                                                            |\n| date                  | 【必需】文章创建日期                                                                        |\n| updated               | 【可选】文章更新日期                                                                        |\n| tags                  | 【可选】文章标签                                                                            |\n| categories            | 【可选】文章分类                                                                            |\n| keywords              | 【可选】文章关键字                                                                          |\n| description           | 【可选】文章描述                                                                            |\n| top_img               | 【可选】文章顶部图片                                                                        |\n| cover                 | 【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false/图片地址/留空) |\n| comments              | 【可选】显示文章评论模块(默认 true)                                                         |\n| toc                   | 【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)                                       |\n| toc_number            | 【可选】显示 toc_number(默认为设置中 toc 的 number 配置)                                    |\n| toc_style_simple      | 【可选】显示 toc 简洁模式                                                                   |\n| copyright             | 【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)                        |\n| copyright_author      | 【可选】文章版权模块的`文章作者`                                                            |\n| copyright_author_href | 【可选】文章版权模块的`文章作者`链接                                                        |\n| copyright_url         | 【可选】文章版权模块的`文章链接`链接                                                        |\n| copyright_info        | 【可选】文章版权模块的版权声明文字                                                          |\n| mathjax               | 【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)          |\n| katex                 | 【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)              |\n| aplayer               | 【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的`音乐` 配置                   |\n| highlight_shrink      | 【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)                |\n| aside                 | 【可选】显示侧边栏 (默认 true)                                                              |\n| swiper_index          | 【可选】首页轮播图配置 index 索引，数字越小越靠前                                           |\n| top_group_index       | 【可选】首页右侧卡片组配置, 数字越小越靠前                                                  |\n| ai                    | 【可选】文章ai摘要                                                                          |\n| main_color            | 【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff               |\n\n1. 首页轮播图配置: `swiper_index`, 数字越小越靠前\n2. 首页卡片配置: `top_group_index`, 数字越小越靠前\n3. page 中`top_single_background`, 可配置部分页面的顶部背景图片\n","source":"_posts/hexo-anzhiyu学习.md","raw":"---\ntitle: hexo-anzhiyu学习\ndate: 2023-9-01 20:12:32\ntags: 就业\ncategories: 后端\nkeywords: hexo-anzhiyu学习\ndescription: hexo-anzhiyu学习\ntop_img: /img/houduan.png\ncomments: true\ncover: /img/houduan.png\ntoc: \ntoc_number:\ntoc_style_simple:\ncopyright: \ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_url:\ncopyright_info: 可转载哦\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nswiper_index: 1\ntop_group_index: 1\nbackground: \"#fff\"\n---\n\n\n## \n\nPost Front-matter\n\n\n| _**写法**_            | _**解释**_                                                                                  |\n| --------------------- | ------------------------------------------------------------------------------------------- |\n| title                 | 【必需】文章标题                                                                            |\n| date                  | 【必需】文章创建日期                                                                        |\n| updated               | 【可选】文章更新日期                                                                        |\n| tags                  | 【可选】文章标签                                                                            |\n| categories            | 【可选】文章分类                                                                            |\n| keywords              | 【可选】文章关键字                                                                          |\n| description           | 【可选】文章描述                                                                            |\n| top_img               | 【可选】文章顶部图片                                                                        |\n| cover                 | 【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false/图片地址/留空) |\n| comments              | 【可选】显示文章评论模块(默认 true)                                                         |\n| toc                   | 【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)                                       |\n| toc_number            | 【可选】显示 toc_number(默认为设置中 toc 的 number 配置)                                    |\n| toc_style_simple      | 【可选】显示 toc 简洁模式                                                                   |\n| copyright             | 【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)                        |\n| copyright_author      | 【可选】文章版权模块的`文章作者`                                                            |\n| copyright_author_href | 【可选】文章版权模块的`文章作者`链接                                                        |\n| copyright_url         | 【可选】文章版权模块的`文章链接`链接                                                        |\n| copyright_info        | 【可选】文章版权模块的版权声明文字                                                          |\n| mathjax               | 【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)          |\n| katex                 | 【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)              |\n| aplayer               | 【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的`音乐` 配置                   |\n| highlight_shrink      | 【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)                |\n| aside                 | 【可选】显示侧边栏 (默认 true)                                                              |\n| swiper_index          | 【可选】首页轮播图配置 index 索引，数字越小越靠前                                           |\n| top_group_index       | 【可选】首页右侧卡片组配置, 数字越小越靠前                                                  |\n| ai                    | 【可选】文章ai摘要                                                                          |\n| main_color            | 【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff               |\n\n1. 首页轮播图配置: `swiper_index`, 数字越小越靠前\n2. 首页卡片配置: `top_group_index`, 数字越小越靠前\n3. page 中`top_single_background`, 可配置部分页面的顶部背景图片\n","slug":"hexo-anzhiyu学习","published":1,"updated":"2023-12-05T03:15:55.324Z","_id":"clpmnlgrn0003qopkeql89g8f","layout":"post","photos":[],"link":"","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>Post Front-matter</p>\n<table>\n<thead>\n<tr>\n<th><em><strong>写法</strong></em></th>\n<th><em><strong>解释</strong></em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】文章标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】文章创建日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】文章更新日期</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>【可选】文章标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>【可选】文章分类</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】文章关键字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】文章描述</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false&#x2F;图片地址&#x2F;留空)</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示文章评论模块(默认 true)</td>\n</tr>\n<tr>\n<td>toc</td>\n<td>【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</td>\n</tr>\n<tr>\n<td>toc_number</td>\n<td>【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</td>\n</tr>\n<tr>\n<td>toc_style_simple</td>\n<td>【可选】显示 toc 简洁模式</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td>\n</tr>\n<tr>\n<td>copyright_author</td>\n<td>【可选】文章版权模块的<code>文章作者</code></td>\n</tr>\n<tr>\n<td>copyright_author_href</td>\n<td>【可选】文章版权模块的<code>文章作者</code>链接</td>\n</tr>\n<tr>\n<td>copyright_url</td>\n<td>【可选】文章版权模块的<code>文章链接</code>链接</td>\n</tr>\n<tr>\n<td>copyright_info</td>\n<td>【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code> 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>【可选】显示侧边栏 (默认 true)</td>\n</tr>\n<tr>\n<td>swiper_index</td>\n<td>【可选】首页轮播图配置 index 索引，数字越小越靠前</td>\n</tr>\n<tr>\n<td>top_group_index</td>\n<td>【可选】首页右侧卡片组配置, 数字越小越靠前</td>\n</tr>\n<tr>\n<td>ai</td>\n<td>【可选】文章ai摘要</td>\n</tr>\n<tr>\n<td>main_color</td>\n<td>【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff</td>\n</tr>\n</tbody></table>\n<ol>\n<li>首页轮播图配置: <code>swiper_index</code>, 数字越小越靠前</li>\n<li>首页卡片配置: <code>top_group_index</code>, 数字越小越靠前</li>\n<li>page 中<code>top_single_background</code>, 可配置部分页面的顶部背景图片</li>\n</ol>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>Post Front-matter</p>\n<table>\n<thead>\n<tr>\n<th><em><strong>写法</strong></em></th>\n<th><em><strong>解释</strong></em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】文章标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】文章创建日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】文章更新日期</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>【可选】文章标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>【可选】文章分类</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】文章关键字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】文章描述</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false&#x2F;图片地址&#x2F;留空)</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示文章评论模块(默认 true)</td>\n</tr>\n<tr>\n<td>toc</td>\n<td>【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</td>\n</tr>\n<tr>\n<td>toc_number</td>\n<td>【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</td>\n</tr>\n<tr>\n<td>toc_style_simple</td>\n<td>【可选】显示 toc 简洁模式</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td>\n</tr>\n<tr>\n<td>copyright_author</td>\n<td>【可选】文章版权模块的<code>文章作者</code></td>\n</tr>\n<tr>\n<td>copyright_author_href</td>\n<td>【可选】文章版权模块的<code>文章作者</code>链接</td>\n</tr>\n<tr>\n<td>copyright_url</td>\n<td>【可选】文章版权模块的<code>文章链接</code>链接</td>\n</tr>\n<tr>\n<td>copyright_info</td>\n<td>【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code> 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>【可选】显示侧边栏 (默认 true)</td>\n</tr>\n<tr>\n<td>swiper_index</td>\n<td>【可选】首页轮播图配置 index 索引，数字越小越靠前</td>\n</tr>\n<tr>\n<td>top_group_index</td>\n<td>【可选】首页右侧卡片组配置, 数字越小越靠前</td>\n</tr>\n<tr>\n<td>ai</td>\n<td>【可选】文章ai摘要</td>\n</tr>\n<tr>\n<td>main_color</td>\n<td>【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff</td>\n</tr>\n</tbody></table>\n<ol>\n<li>首页轮播图配置: <code>swiper_index</code>, 数字越小越靠前</li>\n<li>首页卡片配置: <code>top_group_index</code>, 数字越小越靠前</li>\n<li>page 中<code>top_single_background</code>, 可配置部分页面的顶部背景图片</li>\n</ol>\n"},{"title":"docker常用命令合集","keywords":"docker, 命令, 云原生","description":"docker命令二览","top_img":"/img/yunyuansheng.png","comments":1,"cover":"/img/yunyuansheng.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"本篇转载自我的掘金。","date":"2023-12-04T08:37:24.000Z","_content":"\n## 镜像相关\n- 查看镜像列表\n```bash\ndocker images\n```\n- 镜像搜索`显示包含name字段的所有官方镜像和star数，可以选择需要的进行下载`\n\n```bash\ndocker search xnamex\n```\n\n![1](../images/docker常用命令合集-1701679683733.png)\n- 下拉镜像\n```\ndocker pull xnamex\ndocker pull xnamex:tag\n```\n- 删除镜像\n```\ndocker rmi -f xnamex/xidx\n```\n- 保存镜像（压缩为tar文件，可以随意取出）\n```\ndocker save xname/xidx -o 保存位置\n```\n- 加载镜像（配合前面的保存镜像）\n```\ndocker load -i 镜像tar包保存位置\n```\n### 容器相关\n\n- 查看容器列表\n```\ndocker ps\n```\n- 创建容器\n\n```\ndocker run -it -d --name 运行的容器的别名 -p 宿主机端口：容器端口 -v 宿主机文件存储位置：容器内文件位置 镜像名：tag /bin/bash\n```\n`参数含义`:\n1. -it 表示可以与该运行的容器进行交互，如进入mysql\n2. -d 表示可以后台运行容器 （守护式运行）\n3. /bin/bash 交互路径\n4. -p 将容器的端口映射到宿主机上面，可以通过宿主机访问内部端口\n5. -v 将容器内的指定文件夹挂载到宿主机对应位置（防止容器关闭后数据丢失）\n\n- 停止容器\n\n```\ndocker stop xname/xidx\n```\n- 删除容器\n```\n# 删除一个容器\ndocker rm -f xnamex/xidx\n# 删除多个容器 空格隔开要删除的容器名或者容器id\ndocker rm -f xnamex/xidx xnamex/xidx xnamex/xidx\n# 删除全部容器\ndocker rm -f $(docker ps -aq)\n```\n- 进入容器(只能进入正在运行的容器)\n\n```\ndocker attach xnamex/xidx\n```\n### 数据卷相关\n- 创建数据卷\n```\ndocker volume create xnamex\n```\n- 查看所有数据卷\n\n```\ndocker volume ls\n```\n- 查看数据卷的所有信息（包含关联的宿主机目录位置）\n```\ndocker volume inspect xnamex\n```\n\n![2](../images/docker常用命令合集-1701679704149.png)\n\n- 删除数据卷\n\n``` \ndocker volume rm xnamex\n```\n- 删除所有未使用过的数据卷\n\n```\ndocker volume prune\n```\n\n### docker安装相关（linux）\n1. 如果之前安装了旧版docker，请先删除。\n```bash\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n2. 安装仓库\n```\nsudo yum install -y yum-utils\n\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n3. 安装docker engine\n\n```\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n4. 配置国内镜像仓库地址：\n\n新建`/etc/docker/daemon.json`文件，输入如下内容：\n```\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\",\n    \"http://hub-mirror.c.163.com\",\n    \"https://fsp2sfpr.mirror.aliyuncs.com/\"\n  ]\n}\n```\n\n5. 然后重启，配置开机启动\n\n```\nsudo systemctl restart docker\nsudo systemctl enable docker\nsudo systemctl enable containerd\n```\n\n### 网络相关\ndocker会自动创建三个网络，`bridge`,`host`,`none`\n\n\n![3](../images/docker常用命令合集-1701679717546.png)\n\n\n-   bridge桥接网络\n\n如果不指定，新创建的容器默认将连接到bridge网络。\n\n默认情况下，使用bridge网络，宿主机可以ping通容器ip，容器中也能ping通宿主机。\n\n容器之间只能通过 IP 地址相互访问，由于容器的ip会随着启动顺序发生变化，因此不推荐使用ip访问。\n\n-   host\n\n`慎用，可能会有安全问题。`\n\n容器与宿主机共享网络，不需要映射端口即可通过宿主机IP访问。（-p选项会被忽略）\n\n主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换 （NAT），并且不会为每个端口创建“用户空间代理”。\n\n-   none\n\n禁用容器中所用网络，在启动容器时使用。\n","source":"_posts/docker常用命令合集.md","raw":"---\ntitle: docker常用命令合集\ntags: \n  - docker\n  - 云原生\ncategories: docker\nkeywords: docker, 命令, 云原生\ndescription: docker命令二览\ntop_img: /img/yunyuansheng.png\ncomments: true\ncover: /img/yunyuansheng.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 本篇转载自我的掘金。\ndate: 2023-12-04 16:37:24\n---\n\n## 镜像相关\n- 查看镜像列表\n```bash\ndocker images\n```\n- 镜像搜索`显示包含name字段的所有官方镜像和star数，可以选择需要的进行下载`\n\n```bash\ndocker search xnamex\n```\n\n![1](../images/docker常用命令合集-1701679683733.png)\n- 下拉镜像\n```\ndocker pull xnamex\ndocker pull xnamex:tag\n```\n- 删除镜像\n```\ndocker rmi -f xnamex/xidx\n```\n- 保存镜像（压缩为tar文件，可以随意取出）\n```\ndocker save xname/xidx -o 保存位置\n```\n- 加载镜像（配合前面的保存镜像）\n```\ndocker load -i 镜像tar包保存位置\n```\n### 容器相关\n\n- 查看容器列表\n```\ndocker ps\n```\n- 创建容器\n\n```\ndocker run -it -d --name 运行的容器的别名 -p 宿主机端口：容器端口 -v 宿主机文件存储位置：容器内文件位置 镜像名：tag /bin/bash\n```\n`参数含义`:\n1. -it 表示可以与该运行的容器进行交互，如进入mysql\n2. -d 表示可以后台运行容器 （守护式运行）\n3. /bin/bash 交互路径\n4. -p 将容器的端口映射到宿主机上面，可以通过宿主机访问内部端口\n5. -v 将容器内的指定文件夹挂载到宿主机对应位置（防止容器关闭后数据丢失）\n\n- 停止容器\n\n```\ndocker stop xname/xidx\n```\n- 删除容器\n```\n# 删除一个容器\ndocker rm -f xnamex/xidx\n# 删除多个容器 空格隔开要删除的容器名或者容器id\ndocker rm -f xnamex/xidx xnamex/xidx xnamex/xidx\n# 删除全部容器\ndocker rm -f $(docker ps -aq)\n```\n- 进入容器(只能进入正在运行的容器)\n\n```\ndocker attach xnamex/xidx\n```\n### 数据卷相关\n- 创建数据卷\n```\ndocker volume create xnamex\n```\n- 查看所有数据卷\n\n```\ndocker volume ls\n```\n- 查看数据卷的所有信息（包含关联的宿主机目录位置）\n```\ndocker volume inspect xnamex\n```\n\n![2](../images/docker常用命令合集-1701679704149.png)\n\n- 删除数据卷\n\n``` \ndocker volume rm xnamex\n```\n- 删除所有未使用过的数据卷\n\n```\ndocker volume prune\n```\n\n### docker安装相关（linux）\n1. 如果之前安装了旧版docker，请先删除。\n```bash\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n2. 安装仓库\n```\nsudo yum install -y yum-utils\n\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n3. 安装docker engine\n\n```\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n4. 配置国内镜像仓库地址：\n\n新建`/etc/docker/daemon.json`文件，输入如下内容：\n```\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\",\n    \"http://hub-mirror.c.163.com\",\n    \"https://fsp2sfpr.mirror.aliyuncs.com/\"\n  ]\n}\n```\n\n5. 然后重启，配置开机启动\n\n```\nsudo systemctl restart docker\nsudo systemctl enable docker\nsudo systemctl enable containerd\n```\n\n### 网络相关\ndocker会自动创建三个网络，`bridge`,`host`,`none`\n\n\n![3](../images/docker常用命令合集-1701679717546.png)\n\n\n-   bridge桥接网络\n\n如果不指定，新创建的容器默认将连接到bridge网络。\n\n默认情况下，使用bridge网络，宿主机可以ping通容器ip，容器中也能ping通宿主机。\n\n容器之间只能通过 IP 地址相互访问，由于容器的ip会随着启动顺序发生变化，因此不推荐使用ip访问。\n\n-   host\n\n`慎用，可能会有安全问题。`\n\n容器与宿主机共享网络，不需要映射端口即可通过宿主机IP访问。（-p选项会被忽略）\n\n主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换 （NAT），并且不会为每个端口创建“用户空间代理”。\n\n-   none\n\n禁用容器中所用网络，在启动容器时使用。\n","slug":"docker常用命令合集","published":1,"updated":"2023-12-05T04:00:10.884Z","_id":"clpqo03j200001wpkalr4e34i","layout":"post","photos":[],"link":"","content":"<h2 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h2><ul>\n<li>查看镜像列表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></li>\n<li>镜像搜索<code>显示包含name字段的所有官方镜像和star数，可以选择需要的进行下载</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search xnamex</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679683733.png\" alt=\"1\"></p>\n<ul>\n<li>下拉镜像<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xnamex</span><br><span class=\"line\">docker pull xnamex:tag</span><br></pre></td></tr></table></figure></li>\n<li>删除镜像<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f xnamex/xidx</span><br></pre></td></tr></table></figure></li>\n<li>保存镜像（压缩为tar文件，可以随意取出）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save xname/xidx -o 保存位置</span><br></pre></td></tr></table></figure></li>\n<li>加载镜像（配合前面的保存镜像）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i 镜像tar包保存位置</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h3><ul>\n<li>查看容器列表<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></li>\n<li>创建容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --name 运行的容器的别名 -p 宿主机端口：容器端口 -v 宿主机文件存储位置：容器内文件位置 镜像名：tag /bin/bash</span><br></pre></td></tr></table></figure>\n<p><code>参数含义</code>:</p>\n<ol>\n<li>-it 表示可以与该运行的容器进行交互，如进入mysql</li>\n<li>-d 表示可以后台运行容器 （守护式运行）</li>\n<li>&#x2F;bin&#x2F;bash 交互路径</li>\n<li>-p 将容器的端口映射到宿主机上面，可以通过宿主机访问内部端口</li>\n<li>-v 将容器内的指定文件夹挂载到宿主机对应位置（防止容器关闭后数据丢失）</li>\n</ol>\n<ul>\n<li>停止容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop xname/xidx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除容器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除一个容器</span><br><span class=\"line\">docker rm -f xnamex/xidx</span><br><span class=\"line\"># 删除多个容器 空格隔开要删除的容器名或者容器id</span><br><span class=\"line\">docker rm -f xnamex/xidx xnamex/xidx xnamex/xidx</span><br><span class=\"line\"># 删除全部容器</span><br><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure></li>\n<li>进入容器(只能进入正在运行的容器)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach xnamex/xidx</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据卷相关\"><a href=\"#数据卷相关\" class=\"headerlink\" title=\"数据卷相关\"></a>数据卷相关</h3><ul>\n<li>创建数据卷<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create xnamex</span><br></pre></td></tr></table></figure></li>\n<li>查看所有数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看数据卷的所有信息（包含关联的宿主机目录位置）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect xnamex</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679704149.png\" alt=\"2\"></p>\n<ul>\n<li>删除数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume rm xnamex</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除所有未使用过的数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker安装相关（linux）\"><a href=\"#docker安装相关（linux）\" class=\"headerlink\" title=\"docker安装相关（linux）\"></a>docker安装相关（linux）</h3><ol>\n<li><p>如果之前安装了旧版docker，请先删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装docker engine</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置国内镜像仓库地址：</li>\n</ol>\n<p>新建<code>/etc/docker/daemon.json</code>文件，输入如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class=\"line\">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">    &quot;https://fsp2sfpr.mirror.aliyuncs.com/&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>然后重启，配置开机启动</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\">sudo systemctl enable containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><p>docker会自动创建三个网络，<code>bridge</code>,<code>host</code>,<code>none</code></p>\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679717546.png\" alt=\"3\"></p>\n<ul>\n<li>bridge桥接网络</li>\n</ul>\n<p>如果不指定，新创建的容器默认将连接到bridge网络。</p>\n<p>默认情况下，使用bridge网络，宿主机可以ping通容器ip，容器中也能ping通宿主机。</p>\n<p>容器之间只能通过 IP 地址相互访问，由于容器的ip会随着启动顺序发生变化，因此不推荐使用ip访问。</p>\n<ul>\n<li>host</li>\n</ul>\n<p><code>慎用，可能会有安全问题。</code></p>\n<p>容器与宿主机共享网络，不需要映射端口即可通过宿主机IP访问。（-p选项会被忽略）</p>\n<p>主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换 （NAT），并且不会为每个端口创建“用户空间代理”。</p>\n<ul>\n<li>none</li>\n</ul>\n<p>禁用容器中所用网络，在启动容器时使用。</p>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h2><ul>\n<li>查看镜像列表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></li>\n<li>镜像搜索<code>显示包含name字段的所有官方镜像和star数，可以选择需要的进行下载</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search xnamex</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679683733.png\" alt=\"1\"></p>\n<ul>\n<li>下拉镜像<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xnamex</span><br><span class=\"line\">docker pull xnamex:tag</span><br></pre></td></tr></table></figure></li>\n<li>删除镜像<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f xnamex/xidx</span><br></pre></td></tr></table></figure></li>\n<li>保存镜像（压缩为tar文件，可以随意取出）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save xname/xidx -o 保存位置</span><br></pre></td></tr></table></figure></li>\n<li>加载镜像（配合前面的保存镜像）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i 镜像tar包保存位置</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h3><ul>\n<li>查看容器列表<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></li>\n<li>创建容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --name 运行的容器的别名 -p 宿主机端口：容器端口 -v 宿主机文件存储位置：容器内文件位置 镜像名：tag /bin/bash</span><br></pre></td></tr></table></figure>\n<p><code>参数含义</code>:</p>\n<ol>\n<li>-it 表示可以与该运行的容器进行交互，如进入mysql</li>\n<li>-d 表示可以后台运行容器 （守护式运行）</li>\n<li>&#x2F;bin&#x2F;bash 交互路径</li>\n<li>-p 将容器的端口映射到宿主机上面，可以通过宿主机访问内部端口</li>\n<li>-v 将容器内的指定文件夹挂载到宿主机对应位置（防止容器关闭后数据丢失）</li>\n</ol>\n<ul>\n<li>停止容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop xname/xidx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除容器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除一个容器</span><br><span class=\"line\">docker rm -f xnamex/xidx</span><br><span class=\"line\"># 删除多个容器 空格隔开要删除的容器名或者容器id</span><br><span class=\"line\">docker rm -f xnamex/xidx xnamex/xidx xnamex/xidx</span><br><span class=\"line\"># 删除全部容器</span><br><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure></li>\n<li>进入容器(只能进入正在运行的容器)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach xnamex/xidx</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据卷相关\"><a href=\"#数据卷相关\" class=\"headerlink\" title=\"数据卷相关\"></a>数据卷相关</h3><ul>\n<li>创建数据卷<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create xnamex</span><br></pre></td></tr></table></figure></li>\n<li>查看所有数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看数据卷的所有信息（包含关联的宿主机目录位置）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect xnamex</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679704149.png\" alt=\"2\"></p>\n<ul>\n<li>删除数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume rm xnamex</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除所有未使用过的数据卷</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker安装相关（linux）\"><a href=\"#docker安装相关（linux）\" class=\"headerlink\" title=\"docker安装相关（linux）\"></a>docker安装相关（linux）</h3><ol>\n<li><p>如果之前安装了旧版docker，请先删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装docker engine</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置国内镜像仓库地址：</li>\n</ol>\n<p>新建<code>/etc/docker/daemon.json</code>文件，输入如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class=\"line\">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">    &quot;https://fsp2sfpr.mirror.aliyuncs.com/&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>然后重启，配置开机启动</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\">sudo systemctl enable containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><p>docker会自动创建三个网络，<code>bridge</code>,<code>host</code>,<code>none</code></p>\n<p><img src=\"/../images/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86-1701679717546.png\" alt=\"3\"></p>\n<ul>\n<li>bridge桥接网络</li>\n</ul>\n<p>如果不指定，新创建的容器默认将连接到bridge网络。</p>\n<p>默认情况下，使用bridge网络，宿主机可以ping通容器ip，容器中也能ping通宿主机。</p>\n<p>容器之间只能通过 IP 地址相互访问，由于容器的ip会随着启动顺序发生变化，因此不推荐使用ip访问。</p>\n<ul>\n<li>host</li>\n</ul>\n<p><code>慎用，可能会有安全问题。</code></p>\n<p>容器与宿主机共享网络，不需要映射端口即可通过宿主机IP访问。（-p选项会被忽略）</p>\n<p>主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换 （NAT），并且不会为每个端口创建“用户空间代理”。</p>\n<ul>\n<li>none</li>\n</ul>\n<p>禁用容器中所用网络，在启动容器时使用。</p>\n"},{"title":"CSS之At-rules","keywords":"css, at-rules","description":"css中at-rules的使用","top_img":"/img/qianduan.png","comments":1,"cover":"/img/qianduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"本篇转载自我的掘金。","date":"2023-12-04T08:52:42.000Z","_content":"\n\n> `At-rules`规则是目前CSS中一种常见的语法规则，它使用一个`\"@\"`符号加一个关键词定义，后面跟上语法区块，如果没有则以分号结束即可。  \n这种规则一般用于标识文档、引入外部样式、条件判断等等，本文是对该规则的使用总结。`\n\n### @keyframes\n> 使用 `@keyframes` 可以创建动画。在动画过程中，您可以更改CSS样式的设定多次。指定的变化时发生时使用％，或关键字“from”和“to”，等价于0％到100％  0％是开头动画，100％是当动画完成。\n\n##### 示例\n```\n @keyframes mycolor {\n    0% { background-color: red; }\n    30% { background-color: darkblue; }\n    50% { background-color: yellow; }\n    70% { background-color: darkblue; }\n    100% { background-color: red; }\n  }\n```\n\n##### css样式名称\n- `animation-name`:动画的名称 用于指定一个@keyframes动画，指定要使用哪一个关键帧\n- `animation-name`:动画持续时间 用于定义动画完成一个周期要多少秒或者多少毫秒\n- animation-timing-function:动画的运动方式 指定动画将如何完成一个周期,有如下参数，通常不指定  默认ease\n```\n  ease;默认\n  ease-in;  \n  ease-out;\n  ease-in-out;\n  linear;\n  steps(数值, 定位) 定位：start/end 默认end指逐步运动\n```\n- animation-delay:动画在组件渲染后多久开始\n- animation-iteration-count:动画循环播放的次数，默认值为1，一般会设定为infinite（一直循环）\n- animation-fill-mode：动画在播放完成后的状态，有两个值可以选择\n```\n  forwards 保持动画结束后的状态(通常选择这个，防止抖动)\n  backwards 动画结束后回到最初的状态\n```\n- animation-direction:动画执行顺序----动画是否应该播放完后逆向交替循环（对设置了多次播放的动画有效），有三个值可供选择：\n\n```\n normal 默认值（即执行完后回到起点再次执行）\n reverse 反向（即直接从终点反向执行到起点再反复）\n alternate 先从起点到终点，再从终点到起点\n```\n\n**以上所有css样式可以简写为:**\n`animation: 动画执行时间 延迟时间 执行关键帧名称 运动方式 运动次数 结束状态 动画执行顺序`;\n**更简形式为:**\n``animation: 动画执行时间 执行关键帧名称;``\n\n##### 简单应用\n```\ndiv { \n\twidth: 200px;\n\theight: 200px;\n\tbackground: red;\n}\n@keyframes mycolor {\n\t0% { background-color: red; }\n\t30% { background-color: yellow; }\n\t60% { background-color: green; }\n\t100% { background-color: red; }\n}\ndiv:hover {\n\tanimation-name: mycolor;\n\tanimation-duration: 5s;\n\tanimation-timing-function: linear;\n\tanimation-iteration-count: 2;\n}\n```\n##### 注意事项\n`@keyframes的原理是把元素样式从一个状态慢慢的变为另外一个状态，所以是要能够进行渐变的样式才可以使用`\n以下是不能生效的\n```\ndiv {\n    animation: appear 2s;\n}\n@keyframes appear {\n    from { display:none; }\n    to   { display:block;}\n}\n```\n`常用于@keyframes的属性介绍`\n- visibility和opacity\n- color和background-color\n- 盒子模型中的margin、pading、bottom、top、border\n\n想到了再补充其他的\n\n### @media\n> 使用 @media，可以针对不同的媒体类型定义不同的样式。\n> 使用 @media， 可以针对不同的屏幕尺寸设置不同的样式\n> 当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n\n##### 简单示例子\n```\n@media mediatype and|not|only (media feature) {\n    CSS-Code;\n}\n```\n##### 媒体类型\n-   all 【默认值】 匹配所有设备，无论是打印设备还是其他普通的现实设备。\n-   screen 除打印设备和屏幕阅读设备以外的所有设备\n-   speech 能够“读出”页面的屏幕阅读设备，通常供残疾人士使用\n-   print 在打印和打印预览的时候生效\n\n`此处一般情况下不写，采用默认值all，当前我们设计的前端项目一般不涉及speech、print、screen的区分`\n\n##### 媒体特征（常用）\n- 判断设备是横屏还是竖屏\n```\n/* 横屏 */ \n@media (orientation: landscape) {} \n/* 竖屏 */ \n@media (orientation: portrait) {}\n\n```\n- 匹配设备的最大高度、最大宽度\n```\n/* 如果高度小于600px */ \n@media (max-height: 600px) {}\n/* 如果高度小于480px */ \n@media (max-height: 480px) {}\n\n/*多重判断可以用or或者and*/\n@media(min-height: 100px) and (max-height: 200px){\n  body { background: #333; color: white; }\n}\n\n```\n- 判断深色模式\n```\n\n/* 深色模式 表示系统更倾向于深色模式*/\n@media (prefers-color-scheme: dark) {\n    body { background: #333; color: white; }\n}\n/* 浅色模式 表示系统更倾向于浅色模式*/\n@media (prefers-color-scheme: light) {\n    body { background: white; color: #333; }\n}\n\n```\n\n##### 匹配规则\n\n`从前往后，一旦匹配则终止`\n\n### @import\n> 用于导入其他样式文件\n\n- 可以混用条件判断媒体查询\n```\n/* 宽度小于1000px才会生效 */\n@import \"./reset.css\" screen and (max-width: 1000px); \n\n```\n\n### @font-face\n> @font-face 用于加载自定义字体。属于目前前端比较常用的语法，也有多开源的字体图标库可以使用既支持提供字体资源文件路径进行加载，也支持用户本地安装的字体加载\n\n阿里开源字体库引用 示例\n- 引入ttf文件\n\n\n![1](../images/CSS之At-rules-1701680236420.png)\n- font.css\n\n\n![2](../images/CSS之At-rules-1701680245005.png)\n\n- global.less中引入\n\n\n![3](../images/CSS之At-rules-1701680251744.png)\n\n","source":"_posts/CSS之At-rules.md","raw":"---\ntitle: CSS之At-rules\ntags: \n  - css\ncategories: 前端\nkeywords: css, at-rules\ndescription: css中at-rules的使用\ntop_img: /img/qianduan.png\ncomments: true\ncover: /img/qianduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 本篇转载自我的掘金。\ndate: 2023-12-04 16:52:42\n---\n\n\n> `At-rules`规则是目前CSS中一种常见的语法规则，它使用一个`\"@\"`符号加一个关键词定义，后面跟上语法区块，如果没有则以分号结束即可。  \n这种规则一般用于标识文档、引入外部样式、条件判断等等，本文是对该规则的使用总结。`\n\n### @keyframes\n> 使用 `@keyframes` 可以创建动画。在动画过程中，您可以更改CSS样式的设定多次。指定的变化时发生时使用％，或关键字“from”和“to”，等价于0％到100％  0％是开头动画，100％是当动画完成。\n\n##### 示例\n```\n @keyframes mycolor {\n    0% { background-color: red; }\n    30% { background-color: darkblue; }\n    50% { background-color: yellow; }\n    70% { background-color: darkblue; }\n    100% { background-color: red; }\n  }\n```\n\n##### css样式名称\n- `animation-name`:动画的名称 用于指定一个@keyframes动画，指定要使用哪一个关键帧\n- `animation-name`:动画持续时间 用于定义动画完成一个周期要多少秒或者多少毫秒\n- animation-timing-function:动画的运动方式 指定动画将如何完成一个周期,有如下参数，通常不指定  默认ease\n```\n  ease;默认\n  ease-in;  \n  ease-out;\n  ease-in-out;\n  linear;\n  steps(数值, 定位) 定位：start/end 默认end指逐步运动\n```\n- animation-delay:动画在组件渲染后多久开始\n- animation-iteration-count:动画循环播放的次数，默认值为1，一般会设定为infinite（一直循环）\n- animation-fill-mode：动画在播放完成后的状态，有两个值可以选择\n```\n  forwards 保持动画结束后的状态(通常选择这个，防止抖动)\n  backwards 动画结束后回到最初的状态\n```\n- animation-direction:动画执行顺序----动画是否应该播放完后逆向交替循环（对设置了多次播放的动画有效），有三个值可供选择：\n\n```\n normal 默认值（即执行完后回到起点再次执行）\n reverse 反向（即直接从终点反向执行到起点再反复）\n alternate 先从起点到终点，再从终点到起点\n```\n\n**以上所有css样式可以简写为:**\n`animation: 动画执行时间 延迟时间 执行关键帧名称 运动方式 运动次数 结束状态 动画执行顺序`;\n**更简形式为:**\n``animation: 动画执行时间 执行关键帧名称;``\n\n##### 简单应用\n```\ndiv { \n\twidth: 200px;\n\theight: 200px;\n\tbackground: red;\n}\n@keyframes mycolor {\n\t0% { background-color: red; }\n\t30% { background-color: yellow; }\n\t60% { background-color: green; }\n\t100% { background-color: red; }\n}\ndiv:hover {\n\tanimation-name: mycolor;\n\tanimation-duration: 5s;\n\tanimation-timing-function: linear;\n\tanimation-iteration-count: 2;\n}\n```\n##### 注意事项\n`@keyframes的原理是把元素样式从一个状态慢慢的变为另外一个状态，所以是要能够进行渐变的样式才可以使用`\n以下是不能生效的\n```\ndiv {\n    animation: appear 2s;\n}\n@keyframes appear {\n    from { display:none; }\n    to   { display:block;}\n}\n```\n`常用于@keyframes的属性介绍`\n- visibility和opacity\n- color和background-color\n- 盒子模型中的margin、pading、bottom、top、border\n\n想到了再补充其他的\n\n### @media\n> 使用 @media，可以针对不同的媒体类型定义不同的样式。\n> 使用 @media， 可以针对不同的屏幕尺寸设置不同的样式\n> 当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n\n##### 简单示例子\n```\n@media mediatype and|not|only (media feature) {\n    CSS-Code;\n}\n```\n##### 媒体类型\n-   all 【默认值】 匹配所有设备，无论是打印设备还是其他普通的现实设备。\n-   screen 除打印设备和屏幕阅读设备以外的所有设备\n-   speech 能够“读出”页面的屏幕阅读设备，通常供残疾人士使用\n-   print 在打印和打印预览的时候生效\n\n`此处一般情况下不写，采用默认值all，当前我们设计的前端项目一般不涉及speech、print、screen的区分`\n\n##### 媒体特征（常用）\n- 判断设备是横屏还是竖屏\n```\n/* 横屏 */ \n@media (orientation: landscape) {} \n/* 竖屏 */ \n@media (orientation: portrait) {}\n\n```\n- 匹配设备的最大高度、最大宽度\n```\n/* 如果高度小于600px */ \n@media (max-height: 600px) {}\n/* 如果高度小于480px */ \n@media (max-height: 480px) {}\n\n/*多重判断可以用or或者and*/\n@media(min-height: 100px) and (max-height: 200px){\n  body { background: #333; color: white; }\n}\n\n```\n- 判断深色模式\n```\n\n/* 深色模式 表示系统更倾向于深色模式*/\n@media (prefers-color-scheme: dark) {\n    body { background: #333; color: white; }\n}\n/* 浅色模式 表示系统更倾向于浅色模式*/\n@media (prefers-color-scheme: light) {\n    body { background: white; color: #333; }\n}\n\n```\n\n##### 匹配规则\n\n`从前往后，一旦匹配则终止`\n\n### @import\n> 用于导入其他样式文件\n\n- 可以混用条件判断媒体查询\n```\n/* 宽度小于1000px才会生效 */\n@import \"./reset.css\" screen and (max-width: 1000px); \n\n```\n\n### @font-face\n> @font-face 用于加载自定义字体。属于目前前端比较常用的语法，也有多开源的字体图标库可以使用既支持提供字体资源文件路径进行加载，也支持用户本地安装的字体加载\n\n阿里开源字体库引用 示例\n- 引入ttf文件\n\n\n![1](../images/CSS之At-rules-1701680236420.png)\n- font.css\n\n\n![2](../images/CSS之At-rules-1701680245005.png)\n\n- global.less中引入\n\n\n![3](../images/CSS之At-rules-1701680251744.png)\n\n","slug":"CSS之At-rules","published":1,"updated":"2023-12-05T03:07:30.644Z","_id":"clpqoimit00000cpk2cvo4qut","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><code>At-rules</code>规则是目前CSS中一种常见的语法规则，它使用一个<code>&quot;@&quot;</code>符号加一个关键词定义，后面跟上语法区块，如果没有则以分号结束即可。<br>这种规则一般用于标识文档、引入外部样式、条件判断等等，本文是对该规则的使用总结。&#96;</p>\n</blockquote>\n<h3 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"@keyframes\"></a>@keyframes</h3><blockquote>\n<p>使用 <code>@keyframes</code> 可以创建动画。在动画过程中，您可以更改CSS样式的设定多次。指定的变化时发生时使用％，或关键字“from”和“to”，等价于0％到100％  0％是开头动画，100％是当动画完成。</p>\n</blockquote>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes mycolor &#123;</span><br><span class=\"line\">   0% &#123; background-color: red; &#125;</span><br><span class=\"line\">   30% &#123; background-color: darkblue; &#125;</span><br><span class=\"line\">   50% &#123; background-color: yellow; &#125;</span><br><span class=\"line\">   70% &#123; background-color: darkblue; &#125;</span><br><span class=\"line\">   100% &#123; background-color: red; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"css样式名称\"><a href=\"#css样式名称\" class=\"headerlink\" title=\"css样式名称\"></a>css样式名称</h5><ul>\n<li><code>animation-name</code>:动画的名称 用于指定一个@keyframes动画，指定要使用哪一个关键帧</li>\n<li><code>animation-name</code>:动画持续时间 用于定义动画完成一个周期要多少秒或者多少毫秒</li>\n<li>animation-timing-function:动画的运动方式 指定动画将如何完成一个周期,有如下参数，通常不指定  默认ease<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ease;默认</span><br><span class=\"line\">ease-in;  </span><br><span class=\"line\">ease-out;</span><br><span class=\"line\">ease-in-out;</span><br><span class=\"line\">linear;</span><br><span class=\"line\">steps(数值, 定位) 定位：start/end 默认end指逐步运动</span><br></pre></td></tr></table></figure></li>\n<li>animation-delay:动画在组件渲染后多久开始</li>\n<li>animation-iteration-count:动画循环播放的次数，默认值为1，一般会设定为infinite（一直循环）</li>\n<li>animation-fill-mode：动画在播放完成后的状态，有两个值可以选择<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwards 保持动画结束后的状态(通常选择这个，防止抖动)</span><br><span class=\"line\">backwards 动画结束后回到最初的状态</span><br></pre></td></tr></table></figure></li>\n<li>animation-direction:动画执行顺序—-动画是否应该播放完后逆向交替循环（对设置了多次播放的动画有效），有三个值可供选择：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normal 默认值（即执行完后回到起点再次执行）</span><br><span class=\"line\">reverse 反向（即直接从终点反向执行到起点再反复）</span><br><span class=\"line\">alternate 先从起点到终点，再从终点到起点</span><br></pre></td></tr></table></figure>\n\n<p><strong>以上所有css样式可以简写为:</strong><br><code>animation: 动画执行时间 延迟时间 执行关键帧名称 运动方式 运动次数 结束状态 动画执行顺序</code>;<br><strong>更简形式为:</strong><br><code>animation: 动画执行时间 执行关键帧名称;</code></p>\n<h5 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123; </span><br><span class=\"line\">\twidth: 200px;</span><br><span class=\"line\">\theight: 200px;</span><br><span class=\"line\">\tbackground: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes mycolor &#123;</span><br><span class=\"line\">\t0% &#123; background-color: red; &#125;</span><br><span class=\"line\">\t30% &#123; background-color: yellow; &#125;</span><br><span class=\"line\">\t60% &#123; background-color: green; &#125;</span><br><span class=\"line\">\t100% &#123; background-color: red; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div:hover &#123;</span><br><span class=\"line\">\tanimation-name: mycolor;</span><br><span class=\"line\">\tanimation-duration: 5s;</span><br><span class=\"line\">\tanimation-timing-function: linear;</span><br><span class=\"line\">\tanimation-iteration-count: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p><code>@keyframes的原理是把元素样式从一个状态慢慢的变为另外一个状态，所以是要能够进行渐变的样式才可以使用</code><br>以下是不能生效的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">    animation: appear 2s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes appear &#123;</span><br><span class=\"line\">    from &#123; display:none; &#125;</span><br><span class=\"line\">    to   &#123; display:block;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>常用于@keyframes的属性介绍</code></p>\n<ul>\n<li>visibility和opacity</li>\n<li>color和background-color</li>\n<li>盒子模型中的margin、pading、bottom、top、border</li>\n</ul>\n<p>想到了再补充其他的</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"@media\"></a>@media</h3><blockquote>\n<p>使用 @media，可以针对不同的媒体类型定义不同的样式。<br>使用 @media， 可以针对不同的屏幕尺寸设置不同的样式<br>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n</blockquote>\n<h5 id=\"简单示例子\"><a href=\"#简单示例子\" class=\"headerlink\" title=\"简单示例子\"></a>简单示例子</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media mediatype and|not|only (media feature) &#123;</span><br><span class=\"line\">    CSS-Code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"媒体类型\"><a href=\"#媒体类型\" class=\"headerlink\" title=\"媒体类型\"></a>媒体类型</h5><ul>\n<li>all 【默认值】 匹配所有设备，无论是打印设备还是其他普通的现实设备。</li>\n<li>screen 除打印设备和屏幕阅读设备以外的所有设备</li>\n<li>speech 能够“读出”页面的屏幕阅读设备，通常供残疾人士使用</li>\n<li>print 在打印和打印预览的时候生效</li>\n</ul>\n<p><code>此处一般情况下不写，采用默认值all，当前我们设计的前端项目一般不涉及speech、print、screen的区分</code></p>\n<h5 id=\"媒体特征（常用）\"><a href=\"#媒体特征（常用）\" class=\"headerlink\" title=\"媒体特征（常用）\"></a>媒体特征（常用）</h5><ul>\n<li>判断设备是横屏还是竖屏<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 横屏 */ </span><br><span class=\"line\">@media (orientation: landscape) &#123;&#125; </span><br><span class=\"line\">/* 竖屏 */ </span><br><span class=\"line\">@media (orientation: portrait) &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>匹配设备的最大高度、最大宽度<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 如果高度小于600px */ </span><br><span class=\"line\">@media (max-height: 600px) &#123;&#125;</span><br><span class=\"line\">/* 如果高度小于480px */ </span><br><span class=\"line\">@media (max-height: 480px) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*多重判断可以用or或者and*/</span><br><span class=\"line\">@media(min-height: 100px) and (max-height: 200px)&#123;</span><br><span class=\"line\">  body &#123; background: #333; color: white; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>判断深色模式<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* 深色模式 表示系统更倾向于深色模式*/</span><br><span class=\"line\">@media (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    body &#123; background: #333; color: white; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 浅色模式 表示系统更倾向于浅色模式*/</span><br><span class=\"line\">@media (prefers-color-scheme: light) &#123;</span><br><span class=\"line\">    body &#123; background: white; color: #333; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h5><p><code>从前往后，一旦匹配则终止</code></p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><blockquote>\n<p>用于导入其他样式文件</p>\n</blockquote>\n<ul>\n<li>可以混用条件判断媒体查询<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 宽度小于1000px才会生效 */</span><br><span class=\"line\">@import &quot;./reset.css&quot; screen and (max-width: 1000px); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h3><blockquote>\n<p>@font-face 用于加载自定义字体。属于目前前端比较常用的语法，也有多开源的字体图标库可以使用既支持提供字体资源文件路径进行加载，也支持用户本地安装的字体加载</p>\n</blockquote>\n<p>阿里开源字体库引用 示例</p>\n<ul>\n<li>引入ttf文件</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680236420.png\" alt=\"1\"></p>\n<ul>\n<li>font.css</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680245005.png\" alt=\"2\"></p>\n<ul>\n<li>global.less中引入</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680251744.png\" alt=\"3\"></p>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p><code>At-rules</code>规则是目前CSS中一种常见的语法规则，它使用一个<code>&quot;@&quot;</code>符号加一个关键词定义，后面跟上语法区块，如果没有则以分号结束即可。<br>这种规则一般用于标识文档、引入外部样式、条件判断等等，本文是对该规则的使用总结。&#96;</p>\n</blockquote>\n<h3 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"@keyframes\"></a>@keyframes</h3><blockquote>\n<p>使用 <code>@keyframes</code> 可以创建动画。在动画过程中，您可以更改CSS样式的设定多次。指定的变化时发生时使用％，或关键字“from”和“to”，等价于0％到100％  0％是开头动画，100％是当动画完成。</p>\n</blockquote>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes mycolor &#123;</span><br><span class=\"line\">   0% &#123; background-color: red; &#125;</span><br><span class=\"line\">   30% &#123; background-color: darkblue; &#125;</span><br><span class=\"line\">   50% &#123; background-color: yellow; &#125;</span><br><span class=\"line\">   70% &#123; background-color: darkblue; &#125;</span><br><span class=\"line\">   100% &#123; background-color: red; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"css样式名称\"><a href=\"#css样式名称\" class=\"headerlink\" title=\"css样式名称\"></a>css样式名称</h5><ul>\n<li><code>animation-name</code>:动画的名称 用于指定一个@keyframes动画，指定要使用哪一个关键帧</li>\n<li><code>animation-name</code>:动画持续时间 用于定义动画完成一个周期要多少秒或者多少毫秒</li>\n<li>animation-timing-function:动画的运动方式 指定动画将如何完成一个周期,有如下参数，通常不指定  默认ease<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ease;默认</span><br><span class=\"line\">ease-in;  </span><br><span class=\"line\">ease-out;</span><br><span class=\"line\">ease-in-out;</span><br><span class=\"line\">linear;</span><br><span class=\"line\">steps(数值, 定位) 定位：start/end 默认end指逐步运动</span><br></pre></td></tr></table></figure></li>\n<li>animation-delay:动画在组件渲染后多久开始</li>\n<li>animation-iteration-count:动画循环播放的次数，默认值为1，一般会设定为infinite（一直循环）</li>\n<li>animation-fill-mode：动画在播放完成后的状态，有两个值可以选择<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwards 保持动画结束后的状态(通常选择这个，防止抖动)</span><br><span class=\"line\">backwards 动画结束后回到最初的状态</span><br></pre></td></tr></table></figure></li>\n<li>animation-direction:动画执行顺序—-动画是否应该播放完后逆向交替循环（对设置了多次播放的动画有效），有三个值可供选择：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normal 默认值（即执行完后回到起点再次执行）</span><br><span class=\"line\">reverse 反向（即直接从终点反向执行到起点再反复）</span><br><span class=\"line\">alternate 先从起点到终点，再从终点到起点</span><br></pre></td></tr></table></figure>\n\n<p><strong>以上所有css样式可以简写为:</strong><br><code>animation: 动画执行时间 延迟时间 执行关键帧名称 运动方式 运动次数 结束状态 动画执行顺序</code>;<br><strong>更简形式为:</strong><br><code>animation: 动画执行时间 执行关键帧名称;</code></p>\n<h5 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123; </span><br><span class=\"line\">\twidth: 200px;</span><br><span class=\"line\">\theight: 200px;</span><br><span class=\"line\">\tbackground: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes mycolor &#123;</span><br><span class=\"line\">\t0% &#123; background-color: red; &#125;</span><br><span class=\"line\">\t30% &#123; background-color: yellow; &#125;</span><br><span class=\"line\">\t60% &#123; background-color: green; &#125;</span><br><span class=\"line\">\t100% &#123; background-color: red; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div:hover &#123;</span><br><span class=\"line\">\tanimation-name: mycolor;</span><br><span class=\"line\">\tanimation-duration: 5s;</span><br><span class=\"line\">\tanimation-timing-function: linear;</span><br><span class=\"line\">\tanimation-iteration-count: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p><code>@keyframes的原理是把元素样式从一个状态慢慢的变为另外一个状态，所以是要能够进行渐变的样式才可以使用</code><br>以下是不能生效的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">    animation: appear 2s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes appear &#123;</span><br><span class=\"line\">    from &#123; display:none; &#125;</span><br><span class=\"line\">    to   &#123; display:block;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>常用于@keyframes的属性介绍</code></p>\n<ul>\n<li>visibility和opacity</li>\n<li>color和background-color</li>\n<li>盒子模型中的margin、pading、bottom、top、border</li>\n</ul>\n<p>想到了再补充其他的</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"@media\"></a>@media</h3><blockquote>\n<p>使用 @media，可以针对不同的媒体类型定义不同的样式。<br>使用 @media， 可以针对不同的屏幕尺寸设置不同的样式<br>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n</blockquote>\n<h5 id=\"简单示例子\"><a href=\"#简单示例子\" class=\"headerlink\" title=\"简单示例子\"></a>简单示例子</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media mediatype and|not|only (media feature) &#123;</span><br><span class=\"line\">    CSS-Code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"媒体类型\"><a href=\"#媒体类型\" class=\"headerlink\" title=\"媒体类型\"></a>媒体类型</h5><ul>\n<li>all 【默认值】 匹配所有设备，无论是打印设备还是其他普通的现实设备。</li>\n<li>screen 除打印设备和屏幕阅读设备以外的所有设备</li>\n<li>speech 能够“读出”页面的屏幕阅读设备，通常供残疾人士使用</li>\n<li>print 在打印和打印预览的时候生效</li>\n</ul>\n<p><code>此处一般情况下不写，采用默认值all，当前我们设计的前端项目一般不涉及speech、print、screen的区分</code></p>\n<h5 id=\"媒体特征（常用）\"><a href=\"#媒体特征（常用）\" class=\"headerlink\" title=\"媒体特征（常用）\"></a>媒体特征（常用）</h5><ul>\n<li>判断设备是横屏还是竖屏<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 横屏 */ </span><br><span class=\"line\">@media (orientation: landscape) &#123;&#125; </span><br><span class=\"line\">/* 竖屏 */ </span><br><span class=\"line\">@media (orientation: portrait) &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>匹配设备的最大高度、最大宽度<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 如果高度小于600px */ </span><br><span class=\"line\">@media (max-height: 600px) &#123;&#125;</span><br><span class=\"line\">/* 如果高度小于480px */ </span><br><span class=\"line\">@media (max-height: 480px) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*多重判断可以用or或者and*/</span><br><span class=\"line\">@media(min-height: 100px) and (max-height: 200px)&#123;</span><br><span class=\"line\">  body &#123; background: #333; color: white; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>判断深色模式<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* 深色模式 表示系统更倾向于深色模式*/</span><br><span class=\"line\">@media (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    body &#123; background: #333; color: white; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 浅色模式 表示系统更倾向于浅色模式*/</span><br><span class=\"line\">@media (prefers-color-scheme: light) &#123;</span><br><span class=\"line\">    body &#123; background: white; color: #333; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h5><p><code>从前往后，一旦匹配则终止</code></p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><blockquote>\n<p>用于导入其他样式文件</p>\n</blockquote>\n<ul>\n<li>可以混用条件判断媒体查询<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 宽度小于1000px才会生效 */</span><br><span class=\"line\">@import &quot;./reset.css&quot; screen and (max-width: 1000px); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h3><blockquote>\n<p>@font-face 用于加载自定义字体。属于目前前端比较常用的语法，也有多开源的字体图标库可以使用既支持提供字体资源文件路径进行加载，也支持用户本地安装的字体加载</p>\n</blockquote>\n<p>阿里开源字体库引用 示例</p>\n<ul>\n<li>引入ttf文件</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680236420.png\" alt=\"1\"></p>\n<ul>\n<li>font.css</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680245005.png\" alt=\"2\"></p>\n<ul>\n<li>global.less中引入</li>\n</ul>\n<p><img src=\"/../images/CSS%E4%B9%8BAt-rules-1701680251744.png\" alt=\"3\"></p>\n"},{"title":"回溯——排列、组合、子集","keywords":"就业, 刷题，回溯","description":"回溯章节的排列、组合、子集全刷篇","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-04T08:52:14.000Z","_content":"\n\n> 回溯算法初探————排列、组合、子集\n\n\n## 整体解题步骤\n该类型回溯算法有统一的代码解方案\n1. 确定题解`res`格式和部分可能解`temp`格式\n\n```java\n// res\nList<List<Integer>> res = new ArrayList<>();\n// temp\nDeque<Integer> path = new ArrayDeque<>(len);\n```\n2. 确定递归调用方法\n\n```java\nbackTrack(nums, res, temp, 0, length, unused);\n```\n3. 指定递归终止条件\n\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n```\n4. 确定回溯位置\n\n```\n        for (int i = 0; i < len; i++) {\n                path.addLast(nums[i]);\n                dfs(nums, len, depth + 1, path, used, res);\n                path.removeLast();\n            }\n        }\n```\n\n`往往还涉及到unused数组的使用或者begin变量，以防止重复情况`\n\n####  [46. 全排列（中等）](https://leetcode-cn.com/problems/permutations/)\n\n- 题目介绍\n\n![1](../images/回溯——flood-fill、字符串-1701681216686.png)\n- 解题思路\n\n`标准解题步骤基础上加上unused数组，避免元素重复`\n\n`核心代码`：\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = 0; i < len; i++) {\n            if (!used[i]) {\n                path.addLast(nums[i]);\n                used[i] = true;\n\n                dfs(nums, len, depth + 1, path, used, res);\n\n                used[i] = false;\n                path.removeLast();\n            }\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        // 使用一个动态数组保存所有可能的全排列\n        List<List<Integer>> res = new ArrayList<>();\n        if (len == 0) {\n            return res;\n        }\n\n        boolean[] used = new boolean[len];\n        Deque<Integer> path = new ArrayDeque<>(len);\n\n        // 调用深度优先搜索函数\n        dfs(nums, len, 0, path, used, res);\n        return res;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(int[] nums, int len, int depth,\n                     Deque<Integer> path, boolean[] used,\n                     List<List<Integer>> res) {\n        // 如果达到了数组的长度，说明已经生成了一个全排列\n        if (depth == len) {\n            // 将当前路径中的元素添加到结果集中\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        // 遍历数组中的每个元素\n        for (int i = 0; i < len; i++) {\n            if (!used[i]) {\n                // 将当前元素加入路径中\n                path.addLast(nums[i]);\n                used[i] = true;\n\n                // 递归调用深度优先搜索函数，继续生成下一个位置的元素\n                dfs(nums, len, depth + 1, path, used, res);\n\n                // 回溯操作，将当前元素从路径中移除，重新设置为未使用状态\n                used[i] = false;\n                path.removeLast();\n            }\n        }\n    }\n}\n```\n\n#### [47. 全排列 II（中等）](https://leetcode-cn.com/problems/permutations-ii/)\n- 题目介绍\n\n\n![2](../images/回溯——flood-fill、字符串-1701681234910.png)\n\n- 解题思路\n\n`相较于全排列一，该题数字可以重复，考虑排序+从左到右第一次调用`\n\n`核心代码：`\n```java\n// 排序\n Arrays.sort(nums);\n \n//避免重复排列\n     for (int i = 0; i < length; i++) {\n            if (unused[i] || i > 0 && nums[i] == nums[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            temp.addLast(nums[i]);\n            unused[i] = true;\n            backTrack(nums, res, temp, i, length, unused);\n            unused[i] = false;\n            temp.removeLast();\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        // 对数组进行排序，使相同的元素相邻，方便后续去重操作\n        Arrays.sort(nums);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前排列的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 记录元素是否被使用的数组\n        boolean[] unused = new boolean[length];\n        // 调用回溯函数\n        backTrack(nums, res, temp, 0, length, unused);\n\n        return res;\n    }\n\n    private void backTrack(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length,\n                           boolean[] unused) {\n        // 终止条件：当暂存排列的长度等于数组的长度时，说明已经生成了一个全排列\n        if (temp.size() == length) {\n            // 将当前排列加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 遍历数组中的每个元素\n        for (int i = 0; i < length; i++) {\n            // 如果当前元素已经被使用，或者是相同的元素且前一个元素未被使用，则跳过该元素\n            if (unused[i] || (i > 0 && nums[i] == nums[i - 1] && !unused[i - 1])) {\n                continue;\n            }\n            // 将当前元素加入暂存排列中\n            temp.addLast(nums[i]);\n            // 将当前元素标记为已使用\n            unused[i] = true;\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(nums, res, temp, i, length, unused);\n            // 回溯操作，将当前元素从暂存排列中移除，重新设置为未使用状态\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n####   [39. 组合总和（中等）](https://leetcode-cn.com/problems/combination-sum/)\n- 题目介绍\n\n![4](../images/回溯——flood-fill、字符串-1701681257321.png)\n\n- 解题思路\n\n`以target为和，全排列去对其进行相减，当target等于0则为其中一解，当target小于0则剪枝`\n\n`核心代码：`\n```java\n        if (target == 0) {\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        if (target < 0) {\n            return;\n        }\n        for (int i = x; i < candidates.length; i++) {\n            temp.addLast(candidates[i]);\n            backTrack(candidates, i, target - candidates[i], res, temp);\n            temp.removeLast();\n        }\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 调用回溯函数\n        backTrack(candidates, 0, target, res, temp);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int[] candidates,\n                           int x,\n                           int target,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp) {\n        // 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合\n        if (target == 0) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 如果目标值小于0，说明当前组合不满足条件，直接返回\n        if (target < 0) {\n            return;\n        }\n        // 遍历候选数数组中的每个元素\n        for (int i = x; i < candidates.length; i++) {\n            // 将当前元素加入暂存组合中\n            temp.addLast(candidates[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(candidates, i, target - candidates[i], res, temp);\n            // 回溯操作，将当前元素从暂存组合中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n\n####   [40. 组合总和 II（中等）](https://leetcode-cn.com/problems/combination-sum-ii/)\n\n- 题目介绍\n\n`和全排列进阶一致`\n\n`核心代码：`\n```java\n        for (int i = x; i < candidates.length; i++) {\n            if (i > 0 && candidates[i] == candidates[i - 1] && !unused[i-1]) {\n                continue;\n            }\n            unused[i]=true;\n            temp.addLast(candidates[i]);\n            backTrack(candidates, i + 1, target - candidates[i], res, temp,unused);\n            unused[i]=false;\n            temp.removeLast();\n        }\n    }\n```\n\n- 完整代码\n```java\nclass Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        // 对候选数数组进行排序，为后续剪枝操作做准备\n        Arrays.sort(candidates);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 用于标记候选数是否已被使用的布尔数组\n        boolean[] unused = new boolean[candidates.length];\n        // 调用回溯函数\n        backTrack(candidates, 0, target, res, temp, unused);\n\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int[] candidates,\n                           int x,\n                           int target,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           boolean[] unused) {\n        // 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合\n        if (target == 0) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 如果目标值小于0，说明当前组合不满足条件，直接返回\n        if (target < 0) {\n            return;\n        }\n        // 遍历候选数数组中的每个元素\n        for (int i = x; i < candidates.length; i++) {\n            // 进行剪枝操作：如果当前元素与前一个元素相同，并且前一个元素未被使用，则跳过当前元素，避免重复组合\n            if (i > 0 && candidates[i] == candidates[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            // 标记当前元素为已使用\n            unused[i] = true;\n            // 将当前元素加入暂存组合中\n            temp.addLast(candidates[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(candidates, i + 1, target - candidates[i], res, temp, unused);\n            // 回溯操作，将当前元素从暂存组合中移除，并恢复当前元素的未使用状态\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n\n####  [77. 组合（中等）](https://leetcode-cn.com/problems/combinations/)\n\n- 题目介绍\n\n\n![7](../images/回溯——flood-fill、字符串-1701681281060.png)\n\n- 经典全排列\n\n```java\nclass Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 调用回溯函数\n        backTrack(1, n, k, res, temp);\n        // 打印结果\n        System.out.println(res.toString());\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int x,\n                           int n,\n                           int k,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp) {\n        // 终止条件：当暂存组合的大小等于 k 时，说明已经生成了一个满足条件的组合\n        if (temp.size() == k) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 遍历可选的数字范围\n        for (int i = x; i <= n - (k - temp.size()) + 1; i++) {\n            // 将当前数字加入暂存组合中\n            temp.addLast(i);\n            // 递归调用回溯函数，生成下一个位置的数字\n            backTrack(i + 1, n, k, res, temp);\n            // 回溯操作，将当前数字从暂存组合中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [78. 子集（中等）](https://leetcode-cn.com/problems/subsets/)\n\n- 题目介绍\n\n![8](../images/回溯——flood-fill、字符串-1701681296977.png)\n\n- 解题思路\n\n`此处回溯要注意begin变量的设置，可保证集合的非重复性`\n\n`核心代码：`\n```java\n        for (int i = x; i < length; i++) {\n            temp.addLast(nums[i]);\n            backTrace(nums, res, temp, i + 1, length);\n            temp.removeLast();\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前子集的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 调用回溯函数\n        backTrace(nums, res, temp, 0, length);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrace(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length) {\n        // 将当前子集加入结果列表\n        res.add(new ArrayList<>(temp));\n        // 遍历数组中的元素\n        for (int i = x; i < length; i++) {\n            // 将当前元素加入暂存子集中\n            temp.addLast(nums[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrace(nums, res, temp, i + 1, length);\n            // 回溯操作，将当前元素从暂存子集中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [90. 子集 II（中等）](https://leetcode-cn.com/problems/subsets-ii/)\n- 题目介绍\n\n![9](../images/回溯——flood-fill、字符串-1701681314905.png)\n\n- 解题思路\n\n`该题加了可重复限制条件，整体和全排列2类似，先排序+只允许从左到右排列`\n\n`核心代码：`\n\n```java\n        for (int i = x; i < length; i++) {\n            if (i>0&&nums[i]==nums[i-1]&&!unused[i-1]){\n                continue;\n            }\n            unused[i]=true;\n            temp.addLast(nums[i]);\n            backTrace(nums,res,temp,i+1,length,unused);\n            unused[i]=false;\n            temp.removeLast();\n        }\n\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        // 对数组进行排序\n        Arrays.sort(nums);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前子集的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 标记数组中的元素是否已被使用\n        boolean[] unused = new boolean[length];\n        // 调用回溯函数\n        backTrace(nums, res, temp, 0, length, unused);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrace(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length,\n                           boolean[] unused) {\n        // 将当前子集加入结果列表\n        res.add(new ArrayList<>(temp));\n        // 遍历数组中的元素\n        for (int i = x; i < length; i++) {\n            // 如果当前元素与前一个元素相等，并且前一个元素未被使用，则跳过当前循环\n            if (i > 0 && nums[i] == nums[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            // 标记当前元素为已使用\n            unused[i] = true;\n            // 将当前元素加入暂存子集中\n            temp.addLast(nums[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrace(nums, res, temp, i + 1, length, unused);\n            // 回溯操作，将当前元素从暂存子集中移除\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [60. 第 k 个排列（中等）](https://leetcode-cn.com/problems/permutation-sequence/)\n\n- 题目介绍\n\n\n![10](../images/回溯——flood-fill、字符串-1701681338321.png)\n\n- 解题思路\n\n`定义count值，每次找到一个全排列+1，当找到第k值后复制res返回`\n\n`核心代码：`\n```java\n        if (temp.size() == n) {\n            //res.add(new ArrayList<>(temp));\n            //System.out.println(count);\n            count++;\n            if (count==k){\n                temp.forEach(t->res.append(t));\n            }\n            return;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (unused[i-1]){\n                continue;\n            }\n            temp.addLast(i);\n            unused[i-1]=true;\n            backTrace(i + 1, n, k, temp,unused);\n            if (count==k){\n                break;\n            }\n            temp.removeLast();\n            unused[i-1]=false;\n        }\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 计数器，用于记录生成的排列数量\n    int count = 0;\n    // 用于保存最终的结果\n    StringBuilder res = new StringBuilder();\n\n    public String getPermutation(int n, int k) {\n        // 用于暂存当前排列的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 标记数字是否已被使用\n        boolean[] unused = new boolean[n];\n        // 调用回溯函数生成排列\n        backTrace(1, n, k, temp, unused);\n        return res.toString();\n    }\n\n    // 回溯函数生成排列\n    private void backTrace(int x,\n                           int n,\n                           int k,\n                           LinkedList<Integer> temp,\n                           boolean[] unused) {\n        // 如果已生成的排列长度为 n，则判断是否为第 k 个排列\n        if (temp.size() == n) {\n            count++;\n            if (count == k) {\n                // 如果是第 k 个排列，则将排列中的数字加入结果字符串\n                temp.forEach(t -> res.append(t));\n            }\n            return;\n        }\n\n        // 遍历可用的数字\n        for (int i = 1; i <= n; i++) {\n            // 如果数字已被使用，则跳过当前循环\n            if (unused[i - 1]) {\n                continue;\n            }\n            // 将当前数字加入暂存排列中\n            temp.addLast(i);\n            unused[i - 1] = true;\n            // 递归调用回溯函数，生成下一个位置的数字\n            backTrace(i + 1, n, k, temp, unused);\n            if (count == k) {\n                // 如果已生成第 k 个排列，则跳出循环\n                break;\n            }\n            // 回溯操作，将当前数字从暂存排列中移除\n            temp.removeLast();\n            unused[i - 1] = false;\n        }\n    }\n}\n```\n\n####  [93. 复原 IP 地址（中等）](https://leetcode-cn.com/problems/restore-ip-addresses/)\n\n- 题目介绍\n\n![11](../images/回溯——flood-fill、字符串-1701681356056.png)\n\n- 解题思路\n  `确定四个值组成一组唯一的ip地址`\n\n`定义ip地址中每一个值的正确判定条件`\n\n`适当减枝`\n\n`核心代码`\n\n```java\n//递归函数，确定ip地址四个值\n    backTrace(s, 0, 4, res, temp, length);\n//定义ip地址中每一个值的正确判定条件\n    private boolean judgeIpSegment(String s, int begin, int end) {\n        int len = end - begin + 1;\n        if (len > 1 && s.charAt(begin) == '0') {\n            return false;\n        }\n        int res = 0;\n        for (int i = begin; i <= end; i++) {\n            res = res * 10 + s.charAt(i) - '0';\n        }\n        //while (begin <= end) {\n        //    res = res * 10 + s.charAt(begin) - '0';\n        //    begin++;\n        //}\n        return res >= 0 && res <= 255;\n    }\n//递归回溯\n            if (judgeIpSegment(s, x, i)) {\n                temp.addLast(s.substring(x, i + 1));\n                backTrace(s, i + 1, k - 1, res, temp, length);\n                temp.removeLast();\n            }\n//适当减枝\n            if (i >= length || length - i > k * 3) {\n                break;\n            }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> restoreIpAddresses(String s) {\n        // 输入字符串的长度\n        int length = s.length();\n        // 用于保存结果的列表\n        ArrayList<String> res = new ArrayList<>();\n        // 用于暂存当前正在生成的 IP 地址段的双端队列\n        Deque<String> temp = new ArrayDeque<>(4);\n        // 调用回溯函数生成 IP 地址\n        backTrace(s, 0, 4, res, temp, length);\n        return res;\n    }\n\n    // 回溯函数生成 IP 地址\n    private void backTrace(String s,\n                           int x,\n                           int k,\n                           ArrayList<String> res,\n                           Deque<String> temp,\n                           int length) {\n        // 如果已遍历完整个字符串\n        if (x == length) {\n            // 如果已生成了 4 个 IP 地址段，则将当前 IP 地址加入结果列表\n            if (k == 0) {\n                res.add(String.join(\".\", temp));\n            }\n            return;\n        }\n        // 枚举下一个 IP 地址段的结束位置\n        for (int i = x; i < x + 3; i++) {\n            // 如果超出了字符串的长度，或者剩余的字符数大于 k*3，则跳出循环\n            if (i >= length || length - i > k * 3) {\n                break;\n            }\n            // 判断当前 IP 地址段是否合法\n            if (judgeIpSegment(s, x, i)) {\n                // 将当前 IP 地址段加入暂存队列\n                temp.addLast(s.substring(x, i + 1));\n                // 递归调用回溯函数，生成下一个 IP 地址段\n                backTrace(s, i + 1, k - 1, res, temp, length);\n                // 回溯操作，将当前 IP 地址段从暂存队列中移除\n                temp.removeLast();\n            }\n        }\n    }\n\n    // 判断 IP 地址段是否合法\n    private boolean judgeIpSegment(String s, int begin, int end) {\n        // IP 地址段的长度\n        int len = end - begin + 1;\n        // 如果长度大于 1 且以 0 开头，则不合法\n        if (len > 1 && s.charAt(begin) == '0') {\n            return false;\n        }\n        // 将 IP 地址段转换为整数\n        int res = 0;\n        for (int i = begin; i <= end; i++) {\n            res = res * 10 + s.charAt(i) - '0';\n        }\n        // 判断整数是否在合法的范围内\n        return res >= 0 && res <= 255;\n    }\n}\n```\n","source":"_posts/回溯——flood-fill、字符串.md","raw":"---\ntitle: 回溯——排列、组合、子集\ntags:\n    - 就业\n    - 回溯\n    - 刷题\ncategories: 算法\nkeywords: 就业, 刷题，回溯\ndescription: 回溯章节的排列、组合、子集全刷篇\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-04 16:52:14\n---\n\n\n> 回溯算法初探————排列、组合、子集\n\n\n## 整体解题步骤\n该类型回溯算法有统一的代码解方案\n1. 确定题解`res`格式和部分可能解`temp`格式\n\n```java\n// res\nList<List<Integer>> res = new ArrayList<>();\n// temp\nDeque<Integer> path = new ArrayDeque<>(len);\n```\n2. 确定递归调用方法\n\n```java\nbackTrack(nums, res, temp, 0, length, unused);\n```\n3. 指定递归终止条件\n\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n```\n4. 确定回溯位置\n\n```\n        for (int i = 0; i < len; i++) {\n                path.addLast(nums[i]);\n                dfs(nums, len, depth + 1, path, used, res);\n                path.removeLast();\n            }\n        }\n```\n\n`往往还涉及到unused数组的使用或者begin变量，以防止重复情况`\n\n####  [46. 全排列（中等）](https://leetcode-cn.com/problems/permutations/)\n\n- 题目介绍\n\n![1](../images/回溯——flood-fill、字符串-1701681216686.png)\n- 解题思路\n\n`标准解题步骤基础上加上unused数组，避免元素重复`\n\n`核心代码`：\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = 0; i < len; i++) {\n            if (!used[i]) {\n                path.addLast(nums[i]);\n                used[i] = true;\n\n                dfs(nums, len, depth + 1, path, used, res);\n\n                used[i] = false;\n                path.removeLast();\n            }\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        int len = nums.length;\n        // 使用一个动态数组保存所有可能的全排列\n        List<List<Integer>> res = new ArrayList<>();\n        if (len == 0) {\n            return res;\n        }\n\n        boolean[] used = new boolean[len];\n        Deque<Integer> path = new ArrayDeque<>(len);\n\n        // 调用深度优先搜索函数\n        dfs(nums, len, 0, path, used, res);\n        return res;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(int[] nums, int len, int depth,\n                     Deque<Integer> path, boolean[] used,\n                     List<List<Integer>> res) {\n        // 如果达到了数组的长度，说明已经生成了一个全排列\n        if (depth == len) {\n            // 将当前路径中的元素添加到结果集中\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        // 遍历数组中的每个元素\n        for (int i = 0; i < len; i++) {\n            if (!used[i]) {\n                // 将当前元素加入路径中\n                path.addLast(nums[i]);\n                used[i] = true;\n\n                // 递归调用深度优先搜索函数，继续生成下一个位置的元素\n                dfs(nums, len, depth + 1, path, used, res);\n\n                // 回溯操作，将当前元素从路径中移除，重新设置为未使用状态\n                used[i] = false;\n                path.removeLast();\n            }\n        }\n    }\n}\n```\n\n#### [47. 全排列 II（中等）](https://leetcode-cn.com/problems/permutations-ii/)\n- 题目介绍\n\n\n![2](../images/回溯——flood-fill、字符串-1701681234910.png)\n\n- 解题思路\n\n`相较于全排列一，该题数字可以重复，考虑排序+从左到右第一次调用`\n\n`核心代码：`\n```java\n// 排序\n Arrays.sort(nums);\n \n//避免重复排列\n     for (int i = 0; i < length; i++) {\n            if (unused[i] || i > 0 && nums[i] == nums[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            temp.addLast(nums[i]);\n            unused[i] = true;\n            backTrack(nums, res, temp, i, length, unused);\n            unused[i] = false;\n            temp.removeLast();\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        // 对数组进行排序，使相同的元素相邻，方便后续去重操作\n        Arrays.sort(nums);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前排列的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 记录元素是否被使用的数组\n        boolean[] unused = new boolean[length];\n        // 调用回溯函数\n        backTrack(nums, res, temp, 0, length, unused);\n\n        return res;\n    }\n\n    private void backTrack(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length,\n                           boolean[] unused) {\n        // 终止条件：当暂存排列的长度等于数组的长度时，说明已经生成了一个全排列\n        if (temp.size() == length) {\n            // 将当前排列加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 遍历数组中的每个元素\n        for (int i = 0; i < length; i++) {\n            // 如果当前元素已经被使用，或者是相同的元素且前一个元素未被使用，则跳过该元素\n            if (unused[i] || (i > 0 && nums[i] == nums[i - 1] && !unused[i - 1])) {\n                continue;\n            }\n            // 将当前元素加入暂存排列中\n            temp.addLast(nums[i]);\n            // 将当前元素标记为已使用\n            unused[i] = true;\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(nums, res, temp, i, length, unused);\n            // 回溯操作，将当前元素从暂存排列中移除，重新设置为未使用状态\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n####   [39. 组合总和（中等）](https://leetcode-cn.com/problems/combination-sum/)\n- 题目介绍\n\n![4](../images/回溯——flood-fill、字符串-1701681257321.png)\n\n- 解题思路\n\n`以target为和，全排列去对其进行相减，当target等于0则为其中一解，当target小于0则剪枝`\n\n`核心代码：`\n```java\n        if (target == 0) {\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        if (target < 0) {\n            return;\n        }\n        for (int i = x; i < candidates.length; i++) {\n            temp.addLast(candidates[i]);\n            backTrack(candidates, i, target - candidates[i], res, temp);\n            temp.removeLast();\n        }\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 调用回溯函数\n        backTrack(candidates, 0, target, res, temp);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int[] candidates,\n                           int x,\n                           int target,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp) {\n        // 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合\n        if (target == 0) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 如果目标值小于0，说明当前组合不满足条件，直接返回\n        if (target < 0) {\n            return;\n        }\n        // 遍历候选数数组中的每个元素\n        for (int i = x; i < candidates.length; i++) {\n            // 将当前元素加入暂存组合中\n            temp.addLast(candidates[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(candidates, i, target - candidates[i], res, temp);\n            // 回溯操作，将当前元素从暂存组合中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n\n####   [40. 组合总和 II（中等）](https://leetcode-cn.com/problems/combination-sum-ii/)\n\n- 题目介绍\n\n`和全排列进阶一致`\n\n`核心代码：`\n```java\n        for (int i = x; i < candidates.length; i++) {\n            if (i > 0 && candidates[i] == candidates[i - 1] && !unused[i-1]) {\n                continue;\n            }\n            unused[i]=true;\n            temp.addLast(candidates[i]);\n            backTrack(candidates, i + 1, target - candidates[i], res, temp,unused);\n            unused[i]=false;\n            temp.removeLast();\n        }\n    }\n```\n\n- 完整代码\n```java\nclass Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        // 对候选数数组进行排序，为后续剪枝操作做准备\n        Arrays.sort(candidates);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 用于标记候选数是否已被使用的布尔数组\n        boolean[] unused = new boolean[candidates.length];\n        // 调用回溯函数\n        backTrack(candidates, 0, target, res, temp, unused);\n\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int[] candidates,\n                           int x,\n                           int target,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           boolean[] unused) {\n        // 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合\n        if (target == 0) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 如果目标值小于0，说明当前组合不满足条件，直接返回\n        if (target < 0) {\n            return;\n        }\n        // 遍历候选数数组中的每个元素\n        for (int i = x; i < candidates.length; i++) {\n            // 进行剪枝操作：如果当前元素与前一个元素相同，并且前一个元素未被使用，则跳过当前元素，避免重复组合\n            if (i > 0 && candidates[i] == candidates[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            // 标记当前元素为已使用\n            unused[i] = true;\n            // 将当前元素加入暂存组合中\n            temp.addLast(candidates[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrack(candidates, i + 1, target - candidates[i], res, temp, unused);\n            // 回溯操作，将当前元素从暂存组合中移除，并恢复当前元素的未使用状态\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n\n####  [77. 组合（中等）](https://leetcode-cn.com/problems/combinations/)\n\n- 题目介绍\n\n\n![7](../images/回溯——flood-fill、字符串-1701681281060.png)\n\n- 经典全排列\n\n```java\nclass Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前组合的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 调用回溯函数\n        backTrack(1, n, k, res, temp);\n        // 打印结果\n        System.out.println(res.toString());\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrack(int x,\n                           int n,\n                           int k,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp) {\n        // 终止条件：当暂存组合的大小等于 k 时，说明已经生成了一个满足条件的组合\n        if (temp.size() == k) {\n            // 将当前组合加入结果列表\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        // 遍历可选的数字范围\n        for (int i = x; i <= n - (k - temp.size()) + 1; i++) {\n            // 将当前数字加入暂存组合中\n            temp.addLast(i);\n            // 递归调用回溯函数，生成下一个位置的数字\n            backTrack(i + 1, n, k, res, temp);\n            // 回溯操作，将当前数字从暂存组合中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [78. 子集（中等）](https://leetcode-cn.com/problems/subsets/)\n\n- 题目介绍\n\n![8](../images/回溯——flood-fill、字符串-1701681296977.png)\n\n- 解题思路\n\n`此处回溯要注意begin变量的设置，可保证集合的非重复性`\n\n`核心代码：`\n```java\n        for (int i = x; i < length; i++) {\n            temp.addLast(nums[i]);\n            backTrace(nums, res, temp, i + 1, length);\n            temp.removeLast();\n        }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前子集的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 调用回溯函数\n        backTrace(nums, res, temp, 0, length);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrace(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length) {\n        // 将当前子集加入结果列表\n        res.add(new ArrayList<>(temp));\n        // 遍历数组中的元素\n        for (int i = x; i < length; i++) {\n            // 将当前元素加入暂存子集中\n            temp.addLast(nums[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrace(nums, res, temp, i + 1, length);\n            // 回溯操作，将当前元素从暂存子集中移除\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [90. 子集 II（中等）](https://leetcode-cn.com/problems/subsets-ii/)\n- 题目介绍\n\n![9](../images/回溯——flood-fill、字符串-1701681314905.png)\n\n- 解题思路\n\n`该题加了可重复限制条件，整体和全排列2类似，先排序+只允许从左到右排列`\n\n`核心代码：`\n\n```java\n        for (int i = x; i < length; i++) {\n            if (i>0&&nums[i]==nums[i-1]&&!unused[i-1]){\n                continue;\n            }\n            unused[i]=true;\n            temp.addLast(nums[i]);\n            backTrace(nums,res,temp,i+1,length,unused);\n            unused[i]=false;\n            temp.removeLast();\n        }\n\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        // 对数组进行排序\n        Arrays.sort(nums);\n        // 用于保存结果的列表\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        // 用于暂存当前子集的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 数组的长度\n        int length = nums.length;\n        // 标记数组中的元素是否已被使用\n        boolean[] unused = new boolean[length];\n        // 调用回溯函数\n        backTrace(nums, res, temp, 0, length, unused);\n        return res;\n    }\n\n    // 回溯函数\n    private void backTrace(int[] nums,\n                           ArrayList<List<Integer>> res,\n                           LinkedList<Integer> temp,\n                           int x,\n                           int length,\n                           boolean[] unused) {\n        // 将当前子集加入结果列表\n        res.add(new ArrayList<>(temp));\n        // 遍历数组中的元素\n        for (int i = x; i < length; i++) {\n            // 如果当前元素与前一个元素相等，并且前一个元素未被使用，则跳过当前循环\n            if (i > 0 && nums[i] == nums[i - 1] && !unused[i - 1]) {\n                continue;\n            }\n            // 标记当前元素为已使用\n            unused[i] = true;\n            // 将当前元素加入暂存子集中\n            temp.addLast(nums[i]);\n            // 递归调用回溯函数，生成下一个位置的元素\n            backTrace(nums, res, temp, i + 1, length, unused);\n            // 回溯操作，将当前元素从暂存子集中移除\n            unused[i] = false;\n            temp.removeLast();\n        }\n    }\n}\n```\n\n#### [60. 第 k 个排列（中等）](https://leetcode-cn.com/problems/permutation-sequence/)\n\n- 题目介绍\n\n\n![10](../images/回溯——flood-fill、字符串-1701681338321.png)\n\n- 解题思路\n\n`定义count值，每次找到一个全排列+1，当找到第k值后复制res返回`\n\n`核心代码：`\n```java\n        if (temp.size() == n) {\n            //res.add(new ArrayList<>(temp));\n            //System.out.println(count);\n            count++;\n            if (count==k){\n                temp.forEach(t->res.append(t));\n            }\n            return;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (unused[i-1]){\n                continue;\n            }\n            temp.addLast(i);\n            unused[i-1]=true;\n            backTrace(i + 1, n, k, temp,unused);\n            if (count==k){\n                break;\n            }\n            temp.removeLast();\n            unused[i-1]=false;\n        }\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 计数器，用于记录生成的排列数量\n    int count = 0;\n    // 用于保存最终的结果\n    StringBuilder res = new StringBuilder();\n\n    public String getPermutation(int n, int k) {\n        // 用于暂存当前排列的链表\n        LinkedList<Integer> temp = new LinkedList<>();\n        // 标记数字是否已被使用\n        boolean[] unused = new boolean[n];\n        // 调用回溯函数生成排列\n        backTrace(1, n, k, temp, unused);\n        return res.toString();\n    }\n\n    // 回溯函数生成排列\n    private void backTrace(int x,\n                           int n,\n                           int k,\n                           LinkedList<Integer> temp,\n                           boolean[] unused) {\n        // 如果已生成的排列长度为 n，则判断是否为第 k 个排列\n        if (temp.size() == n) {\n            count++;\n            if (count == k) {\n                // 如果是第 k 个排列，则将排列中的数字加入结果字符串\n                temp.forEach(t -> res.append(t));\n            }\n            return;\n        }\n\n        // 遍历可用的数字\n        for (int i = 1; i <= n; i++) {\n            // 如果数字已被使用，则跳过当前循环\n            if (unused[i - 1]) {\n                continue;\n            }\n            // 将当前数字加入暂存排列中\n            temp.addLast(i);\n            unused[i - 1] = true;\n            // 递归调用回溯函数，生成下一个位置的数字\n            backTrace(i + 1, n, k, temp, unused);\n            if (count == k) {\n                // 如果已生成第 k 个排列，则跳出循环\n                break;\n            }\n            // 回溯操作，将当前数字从暂存排列中移除\n            temp.removeLast();\n            unused[i - 1] = false;\n        }\n    }\n}\n```\n\n####  [93. 复原 IP 地址（中等）](https://leetcode-cn.com/problems/restore-ip-addresses/)\n\n- 题目介绍\n\n![11](../images/回溯——flood-fill、字符串-1701681356056.png)\n\n- 解题思路\n  `确定四个值组成一组唯一的ip地址`\n\n`定义ip地址中每一个值的正确判定条件`\n\n`适当减枝`\n\n`核心代码`\n\n```java\n//递归函数，确定ip地址四个值\n    backTrace(s, 0, 4, res, temp, length);\n//定义ip地址中每一个值的正确判定条件\n    private boolean judgeIpSegment(String s, int begin, int end) {\n        int len = end - begin + 1;\n        if (len > 1 && s.charAt(begin) == '0') {\n            return false;\n        }\n        int res = 0;\n        for (int i = begin; i <= end; i++) {\n            res = res * 10 + s.charAt(i) - '0';\n        }\n        //while (begin <= end) {\n        //    res = res * 10 + s.charAt(begin) - '0';\n        //    begin++;\n        //}\n        return res >= 0 && res <= 255;\n    }\n//递归回溯\n            if (judgeIpSegment(s, x, i)) {\n                temp.addLast(s.substring(x, i + 1));\n                backTrace(s, i + 1, k - 1, res, temp, length);\n                temp.removeLast();\n            }\n//适当减枝\n            if (i >= length || length - i > k * 3) {\n                break;\n            }\n```\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> restoreIpAddresses(String s) {\n        // 输入字符串的长度\n        int length = s.length();\n        // 用于保存结果的列表\n        ArrayList<String> res = new ArrayList<>();\n        // 用于暂存当前正在生成的 IP 地址段的双端队列\n        Deque<String> temp = new ArrayDeque<>(4);\n        // 调用回溯函数生成 IP 地址\n        backTrace(s, 0, 4, res, temp, length);\n        return res;\n    }\n\n    // 回溯函数生成 IP 地址\n    private void backTrace(String s,\n                           int x,\n                           int k,\n                           ArrayList<String> res,\n                           Deque<String> temp,\n                           int length) {\n        // 如果已遍历完整个字符串\n        if (x == length) {\n            // 如果已生成了 4 个 IP 地址段，则将当前 IP 地址加入结果列表\n            if (k == 0) {\n                res.add(String.join(\".\", temp));\n            }\n            return;\n        }\n        // 枚举下一个 IP 地址段的结束位置\n        for (int i = x; i < x + 3; i++) {\n            // 如果超出了字符串的长度，或者剩余的字符数大于 k*3，则跳出循环\n            if (i >= length || length - i > k * 3) {\n                break;\n            }\n            // 判断当前 IP 地址段是否合法\n            if (judgeIpSegment(s, x, i)) {\n                // 将当前 IP 地址段加入暂存队列\n                temp.addLast(s.substring(x, i + 1));\n                // 递归调用回溯函数，生成下一个 IP 地址段\n                backTrace(s, i + 1, k - 1, res, temp, length);\n                // 回溯操作，将当前 IP 地址段从暂存队列中移除\n                temp.removeLast();\n            }\n        }\n    }\n\n    // 判断 IP 地址段是否合法\n    private boolean judgeIpSegment(String s, int begin, int end) {\n        // IP 地址段的长度\n        int len = end - begin + 1;\n        // 如果长度大于 1 且以 0 开头，则不合法\n        if (len > 1 && s.charAt(begin) == '0') {\n            return false;\n        }\n        // 将 IP 地址段转换为整数\n        int res = 0;\n        for (int i = begin; i <= end; i++) {\n            res = res * 10 + s.charAt(i) - '0';\n        }\n        // 判断整数是否在合法的范围内\n        return res >= 0 && res <= 255;\n    }\n}\n```\n","slug":"回溯——flood-fill、字符串","published":1,"updated":"2023-12-05T03:06:28.528Z","_id":"clpqoimj000030cpkeicqckp0","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>回溯算法初探————排列、组合、子集</p>\n</blockquote>\n<h2 id=\"整体解题步骤\"><a href=\"#整体解题步骤\" class=\"headerlink\" title=\"整体解题步骤\"></a>整体解题步骤</h2><p>该类型回溯算法有统一的代码解方案</p>\n<ol>\n<li>确定题解<code>res</code>格式和部分可能解<code>temp</code>格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res</span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// temp</span></span><br><span class=\"line\">Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>确定递归调用方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定递归终止条件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定回溯位置</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        dfs(nums, len, depth + 1, path, used, res);</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>往往还涉及到unused数组的使用或者begin变量，以防止重复情况</code></p>\n<h4 id=\"46-全排列（中等）\"><a href=\"#46-全排列（中等）\" class=\"headerlink\" title=\"46. 全排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutations/\">46. 全排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681216686.png\" alt=\"1\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>标准解题步骤基础上加上unused数组，避免元素重复</code></p>\n<p><code>核心代码</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 使用一个动态数组保存所有可能的全排列</span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[len];</span><br><span class=\"line\">        Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用深度优先搜索函数</span></span><br><span class=\"line\">        dfs(nums, len, <span class=\"number\">0</span>, path, used, res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> len, <span class=\"type\">int</span> depth,</span></span><br><span class=\"line\"><span class=\"params\">                     Deque&lt;Integer&gt; path, <span class=\"type\">boolean</span>[] used,</span></span><br><span class=\"line\"><span class=\"params\">                     List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到了数组的长度，说明已经生成了一个全排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前路径中的元素添加到结果集中</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前元素加入路径中</span></span><br><span class=\"line\">                path.addLast(nums[i]);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 递归调用深度优先搜索函数，继续生成下一个位置的元素</span></span><br><span class=\"line\">                dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 回溯操作，将当前元素从路径中移除，重新设置为未使用状态</span></span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                path.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"47-全排列-II（中等）\"><a href=\"#47-全排列-II（中等）\" class=\"headerlink\" title=\"47. 全排列 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutations-ii/\">47. 全排列 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681234910.png\" alt=\"2\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>相较于全排列一，该题数字可以重复，考虑排序+从左到右第一次调用</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"> Arrays.sort(nums);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//避免重复排列</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i] || i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            backTrack(nums, res, temp, i, length, unused);</span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permuteUnique</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对数组进行排序，使相同的元素相邻，方便后续去重操作</span></span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前排列的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 记录元素是否被使用的数组</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当暂存排列的长度等于数组的长度时，说明已经生成了一个全排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前排列加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前元素已经被使用，或者是相同的元素且前一个元素未被使用，则跳过该元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i] || (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存排列中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素标记为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(nums, res, temp, i, length, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存排列中移除，重新设置为未使用状态</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"39-组合总和（中等）\"><a href=\"#39-组合总和（中等）\" class=\"headerlink\" title=\"39. 组合总和（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combination-sum/\">39. 组合总和（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681257321.png\" alt=\"4\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>以target为和，全排列去对其进行相减，当target等于0则为其中一解，当target小于0则剪枝</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        temp.addLast(candidates[i]);</span><br><span class=\"line\">        backTrack(candidates, i, target - candidates[i], res, temp);</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(candidates, <span class=\"number\">0</span>, target, res, temp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> target,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果目标值小于0，说明当前组合不满足条件，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历候选数数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(candidates[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(candidates, i, target - candidates[i], res, temp);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存组合中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"40-组合总和-II（中等）\"><a href=\"#40-组合总和-II（中等）\" class=\"headerlink\" title=\"40. 组合总和 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\">40. 组合总和 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><code>和全排列进阶一致</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        unused[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        temp.addLast(candidates[i]);</span><br><span class=\"line\">        backTrack(candidates, i + <span class=\"number\">1</span>, target - candidates[i], res, temp,unused);</span><br><span class=\"line\">        unused[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum2</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对候选数数组进行排序，为后续剪枝操作做准备</span></span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于标记候选数是否已被使用的布尔数组</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[candidates.length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(candidates, <span class=\"number\">0</span>, target, res, temp, unused);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> target,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果目标值小于0，说明当前组合不满足条件，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历候选数数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 进行剪枝操作：如果当前元素与前一个元素相同，并且前一个元素未被使用，则跳过当前元素，避免重复组合</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 标记当前元素为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(candidates[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(candidates, i + <span class=\"number\">1</span>, target - candidates[i], res, temp, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存组合中移除，并恢复当前元素的未使用状态</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"77-组合（中等）\"><a href=\"#77-组合（中等）\" class=\"headerlink\" title=\"77. 组合（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combinations/\">77. 组合（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681281060.png\" alt=\"7\"></p>\n<ul>\n<li>经典全排列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combine</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(<span class=\"number\">1</span>, n, k, res, temp);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">        System.out.println(res.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当暂存组合的大小等于 k 时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == k) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历可选的数字范围</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt;= n - (k - temp.size()) + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前数字加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(i);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的数字</span></span><br><span class=\"line\">            backTrack(i + <span class=\"number\">1</span>, n, k, res, temp);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前数字从暂存组合中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"78-子集（中等）\"><a href=\"#78-子集（中等）\" class=\"headerlink\" title=\"78. 子集（中等）\"></a><a href=\"https://leetcode-cn.com/problems/subsets/\">78. 子集（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681296977.png\" alt=\"8\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>此处回溯要注意begin变量的设置，可保证集合的非重复性</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">    temp.addLast(nums[i]);</span><br><span class=\"line\">    backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">    temp.removeLast();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前子集的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrace(nums, res, temp, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前子集加入结果列表</span></span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存子集中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存子集中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"90-子集-II（中等）\"><a href=\"#90-子集-II（中等）\" class=\"headerlink\" title=\"90. 子集 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/subsets-ii/\">90. 子集 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681314905.png\" alt=\"9\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>该题加了可重复限制条件，整体和全排列2类似，先排序+只允许从左到右排列</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span>&amp;&amp;nums[i]==nums[i-<span class=\"number\">1</span>]&amp;&amp;!unused[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unused[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    temp.addLast(nums[i]);</span><br><span class=\"line\">    backTrace(nums,res,temp,i+<span class=\"number\">1</span>,length,unused);</span><br><span class=\"line\">    unused[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    temp.removeLast();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsetsWithDup</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对数组进行排序</span></span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前子集的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 标记数组中的元素是否已被使用</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrace(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前子集加入结果列表</span></span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前元素与前一个元素相等，并且前一个元素未被使用，则跳过当前循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 标记当前元素为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存子集中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存子集中移除</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"60-第-k-个排列（中等）\"><a href=\"#60-第-k-个排列（中等）\" class=\"headerlink\" title=\"60. 第 k 个排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutation-sequence/\">60. 第 k 个排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681338321.png\" alt=\"10\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>定义count值，每次找到一个全排列+1，当找到第k值后复制res返回</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (temp.size() == n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//res.add(new ArrayList&lt;&gt;(temp));</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count==k)&#123;</span><br><span class=\"line\">            temp.forEach(t-&gt;res.append(t));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unused[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.addLast(i);</span><br><span class=\"line\">        unused[i-<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        backTrace(i + <span class=\"number\">1</span>, n, k, temp,unused);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count==k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">        unused[i-<span class=\"number\">1</span>]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计数器，用于记录生成的排列数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 用于保存最终的结果</span></span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前排列的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 标记数字是否已被使用</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数生成排列</span></span><br><span class=\"line\">        backTrace(<span class=\"number\">1</span>, n, k, temp, unused);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数生成排列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已生成的排列长度为 n，则判断是否为第 k 个排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == n) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果是第 k 个排列，则将排列中的数字加入结果字符串</span></span><br><span class=\"line\">                temp.forEach(t -&gt; res.append(t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历可用的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果数字已被使用，则跳过当前循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前数字加入暂存排列中</span></span><br><span class=\"line\">            temp.addLast(i);</span><br><span class=\"line\">            unused[i - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的数字</span></span><br><span class=\"line\">            backTrace(i + <span class=\"number\">1</span>, n, k, temp, unused);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果已生成第 k 个排列，则跳出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前数字从暂存排列中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">            unused[i - <span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"93-复原-IP-地址（中等）\"><a href=\"#93-复原-IP-地址（中等）\" class=\"headerlink\" title=\"93. 复原 IP 地址（中等）\"></a><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\">93. 复原 IP 地址（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681356056.png\" alt=\"11\"></p>\n<ul>\n<li>解题思路<br><code>确定四个值组成一组唯一的ip地址</code></li>\n</ul>\n<p><code>定义ip地址中每一个值的正确判定条件</code></p>\n<p><code>适当减枝</code></p>\n<p><code>核心代码</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归函数，确定ip地址四个值</span></span><br><span class=\"line\">    backTrace(s, <span class=\"number\">0</span>, <span class=\"number\">4</span>, res, temp, length);</span><br><span class=\"line\"><span class=\"comment\">//定义ip地址中每一个值的正确判定条件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judgeIpSegment</span><span class=\"params\">(String s, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end - begin + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1</span> &amp;&amp; s.charAt(begin) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> begin; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//while (begin &lt;= end) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    res = res * 10 + s.charAt(begin) - &#x27;0&#x27;;</span></span><br><span class=\"line\">        <span class=\"comment\">//    begin++;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">0</span> &amp;&amp; res &lt;= <span class=\"number\">255</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//递归回溯</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judgeIpSegment(s, x, i)) &#123;</span><br><span class=\"line\">                temp.addLast(s.substring(x, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">                backTrace(s, i + <span class=\"number\">1</span>, k - <span class=\"number\">1</span>, res, temp, length);</span><br><span class=\"line\">                temp.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"comment\">//适当减枝</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= length || length - i &gt; k * <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">restoreIpAddresses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输入字符串的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前正在生成的 IP 地址段的双端队列</span></span><br><span class=\"line\">        Deque&lt;String&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数生成 IP 地址</span></span><br><span class=\"line\">        backTrace(s, <span class=\"number\">0</span>, <span class=\"number\">4</span>, res, temp, length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数生成 IP 地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;String&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           Deque&lt;String&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已遍历完整个字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已生成了 4 个 IP 地址段，则将当前 IP 地址加入结果列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.add(String.join(<span class=\"string\">&quot;.&quot;</span>, temp));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举下一个 IP 地址段的结束位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; x + <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果超出了字符串的长度，或者剩余的字符数大于 k*3，则跳出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= length || length - i &gt; k * <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断当前 IP 地址段是否合法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judgeIpSegment(s, x, i)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前 IP 地址段加入暂存队列</span></span><br><span class=\"line\">                temp.addLast(s.substring(x, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，生成下一个 IP 地址段</span></span><br><span class=\"line\">                backTrace(s, i + <span class=\"number\">1</span>, k - <span class=\"number\">1</span>, res, temp, length);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯操作，将当前 IP 地址段从暂存队列中移除</span></span><br><span class=\"line\">                temp.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断 IP 地址段是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judgeIpSegment</span><span class=\"params\">(String s, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IP 地址段的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end - begin + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果长度大于 1 且以 0 开头，则不合法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1</span> &amp;&amp; s.charAt(begin) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将 IP 地址段转换为整数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> begin; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断整数是否在合法的范围内</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">0</span> &amp;&amp; res &lt;= <span class=\"number\">255</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>回溯算法初探————排列、组合、子集</p>\n</blockquote>\n<h2 id=\"整体解题步骤\"><a href=\"#整体解题步骤\" class=\"headerlink\" title=\"整体解题步骤\"></a>整体解题步骤</h2><p>该类型回溯算法有统一的代码解方案</p>\n<ol>\n<li>确定题解<code>res</code>格式和部分可能解<code>temp</code>格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res</span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// temp</span></span><br><span class=\"line\">Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>确定递归调用方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定递归终止条件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定回溯位置</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        dfs(nums, len, depth + 1, path, used, res);</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>往往还涉及到unused数组的使用或者begin变量，以防止重复情况</code></p>\n<h4 id=\"46-全排列（中等）\"><a href=\"#46-全排列（中等）\" class=\"headerlink\" title=\"46. 全排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutations/\">46. 全排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681216686.png\" alt=\"1\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>标准解题步骤基础上加上unused数组，避免元素重复</code></p>\n<p><code>核心代码</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 使用一个动态数组保存所有可能的全排列</span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[len];</span><br><span class=\"line\">        Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用深度优先搜索函数</span></span><br><span class=\"line\">        dfs(nums, len, <span class=\"number\">0</span>, path, used, res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> len, <span class=\"type\">int</span> depth,</span></span><br><span class=\"line\"><span class=\"params\">                     Deque&lt;Integer&gt; path, <span class=\"type\">boolean</span>[] used,</span></span><br><span class=\"line\"><span class=\"params\">                     List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到了数组的长度，说明已经生成了一个全排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前路径中的元素添加到结果集中</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前元素加入路径中</span></span><br><span class=\"line\">                path.addLast(nums[i]);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 递归调用深度优先搜索函数，继续生成下一个位置的元素</span></span><br><span class=\"line\">                dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 回溯操作，将当前元素从路径中移除，重新设置为未使用状态</span></span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                path.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"47-全排列-II（中等）\"><a href=\"#47-全排列-II（中等）\" class=\"headerlink\" title=\"47. 全排列 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutations-ii/\">47. 全排列 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681234910.png\" alt=\"2\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>相较于全排列一，该题数字可以重复，考虑排序+从左到右第一次调用</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"> Arrays.sort(nums);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//避免重复排列</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i] || i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            backTrack(nums, res, temp, i, length, unused);</span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permuteUnique</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对数组进行排序，使相同的元素相邻，方便后续去重操作</span></span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前排列的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 记录元素是否被使用的数组</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当暂存排列的长度等于数组的长度时，说明已经生成了一个全排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前排列加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前元素已经被使用，或者是相同的元素且前一个元素未被使用，则跳过该元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i] || (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存排列中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素标记为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(nums, res, temp, i, length, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存排列中移除，重新设置为未使用状态</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"39-组合总和（中等）\"><a href=\"#39-组合总和（中等）\" class=\"headerlink\" title=\"39. 组合总和（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combination-sum/\">39. 组合总和（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681257321.png\" alt=\"4\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>以target为和，全排列去对其进行相减，当target等于0则为其中一解，当target小于0则剪枝</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        temp.addLast(candidates[i]);</span><br><span class=\"line\">        backTrack(candidates, i, target - candidates[i], res, temp);</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(candidates, <span class=\"number\">0</span>, target, res, temp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> target,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果目标值小于0，说明当前组合不满足条件，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历候选数数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(candidates[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(candidates, i, target - candidates[i], res, temp);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存组合中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"40-组合总和-II（中等）\"><a href=\"#40-组合总和-II（中等）\" class=\"headerlink\" title=\"40. 组合总和 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\">40. 组合总和 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><code>和全排列进阶一致</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        unused[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        temp.addLast(candidates[i]);</span><br><span class=\"line\">        backTrack(candidates, i + <span class=\"number\">1</span>, target - candidates[i], res, temp,unused);</span><br><span class=\"line\">        unused[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum2</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对候选数数组进行排序，为后续剪枝操作做准备</span></span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于标记候选数是否已被使用的布尔数组</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[candidates.length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(candidates, <span class=\"number\">0</span>, target, res, temp, unused);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> target,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当目标值为0时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果目标值小于0，说明当前组合不满足条件，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历候选数数组中的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 进行剪枝操作：如果当前元素与前一个元素相同，并且前一个元素未被使用，则跳过当前元素，避免重复组合</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 标记当前元素为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(candidates[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrack(candidates, i + <span class=\"number\">1</span>, target - candidates[i], res, temp, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存组合中移除，并恢复当前元素的未使用状态</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"77-组合（中等）\"><a href=\"#77-组合（中等）\" class=\"headerlink\" title=\"77. 组合（中等）\"></a><a href=\"https://leetcode-cn.com/problems/combinations/\">77. 组合（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681281060.png\" alt=\"7\"></p>\n<ul>\n<li>经典全排列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combine</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前组合的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrack(<span class=\"number\">1</span>, n, k, res, temp);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">        System.out.println(res.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrack</span><span class=\"params\">(<span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当暂存组合的大小等于 k 时，说明已经生成了一个满足条件的组合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == k) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前组合加入结果列表</span></span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历可选的数字范围</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt;= n - (k - temp.size()) + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前数字加入暂存组合中</span></span><br><span class=\"line\">            temp.addLast(i);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的数字</span></span><br><span class=\"line\">            backTrack(i + <span class=\"number\">1</span>, n, k, res, temp);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前数字从暂存组合中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"78-子集（中等）\"><a href=\"#78-子集（中等）\" class=\"headerlink\" title=\"78. 子集（中等）\"></a><a href=\"https://leetcode-cn.com/problems/subsets/\">78. 子集（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681296977.png\" alt=\"8\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>此处回溯要注意begin变量的设置，可保证集合的非重复性</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">    temp.addLast(nums[i]);</span><br><span class=\"line\">    backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">    temp.removeLast();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前子集的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrace(nums, res, temp, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前子集加入结果列表</span></span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存子集中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存子集中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"90-子集-II（中等）\"><a href=\"#90-子集-II（中等）\" class=\"headerlink\" title=\"90. 子集 II（中等）\"></a><a href=\"https://leetcode-cn.com/problems/subsets-ii/\">90. 子集 II（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681314905.png\" alt=\"9\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>该题加了可重复限制条件，整体和全排列2类似，先排序+只允许从左到右排列</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span>&amp;&amp;nums[i]==nums[i-<span class=\"number\">1</span>]&amp;&amp;!unused[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unused[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    temp.addLast(nums[i]);</span><br><span class=\"line\">    backTrace(nums,res,temp,i+<span class=\"number\">1</span>,length,unused);</span><br><span class=\"line\">    unused[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    temp.removeLast();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsetsWithDup</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对数组进行排序</span></span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前子集的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"comment\">// 标记数组中的元素是否已被使用</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[length];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数</span></span><br><span class=\"line\">        backTrace(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;List&lt;Integer&gt;&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前子集加入结果列表</span></span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(temp));</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前元素与前一个元素相等，并且前一个元素未被使用，则跳过当前循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; !unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 标记当前元素为已使用</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前元素加入暂存子集中</span></span><br><span class=\"line\">            temp.addLast(nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的元素</span></span><br><span class=\"line\">            backTrace(nums, res, temp, i + <span class=\"number\">1</span>, length, unused);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前元素从暂存子集中移除</span></span><br><span class=\"line\">            unused[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"60-第-k-个排列（中等）\"><a href=\"#60-第-k-个排列（中等）\" class=\"headerlink\" title=\"60. 第 k 个排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/permutation-sequence/\">60. 第 k 个排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681338321.png\" alt=\"10\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p><code>定义count值，每次找到一个全排列+1，当找到第k值后复制res返回</code></p>\n<p><code>核心代码：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (temp.size() == n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//res.add(new ArrayList&lt;&gt;(temp));</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count==k)&#123;</span><br><span class=\"line\">            temp.forEach(t-&gt;res.append(t));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unused[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.addLast(i);</span><br><span class=\"line\">        unused[i-<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        backTrace(i + <span class=\"number\">1</span>, n, k, temp,unused);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count==k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.removeLast();</span><br><span class=\"line\">        unused[i-<span class=\"number\">1</span>]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计数器，用于记录生成的排列数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 用于保存最终的结果</span></span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前排列的链表</span></span><br><span class=\"line\">        LinkedList&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 标记数字是否已被使用</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] unused = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数生成排列</span></span><br><span class=\"line\">        backTrace(<span class=\"number\">1</span>, n, k, temp, unused);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数生成排列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(<span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           LinkedList&lt;Integer&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">boolean</span>[] unused)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已生成的排列长度为 n，则判断是否为第 k 个排列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.size() == n) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果是第 k 个排列，则将排列中的数字加入结果字符串</span></span><br><span class=\"line\">                temp.forEach(t -&gt; res.append(t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历可用的数字</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果数字已被使用，则跳过当前循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unused[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前数字加入暂存排列中</span></span><br><span class=\"line\">            temp.addLast(i);</span><br><span class=\"line\">            unused[i - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，生成下一个位置的数字</span></span><br><span class=\"line\">            backTrace(i + <span class=\"number\">1</span>, n, k, temp, unused);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果已生成第 k 个排列，则跳出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 回溯操作，将当前数字从暂存排列中移除</span></span><br><span class=\"line\">            temp.removeLast();</span><br><span class=\"line\">            unused[i - <span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"93-复原-IP-地址（中等）\"><a href=\"#93-复原-IP-地址（中等）\" class=\"headerlink\" title=\"93. 复原 IP 地址（中等）\"></a><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\">93. 复原 IP 地址（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94flood-fill%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-1701681356056.png\" alt=\"11\"></p>\n<ul>\n<li>解题思路<br><code>确定四个值组成一组唯一的ip地址</code></li>\n</ul>\n<p><code>定义ip地址中每一个值的正确判定条件</code></p>\n<p><code>适当减枝</code></p>\n<p><code>核心代码</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归函数，确定ip地址四个值</span></span><br><span class=\"line\">    backTrace(s, <span class=\"number\">0</span>, <span class=\"number\">4</span>, res, temp, length);</span><br><span class=\"line\"><span class=\"comment\">//定义ip地址中每一个值的正确判定条件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judgeIpSegment</span><span class=\"params\">(String s, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end - begin + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1</span> &amp;&amp; s.charAt(begin) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> begin; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//while (begin &lt;= end) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    res = res * 10 + s.charAt(begin) - &#x27;0&#x27;;</span></span><br><span class=\"line\">        <span class=\"comment\">//    begin++;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">0</span> &amp;&amp; res &lt;= <span class=\"number\">255</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//递归回溯</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judgeIpSegment(s, x, i)) &#123;</span><br><span class=\"line\">                temp.addLast(s.substring(x, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">                backTrace(s, i + <span class=\"number\">1</span>, k - <span class=\"number\">1</span>, res, temp, length);</span><br><span class=\"line\">                temp.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"comment\">//适当减枝</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= length || length - i &gt; k * <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">restoreIpAddresses</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输入字符串的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"comment\">// 用于保存结果的列表</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 用于暂存当前正在生成的 IP 地址段的双端队列</span></span><br><span class=\"line\">        Deque&lt;String&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用回溯函数生成 IP 地址</span></span><br><span class=\"line\">        backTrace(s, <span class=\"number\">0</span>, <span class=\"number\">4</span>, res, temp, length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数生成 IP 地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> x,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> k,</span></span><br><span class=\"line\"><span class=\"params\">                           ArrayList&lt;String&gt; res,</span></span><br><span class=\"line\"><span class=\"params\">                           Deque&lt;String&gt; temp,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已遍历完整个字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已生成了 4 个 IP 地址段，则将当前 IP 地址加入结果列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.add(String.join(<span class=\"string\">&quot;.&quot;</span>, temp));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举下一个 IP 地址段的结束位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> x; i &lt; x + <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果超出了字符串的长度，或者剩余的字符数大于 k*3，则跳出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= length || length - i &gt; k * <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断当前 IP 地址段是否合法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judgeIpSegment(s, x, i)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前 IP 地址段加入暂存队列</span></span><br><span class=\"line\">                temp.addLast(s.substring(x, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，生成下一个 IP 地址段</span></span><br><span class=\"line\">                backTrace(s, i + <span class=\"number\">1</span>, k - <span class=\"number\">1</span>, res, temp, length);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯操作，将当前 IP 地址段从暂存队列中移除</span></span><br><span class=\"line\">                temp.removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断 IP 地址段是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judgeIpSegment</span><span class=\"params\">(String s, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IP 地址段的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end - begin + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果长度大于 1 且以 0 开头，则不合法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1</span> &amp;&amp; s.charAt(begin) == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将 IP 地址段转换为整数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> begin; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            res = res * <span class=\"number\">10</span> + s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断整数是否在合法的范围内</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">0</span> &amp;&amp; res &lt;= <span class=\"number\">255</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"umi-max的简易数据流方案","keywords":"umi，数据流","description":"umi数据流方案记录","top_img":"/img/qianduan.png","comments":1,"cover":"/img/qianduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-04T08:53:01.000Z","_content":"\n> 相信很多react初学者都有一段刻骨铭心的数据流学习经历，不用多说，从redux到mobx再到dva，真的很痛苦，全局数据流作为react开发中必不可少的一环，当然是越简单越好，所以，model诞生了，作为umi Max的内置全局数据流方案，他是我目前见过最简易的，相信也是公认最简易的\n\n### umi max-------model简介\n\n`@umi/max` 内置了**数据流管理**插件，它是一种基于 `hooks` 范式的轻量级数据管理方案，可以在 Umi 项目中管理全局的共享数据。\n\n### model使用\n1. 创建model\n   数据流管理插件采用约定式目录结构，我们约定可以在 `src/models`, `src/pages/xxxx/models/`目录中，和 `src/pages/xxxx/model.{js,jsx,ts,tsx}` 文件引入 Model 文件。 Model 文件允许使用 `.(tsx|ts|jsx|js)` 四种后缀格式，**命名空间（namespace）**  生成规则如下。\n\n\n![2](../images/umi-max的简易数据流方案-1701680109557.png)\n\n`此处恰恰体现了model这种全局数据流方案最最最令人震惊的一点-------他就是自定义一个hooks，没有其他任何所谓的“黑魔法”`\n```\n// src/models/userModel.ts\nexport default () => {\nconst user = { username: 'umi', \n};\n\nreturn { user };\n};\n```\n\n`注意此处一定要写成函数式写法，不要形成dva惯性，写成下面这样（不要问我怎么知道的，我被折磨几天）`\n```\nexport default {\n    namespace: 'write',\n```\numi官网也给了很足的提示\n\n![1](../images/umi-max的简易数据流方案-1701680121582.png)\n\n2.model的高级使用\n- Model中是允许使用其他hooks的，这就意味着你直接把塔当成一个没有return的函数组件，随便写函数\n\n官网告诉你可以这样用\n```\n// src/models/counterModel.ts\nimport { useState, useCallback } from 'react';\n\nexport default () => {\n  const [counter, setCounter] = useState(0);\n\n  const increment = useCallback(() => setCounter((c) => c + 1), []);\n  const decrement = useCallback(() => setCounter((c) => c - 1), []);\n\n  return { counter, increment, decrement };\n};\n```\n\n我告诉你不仅可以定义hook，还可以这样用\n```\nexport default () => {\n  const [name, setName] = useState<string>(DEFAULT_NAME);\n\n  const test=(value:string)=>{\n   console.log(value)\n  }\n  return {\n    name,\n    setName,\n    test\n  };\n};\n```\n`是不是感觉瞬间明朗起来`\n3. 使用model\n   `其实就一行简单代码，你函数return了什么，就可以用什么`\n```\nconst { user, loading } = useModel('userModel');\n```\n\n4.一点性能优化\n```\n// src/components/CounterActions/index.tsx\nimport { useModel } from 'umi';\n\nexport default () => {\n  const { add, minus } = useModel('counterModel', (model) => ({\n    add: model.increment,\n    minus: model.decrement,\n  }));\n\n  return (\n      <div>\n          <button onClick={add}>add by 1</button>\n  <button onClick={minus}>minus by 1</button>\n  </div>\n);\n};\n```\n\n","source":"_posts/umi-max的简易数据流方案.md","raw":"---\ntitle: umi-max的简易数据流方案\ntags: \n   - umi\n   - react\ncategories: 前端\nkeywords: umi，数据流\ndescription: umi数据流方案记录\ntop_img: /img/qianduan.png\ncomments: true\ncover: /img/qianduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-04 16:53:01\n---\n\n> 相信很多react初学者都有一段刻骨铭心的数据流学习经历，不用多说，从redux到mobx再到dva，真的很痛苦，全局数据流作为react开发中必不可少的一环，当然是越简单越好，所以，model诞生了，作为umi Max的内置全局数据流方案，他是我目前见过最简易的，相信也是公认最简易的\n\n### umi max-------model简介\n\n`@umi/max` 内置了**数据流管理**插件，它是一种基于 `hooks` 范式的轻量级数据管理方案，可以在 Umi 项目中管理全局的共享数据。\n\n### model使用\n1. 创建model\n   数据流管理插件采用约定式目录结构，我们约定可以在 `src/models`, `src/pages/xxxx/models/`目录中，和 `src/pages/xxxx/model.{js,jsx,ts,tsx}` 文件引入 Model 文件。 Model 文件允许使用 `.(tsx|ts|jsx|js)` 四种后缀格式，**命名空间（namespace）**  生成规则如下。\n\n\n![2](../images/umi-max的简易数据流方案-1701680109557.png)\n\n`此处恰恰体现了model这种全局数据流方案最最最令人震惊的一点-------他就是自定义一个hooks，没有其他任何所谓的“黑魔法”`\n```\n// src/models/userModel.ts\nexport default () => {\nconst user = { username: 'umi', \n};\n\nreturn { user };\n};\n```\n\n`注意此处一定要写成函数式写法，不要形成dva惯性，写成下面这样（不要问我怎么知道的，我被折磨几天）`\n```\nexport default {\n    namespace: 'write',\n```\numi官网也给了很足的提示\n\n![1](../images/umi-max的简易数据流方案-1701680121582.png)\n\n2.model的高级使用\n- Model中是允许使用其他hooks的，这就意味着你直接把塔当成一个没有return的函数组件，随便写函数\n\n官网告诉你可以这样用\n```\n// src/models/counterModel.ts\nimport { useState, useCallback } from 'react';\n\nexport default () => {\n  const [counter, setCounter] = useState(0);\n\n  const increment = useCallback(() => setCounter((c) => c + 1), []);\n  const decrement = useCallback(() => setCounter((c) => c - 1), []);\n\n  return { counter, increment, decrement };\n};\n```\n\n我告诉你不仅可以定义hook，还可以这样用\n```\nexport default () => {\n  const [name, setName] = useState<string>(DEFAULT_NAME);\n\n  const test=(value:string)=>{\n   console.log(value)\n  }\n  return {\n    name,\n    setName,\n    test\n  };\n};\n```\n`是不是感觉瞬间明朗起来`\n3. 使用model\n   `其实就一行简单代码，你函数return了什么，就可以用什么`\n```\nconst { user, loading } = useModel('userModel');\n```\n\n4.一点性能优化\n```\n// src/components/CounterActions/index.tsx\nimport { useModel } from 'umi';\n\nexport default () => {\n  const { add, minus } = useModel('counterModel', (model) => ({\n    add: model.increment,\n    minus: model.decrement,\n  }));\n\n  return (\n      <div>\n          <button onClick={add}>add by 1</button>\n  <button onClick={minus}>minus by 1</button>\n  </div>\n);\n};\n```\n\n","slug":"umi-max的简易数据流方案","published":1,"updated":"2023-12-05T03:06:28.536Z","_id":"clpqoimj100040cpkgmm04u67","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>相信很多react初学者都有一段刻骨铭心的数据流学习经历，不用多说，从redux到mobx再到dva，真的很痛苦，全局数据流作为react开发中必不可少的一环，当然是越简单越好，所以，model诞生了，作为umi Max的内置全局数据流方案，他是我目前见过最简易的，相信也是公认最简易的</p>\n</blockquote>\n<h3 id=\"umi-max——-model简介\"><a href=\"#umi-max——-model简介\" class=\"headerlink\" title=\"umi max——-model简介\"></a>umi max——-model简介</h3><p><code>@umi/max</code> 内置了<strong>数据流管理</strong>插件，它是一种基于 <code>hooks</code> 范式的轻量级数据管理方案，可以在 Umi 项目中管理全局的共享数据。</p>\n<h3 id=\"model使用\"><a href=\"#model使用\" class=\"headerlink\" title=\"model使用\"></a>model使用</h3><ol>\n<li>创建model<br>数据流管理插件采用约定式目录结构，我们约定可以在 <code>src/models</code>, <code>src/pages/xxxx/models/</code>目录中，和 <code>src/pages/xxxx/model.&#123;js,jsx,ts,tsx&#125;</code> 文件引入 Model 文件。 Model 文件允许使用 <code>.(tsx|ts|jsx|js)</code> 四种后缀格式，<strong>命名空间（namespace）</strong>  生成规则如下。</li>\n</ol>\n<p><img src=\"/../images/umi-max%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E6%B5%81%E6%96%B9%E6%A1%88-1701680109557.png\" alt=\"2\"></p>\n<p><code>此处恰恰体现了model这种全局数据流方案最最最令人震惊的一点-------他就是自定义一个hooks，没有其他任何所谓的“黑魔法”</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/models/userModel.ts</span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">const user = &#123; username: &#x27;umi&#x27;, </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123; user &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>注意此处一定要写成函数式写法，不要形成dva惯性，写成下面这样（不要问我怎么知道的，我被折磨几天）</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    namespace: &#x27;write&#x27;,</span><br></pre></td></tr></table></figure>\n<p>umi官网也给了很足的提示</p>\n<p><img src=\"/../images/umi-max%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E6%B5%81%E6%96%B9%E6%A1%88-1701680121582.png\" alt=\"1\"></p>\n<p>2.model的高级使用</p>\n<ul>\n<li>Model中是允许使用其他hooks的，这就意味着你直接把塔当成一个没有return的函数组件，随便写函数</li>\n</ul>\n<p>官网告诉你可以这样用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/models/counterModel.ts</span><br><span class=\"line\">import &#123; useState, useCallback &#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const [counter, setCounter] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment = useCallback(() =&gt; setCounter((c) =&gt; c + 1), []);</span><br><span class=\"line\">  const decrement = useCallback(() =&gt; setCounter((c) =&gt; c - 1), []);</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123; counter, increment, decrement &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我告诉你不仅可以定义hook，还可以这样用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const [name, setName] = useState&lt;string&gt;(DEFAULT_NAME);</span><br><span class=\"line\"></span><br><span class=\"line\">  const test=(value:string)=&gt;&#123;</span><br><span class=\"line\">   console.log(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    setName,</span><br><span class=\"line\">    test</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>是不是感觉瞬间明朗起来</code><br>3. 使用model<br>   <code>其实就一行简单代码，你函数return了什么，就可以用什么</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; user, loading &#125; = useModel(&#x27;userModel&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>4.一点性能优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/CounterActions/index.tsx</span><br><span class=\"line\">import &#123; useModel &#125; from &#x27;umi&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const &#123; add, minus &#125; = useModel(&#x27;counterModel&#x27;, (model) =&gt; (&#123;</span><br><span class=\"line\">    add: model.increment,</span><br><span class=\"line\">    minus: model.decrement,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;add&#125;&gt;add by 1&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;minus&#125;&gt;minus by 1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>相信很多react初学者都有一段刻骨铭心的数据流学习经历，不用多说，从redux到mobx再到dva，真的很痛苦，全局数据流作为react开发中必不可少的一环，当然是越简单越好，所以，model诞生了，作为umi Max的内置全局数据流方案，他是我目前见过最简易的，相信也是公认最简易的</p>\n</blockquote>\n<h3 id=\"umi-max——-model简介\"><a href=\"#umi-max——-model简介\" class=\"headerlink\" title=\"umi max——-model简介\"></a>umi max——-model简介</h3><p><code>@umi/max</code> 内置了<strong>数据流管理</strong>插件，它是一种基于 <code>hooks</code> 范式的轻量级数据管理方案，可以在 Umi 项目中管理全局的共享数据。</p>\n<h3 id=\"model使用\"><a href=\"#model使用\" class=\"headerlink\" title=\"model使用\"></a>model使用</h3><ol>\n<li>创建model<br>数据流管理插件采用约定式目录结构，我们约定可以在 <code>src/models</code>, <code>src/pages/xxxx/models/</code>目录中，和 <code>src/pages/xxxx/model.&#123;js,jsx,ts,tsx&#125;</code> 文件引入 Model 文件。 Model 文件允许使用 <code>.(tsx|ts|jsx|js)</code> 四种后缀格式，<strong>命名空间（namespace）</strong>  生成规则如下。</li>\n</ol>\n<p><img src=\"/../images/umi-max%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E6%B5%81%E6%96%B9%E6%A1%88-1701680109557.png\" alt=\"2\"></p>\n<p><code>此处恰恰体现了model这种全局数据流方案最最最令人震惊的一点-------他就是自定义一个hooks，没有其他任何所谓的“黑魔法”</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/models/userModel.ts</span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">const user = &#123; username: &#x27;umi&#x27;, </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">return &#123; user &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>注意此处一定要写成函数式写法，不要形成dva惯性，写成下面这样（不要问我怎么知道的，我被折磨几天）</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">    namespace: &#x27;write&#x27;,</span><br></pre></td></tr></table></figure>\n<p>umi官网也给了很足的提示</p>\n<p><img src=\"/../images/umi-max%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E6%B5%81%E6%96%B9%E6%A1%88-1701680121582.png\" alt=\"1\"></p>\n<p>2.model的高级使用</p>\n<ul>\n<li>Model中是允许使用其他hooks的，这就意味着你直接把塔当成一个没有return的函数组件，随便写函数</li>\n</ul>\n<p>官网告诉你可以这样用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/models/counterModel.ts</span><br><span class=\"line\">import &#123; useState, useCallback &#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const [counter, setCounter] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  const increment = useCallback(() =&gt; setCounter((c) =&gt; c + 1), []);</span><br><span class=\"line\">  const decrement = useCallback(() =&gt; setCounter((c) =&gt; c - 1), []);</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123; counter, increment, decrement &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我告诉你不仅可以定义hook，还可以这样用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const [name, setName] = useState&lt;string&gt;(DEFAULT_NAME);</span><br><span class=\"line\"></span><br><span class=\"line\">  const test=(value:string)=&gt;&#123;</span><br><span class=\"line\">   console.log(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    setName,</span><br><span class=\"line\">    test</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>是不是感觉瞬间明朗起来</code><br>3. 使用model<br>   <code>其实就一行简单代码，你函数return了什么，就可以用什么</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; user, loading &#125; = useModel(&#x27;userModel&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>4.一点性能优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/CounterActions/index.tsx</span><br><span class=\"line\">import &#123; useModel &#125; from &#x27;umi&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const &#123; add, minus &#125; = useModel(&#x27;counterModel&#x27;, (model) =&gt; (&#123;</span><br><span class=\"line\">    add: model.increment,</span><br><span class=\"line\">    minus: model.decrement,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;add&#125;&gt;add by 1&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onClick=&#123;minus&#125;&gt;minus by 1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"回溯——flood fill、字符串","keywords":"就业, 回溯, 刷题","description":"回溯章节的flood fill、字符串全刷篇","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-04T08:51:49.000Z","_content":"\n\n> 回溯算法初探————flood fill、字符串\n\n\n## 整体解题步骤\n回溯算法有统一的代码解方案\n1. 确定题解`res`格式和部分可能解`temp`格式\n\n```java\n// res\nList<List<Integer>> res = new ArrayList<>();\n// temp\nDeque<Integer> path = new ArrayDeque<>(len);\n```\n2. 确定递归调用方法\n\n```java\nbackTrack(nums, res, temp, 0, length, unused);\n```\n3. 指定递归终止条件\n\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n```\n4. 确定回溯位置\n\n```java\n        for (int i = 0; i < len; i++) {\n                path.addLast(nums[i]);\n                dfs(nums, len, depth + 1, path, used, res);\n                path.removeLast();\n            }\n        }\n```\n\n`往往还涉及到unused数组的使用或者begin变量，以防止重复情况`\n\n\n#### [17. 电话号码的字母组合（中等）](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n- 题目介绍\n\n\n![1](../images/回溯——排列、组合、子集-1701680751840.png)\n\n- 解题思路\n\n1. 将电话簿信息填入哈希表\n\n```java\n        HashMap<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n```\n2. 每个数字对应的字母向后递归回溯\n\n```java\n            char c = digits.charAt(index);\n            String s = map.get(c);\n            for (int i = 0; i < s.length(); i++) {\n                stringBuilder.append(s.charAt(i));\n                backTrace(digits, map, index + 1, stringBuilder, res);\n                stringBuilder.deleteCharAt(index);\n            }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        // 创建一个HashMap用于存储数字与对应的字符组合\n        HashMap<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n\n        // 如果输入的字符串长度为0，直接返回一个空的ArrayList\n        if (digits.length()==0){\n            return new ArrayList<>();\n        }\n\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n\n        // 创建一个StringBuilder用于构建字符组合\n        StringBuilder stringBuilder = new StringBuilder();\n\n        // 调用backTrace方法进行回溯计算\n        backTrace(digits, map, 0, stringBuilder, res);\n\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String digits, HashMap<Character, String> map, int index, StringBuilder stringBuilder, ArrayList<String> res) {\n        // 如果字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (stringBuilder.length() == digits.length()) {\n            res.add(stringBuilder.toString());\n        } else {\n            // 获取当前索引对应的数字字符\n            char c = digits.charAt(index);\n            // 根据数字字符获取对应的字符组合\n            String s = map.get(c);\n            // 遍历字符组合中的每个字符\n            for (int i = 0; i < s.length(); i++) {\n                // 将当前字符添加到字符串构建器中\n                stringBuilder.append(s.charAt(i));\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(digits, map, index + 1, stringBuilder, res);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                stringBuilder.deleteCharAt(index);\n            }\n        }\n    }\n}\n```\n\n#### [784. 字母大小写全排列（中等）](https://leetcode-cn.com/problems/letter-case-permutation/)\n\n- 题目介绍\n\n\n![2](../images/回溯——排列、组合、子集-1701680779347.png)\n\n- 解题思路\n\n1. 确认当前位数的字符是否为字母，分区向后递归回溯\n\n```java\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        temp.append(c);\n                        backTrace(s, res, temp, index+1);\n                        temp.deleteCharAt(index);\n                    } else {\n                        temp.append((char)(c + 32));\n                        backTrace(s, res, temp, index+1);\n                        temp.deleteCharAt(index);\n                    }\n                }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> letterCasePermutation(String s) {\n        // 创建一个StringBuilder用于临时存储字符组合\n        StringBuilder temp = new StringBuilder();\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 调用backTrace方法进行回溯计算\n        backTrace(s, res, temp, 0);\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String s, ArrayList<String> res, StringBuilder temp, int index) {\n        // 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (temp.length() == s.length()) {\n            res.add(temp.toString());\n        } else {\n            // 获取当前索引对应的字符\n            char c = s.charAt(index);\n            // 判断字符是否为大写字母\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                // 遍历两种情况：保持原字符和转换为小写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为小写字母\n                        temp.append((char)(c + 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            }\n            // 判断字符是否为小写字母\n            else if (c - 'a' <= 26 && c - 'a' >= 0) {\n                // 遍历两种情况：保持原字符和转换为大写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为大写字母\n                        temp.append((char) (c - 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            } else {\n                // 如果字符不是字母，则保持原字符\n                temp.append(c);\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(s, res, temp, index+1);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                temp.deleteCharAt(index);\n            }\n        }\n    }\n}\nclass Solution {\n    public List<String> letterCasePermutation(String s) {\n        // 创建一个StringBuilder用于临时存储字符组合\n        StringBuilder temp = new StringBuilder();\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 调用backTrace方法进行回溯计算\n        backTrace(s, res, temp, 0);\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String s, ArrayList<String> res, StringBuilder temp, int index) {\n        // 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (temp.length() == s.length()) {\n            res.add(temp.toString());\n        } else {\n            // 获取当前索引对应的字符\n            char c = s.charAt(index);\n            // 判断字符是否为大写字母\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                // 遍历两种情况：保持原字符和转换为小写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为小写字母\n                        temp.append((char)(c + 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            }\n            // 判断字符是否为小写字母\n            else if (c - 'a' <= 26 && c - 'a' >= 0) {\n                // 遍历两种情况：保持原字符和转换为大写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为大写字母\n                        temp.append((char) (c - 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            } else {\n                // 如果字符不是字母，则保持原字符\n                temp.append(c);\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(s, res, temp, index+1);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                temp.deleteCharAt(index);\n            }\n        }\n    }\n}\n```\n\n#### [22. 括号生成（中等）](https://leetcode-cn.com/problems/generate-parentheses/)\n\n- 题目介绍\n\n\n![4](../images/回溯——排列、组合、子集-1701680799652.png)\n\n- 解题思路\n\n1. 该题结果就两种字符类型，且左括号和右括号数相等，考虑分区\n\n```java\n        backTrace(res, temp, n, n);\n```\n\n2. 左括号在前，所有让左括号先作递归回溯\n\n```java\n        if (left > 0) {\n            temp.append(\"(\");\n            backTrace(res, temp, left - 1, right);\n            temp.deleteCharAt(temp.length() - 1);\n        }\n\n        if (right > 0) {\n            temp.append(\")\");\n            backTrace(res, temp, left, right - 1);\n            temp.deleteCharAt(temp.length() - 1);\n        }\n```\n\n3. 当右括号数大于左括号时进行剪枝，防止右括号在左括号前面（`不匹配`）的情况\n```\n        if (left>right){\n            return;\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 创建一个StringBuilder用于临时存储括号组合\n        StringBuilder temp = new StringBuilder();\n\n        // 调用backTrace方法进行回溯计算\n\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成有效的括号组合\n    private void backTrace(ArrayList<String> res, StringBuilder temp, int left, int right) {\n        // 如果左括号和右括号都用完了，说明已经生成了一个有效的括号组合，将其添加到结果列表中\n        if (left == 0 && right == 0) {\n            res.add(temp.toString());\n        }\n\n        // 如果左括号的数量大于右括号的数量，说明生成的括号组合是无效的，直接返回\n        if (left > right) {\n            return;\n        }\n\n        // 如果还有剩余的左括号，可以添加一个左括号\n        if (left > 0) {\n            temp.append(\"(\");\n            // 递归调用回溯函数，将左括号的数量减1，继续生成下一个括号组合\n            backTrace(res, temp, left - 1, right);\n            // 回溯，删除刚刚添加的左括号，尝试生成其他括号组合\n            temp.deleteCharAt(temp.length() - 1);\n        }\n\n        // 如果还有剩余的右括号，可以添加一个右括号\n        if (right > 0) {\n            temp.append(\")\");\n            // 递归调用回溯函数，将右括号的数量减1，继续生成下一个括号组合\n            backTrace(res, temp, left, right - 1);\n            // 回溯，删除刚刚添加的右括号，尝试生成其他括号组合\n            temp.deleteCharAt(temp.length() - 1);\n        }\n    }\n}\n```\n\n####  [733. 图像渲染（Flood Fill，中等）](https://leetcode-cn.com/problems/flood-fill/)\n\n- 题目介绍\n\n\n![6](../images/回溯——排列、组合、子集-1701680821919.png)\n\n- 解题思路\n\n1. 设立四个方向的跳跃数组，向四周递归回溯\n\n```java\n    int[] dx = {0, 0, 1, -1};\n    int[] dy = {1, -1, 0, 0};\n\n\n        if (image[sr][sc] != preColor) {\n            return;\n        }\n        image[sr][sc] = color;\n        for (int i = 0; i < 4; i++) {\n            int newSr = sr + dx[i];\n            int newSc = sc + dy[i];\n            dfs(image, newSr, newSc, color, preColor);\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {0, 0, 1, -1};\n    // 定义垂直方向的增量数组\n    int[] dy = {1, -1, 0, 0};\n\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        // 获取起始点的颜色\n        int preColor = image[sr][sc];\n        // 如果起始点的颜色已经是目标颜色，直接返回图像\n        if (preColor == color) {\n            return image;\n        }\n        // 调用dfs方法进行深度优先搜索\n        dfs(image, sr, sc, color, preColor);\n        // 返回修改后的图像\n        return image;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(int[][] image, int sr, int sc, int color, int preColor) {\n        // 判断当前点是否越界\n        if (sr >= image.length || sr < 0 || sc >= image[0].length || sc < 0) {\n            return;\n        }\n        // 判断当前点的颜色是否与起始点的颜色相同\n        if (image[sr][sc] != preColor) {\n            return;\n        }\n        // 修改当前点的颜色为目标颜色\n        image[sr][sc] = color;\n        // 遍历四个方向，进行递归搜索\n        for (int i = 0; i < 4; i++) {\n            int newSr = sr + dx[i];\n            int newSc = sc + dy[i];\n            dfs(image, newSr, newSc, color, preColor);\n        }\n    }\n}\n```\n\n####  [200. 岛屿数量（中等）](https://leetcode-cn.com/problems/number-of-islands/)\n\n- 题目介绍\n\n\n![7](../images/回溯——排列、组合、子集-1701680842452.png)\n\n- 解题思路\n\n\n1.每找到一块陆地边界，则进行递归回溯操作\n\n```java\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1') {\n                    dfs(grid, i, j);\n                    count++;\n                }\n            }\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n    // 定义岛屿数量的计数器\n    int count;\n\n    public int numIslands(char[][] grid) {\n        // 初始化岛屿数量计数器\n        this.count = 0;\n        // 遍历整个二维网格\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                // 如果当前位置是陆地，则进行深度优先搜索\n                if (grid[i][j] == '1') {\n                    dfs(grid, i, j);\n                    // 搜索完成后，岛屿数量加1\n                    count++;\n                }\n            }\n        }\n        // 返回岛屿数量\n        return count;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(char[][] grid, int i, int j) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {\n            return;\n        }\n        // 如果当前位置是水域，则直接返回\n        if (grid[i][j] == '0') {\n            return;\n        }\n        // 将当前位置标记为水域\n        grid[i][j] = '0';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int sx = dx[k] + i;\n            int sy = dy[k] + j;\n            dfs(grid, sx, sy);\n        }\n    }\n}\n```\n\n####   [130. 被围绕的区域（中等）](https://leetcode-cn.com/problems/surrounded-regions/)\n\n- 题目介绍\n\n\n![8](../images/回溯——排列、组合、子集-1701680859373.png)\n\n- 解题思路\n\n1.对原来的数组进行拷贝，遍历拷贝数组的边界点找值进行递归回溯\n```java\n        char[][] copyOf=new char[board.length][board[0].length];\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                copyOf[i][j]=board[i][j];\n            }\n        }\n        for (int i = 0; i < board.length; i++) {\n            dfs(copyOf, i, 0);\n            dfs(copyOf, i, board[0].length - 1);\n        }\n        for (int i = 0; i < board[0].length; i++) {\n            dfs(copyOf, 0, i);\n            dfs(copyOf, board.length - 1, i);\n        }\n```\n2. 此时拷贝数组中剩余的点则为答案值，对原数组进行赋值操作\n\n```java\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (copyOf[i][j]=='O'){\n                    board[i][j]='X';\n                }\n            }\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n\n    public void solve(char[][] board) {\n        // 创建一个与原始二维数组相同大小的副本数组\n        char[][] copyOf = new char[board.length][board[0].length];\n        // 将原始数组的值复制到副本数组中\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                copyOf[i][j] = board[i][j];\n            }\n        }\n        // 遍历副本数组的边界，对边界上的 'O' 进行深度优先搜索\n        for (int i = 0; i < board.length; i++) {\n            dfs(copyOf, i, 0);\n            dfs(copyOf, i, board[0].length - 1);\n        }\n        for (int i = 0; i < board[0].length; i++) {\n            dfs(copyOf, 0, i);\n            dfs(copyOf, board.length - 1, i);\n        }\n        // 遍历原始数组，将副本数组中的 'O' 修改为 'X'\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (copyOf[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n\n    // 深度优先搜索函数\n    private void dfs(char[][] board, int i, int j) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {\n            return;\n        }\n        // 如果当前位置为 'X'，则直接返回\n        if (board[i][j] == 'X') {\n            return;\n        }\n        // 修改当前位置为 'X'\n        board[i][j] = 'X';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int sx = dx[k] + i;\n            int sy = dy[k] + j;\n            dfs(board, sx, sy);\n        }\n    }\n}\n```\n\n####   [79. 单词搜索（中等）](https://leetcode-cn.com/problems/word-search/)\n\n- 题目介绍\n\n\n![9](../images/回溯——排列、组合、子集-1701680879514.png)\n\n- 解题思路\n\n1. 在二维数组中找目标字符串的起始值，找到后对当前值置零进行递归，回溯时当值改回\n\n```java\n        if (chars[index] != board[i][j]) {\n            return;\n        }\n        if (index == length - 1) {\n            res = true;\n            return;\n        }\n        index += 1;\n        char pre = board[i][j];\n        board[i][j] = '0';\n        for (int k = 0; k < 4; k++) {\n            int newI = dx[k] + i;\n            int newJ = dy[k] + j;\n            dfs(board, newI, newJ, index, length, chars);\n        }\n        board[i][j] = pre;\n```\n- 设置全局bool变量，当找到完整字符串则赋值true\n\n```java\n int[] dx = {1, -1, 0, 0};\n    int[] dy = {0, 0, 1, -1};\n    boolean res = false;\n\n    public boolean exist(char[][] board, String word) {\n        char[] chars = word.toCharArray();\n        int length = chars.length;\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (chars[0] == board[i][j]) {\n                    dfs(board, i, j, 0, length, chars);\n                }\n            }\n        }\n        return res;\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n    // 定义结果变量\n    boolean res = false;\n\n    public boolean exist(char[][] board, String word) {\n        // 将目标字符串转换为字符数组\n        char[] chars = word.toCharArray();\n        // 获取字符数组的长度\n        int length = chars.length;\n        // 遍历二维数组\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                // 如果第一个字符匹配，开始深度优先搜索\n                if (chars[0] == board[i][j]) {\n                    dfs(board, i, j, 0, length, chars);\n                }\n            }\n        }\n        // 返回结果\n        return res;\n    }\n\n    private void dfs(char[][] board,\n                     int i,\n                     int j,\n                     int index,\n                     int length,\n                     char[] chars) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {\n            return;\n        }\n        // 判断当前位置的字符是否匹配\n        if (chars[index] != board[i][j]) {\n            return;\n        }\n        // 如果已经匹配到目标字符串的最后一个字符，设置结果为 true，返回\n        if (index == length - 1) {\n            res = true;\n            return;\n        }\n        // 增加索引，保存当前位置的字符，将当前位置标记为已访问\n        index += 1;\n        char pre = board[i][j];\n        board[i][j] = '0';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int newI = dx[k] + i;\n            int newJ = dy[k] + j;\n            dfs(board, newI, newJ, index, length, chars);\n        }\n        // 将当前位置的字符恢复为之前的值\n        board[i][j] = pre;\n    }\n}\n```\n","source":"_posts/回溯——排列、组合、子集.md","raw":"---\ntitle: 回溯——flood fill、字符串\ntags:\n    - 就业 \n    - 回溯\n    - 刷题\ncategories: 算法\nkeywords: 就业, 回溯, 刷题\ndescription: 回溯章节的flood fill、字符串全刷篇\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-04 16:51:49\n---\n\n\n> 回溯算法初探————flood fill、字符串\n\n\n## 整体解题步骤\n回溯算法有统一的代码解方案\n1. 确定题解`res`格式和部分可能解`temp`格式\n\n```java\n// res\nList<List<Integer>> res = new ArrayList<>();\n// temp\nDeque<Integer> path = new ArrayDeque<>(len);\n```\n2. 确定递归调用方法\n\n```java\nbackTrack(nums, res, temp, 0, length, unused);\n```\n3. 指定递归终止条件\n\n```java\n        if (depth == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n```\n4. 确定回溯位置\n\n```java\n        for (int i = 0; i < len; i++) {\n                path.addLast(nums[i]);\n                dfs(nums, len, depth + 1, path, used, res);\n                path.removeLast();\n            }\n        }\n```\n\n`往往还涉及到unused数组的使用或者begin变量，以防止重复情况`\n\n\n#### [17. 电话号码的字母组合（中等）](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n- 题目介绍\n\n\n![1](../images/回溯——排列、组合、子集-1701680751840.png)\n\n- 解题思路\n\n1. 将电话簿信息填入哈希表\n\n```java\n        HashMap<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n```\n2. 每个数字对应的字母向后递归回溯\n\n```java\n            char c = digits.charAt(index);\n            String s = map.get(c);\n            for (int i = 0; i < s.length(); i++) {\n                stringBuilder.append(s.charAt(i));\n                backTrace(digits, map, index + 1, stringBuilder, res);\n                stringBuilder.deleteCharAt(index);\n            }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        // 创建一个HashMap用于存储数字与对应的字符组合\n        HashMap<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n\n        // 如果输入的字符串长度为0，直接返回一个空的ArrayList\n        if (digits.length()==0){\n            return new ArrayList<>();\n        }\n\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n\n        // 创建一个StringBuilder用于构建字符组合\n        StringBuilder stringBuilder = new StringBuilder();\n\n        // 调用backTrace方法进行回溯计算\n        backTrace(digits, map, 0, stringBuilder, res);\n\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String digits, HashMap<Character, String> map, int index, StringBuilder stringBuilder, ArrayList<String> res) {\n        // 如果字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (stringBuilder.length() == digits.length()) {\n            res.add(stringBuilder.toString());\n        } else {\n            // 获取当前索引对应的数字字符\n            char c = digits.charAt(index);\n            // 根据数字字符获取对应的字符组合\n            String s = map.get(c);\n            // 遍历字符组合中的每个字符\n            for (int i = 0; i < s.length(); i++) {\n                // 将当前字符添加到字符串构建器中\n                stringBuilder.append(s.charAt(i));\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(digits, map, index + 1, stringBuilder, res);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                stringBuilder.deleteCharAt(index);\n            }\n        }\n    }\n}\n```\n\n#### [784. 字母大小写全排列（中等）](https://leetcode-cn.com/problems/letter-case-permutation/)\n\n- 题目介绍\n\n\n![2](../images/回溯——排列、组合、子集-1701680779347.png)\n\n- 解题思路\n\n1. 确认当前位数的字符是否为字母，分区向后递归回溯\n\n```java\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        temp.append(c);\n                        backTrace(s, res, temp, index+1);\n                        temp.deleteCharAt(index);\n                    } else {\n                        temp.append((char)(c + 32));\n                        backTrace(s, res, temp, index+1);\n                        temp.deleteCharAt(index);\n                    }\n                }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> letterCasePermutation(String s) {\n        // 创建一个StringBuilder用于临时存储字符组合\n        StringBuilder temp = new StringBuilder();\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 调用backTrace方法进行回溯计算\n        backTrace(s, res, temp, 0);\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String s, ArrayList<String> res, StringBuilder temp, int index) {\n        // 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (temp.length() == s.length()) {\n            res.add(temp.toString());\n        } else {\n            // 获取当前索引对应的字符\n            char c = s.charAt(index);\n            // 判断字符是否为大写字母\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                // 遍历两种情况：保持原字符和转换为小写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为小写字母\n                        temp.append((char)(c + 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            }\n            // 判断字符是否为小写字母\n            else if (c - 'a' <= 26 && c - 'a' >= 0) {\n                // 遍历两种情况：保持原字符和转换为大写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为大写字母\n                        temp.append((char) (c - 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            } else {\n                // 如果字符不是字母，则保持原字符\n                temp.append(c);\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(s, res, temp, index+1);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                temp.deleteCharAt(index);\n            }\n        }\n    }\n}\nclass Solution {\n    public List<String> letterCasePermutation(String s) {\n        // 创建一个StringBuilder用于临时存储字符组合\n        StringBuilder temp = new StringBuilder();\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 调用backTrace方法进行回溯计算\n        backTrace(s, res, temp, 0);\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成所有可能的字符组合\n    private void backTrace(String s, ArrayList<String> res, StringBuilder temp, int index) {\n        // 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中\n        if (temp.length() == s.length()) {\n            res.add(temp.toString());\n        } else {\n            // 获取当前索引对应的字符\n            char c = s.charAt(index);\n            // 判断字符是否为大写字母\n            if (c - 'A' <= 26 && c - 'A' >= 0) {\n                // 遍历两种情况：保持原字符和转换为小写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为小写字母\n                        temp.append((char)(c + 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            }\n            // 判断字符是否为小写字母\n            else if (c - 'a' <= 26 && c - 'a' >= 0) {\n                // 遍历两种情况：保持原字符和转换为大写字母\n                for (int i = 0; i < 2; i++) {\n                    if (i == 1) {\n                        // 保持原字符\n                        temp.append(c);\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    } else {\n                        // 转换为大写字母\n                        temp.append((char) (c - 32));\n                        // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                        backTrace(s, res, temp, index+1);\n                        // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                        temp.deleteCharAt(index);\n                    }\n                }\n            } else {\n                // 如果字符不是字母，则保持原字符\n                temp.append(c);\n                // 递归调用回溯函数，将索引加1，继续生成下一个字符组合\n                backTrace(s, res, temp, index+1);\n                // 回溯，删除刚刚添加的字符，尝试生成其他字符组合\n                temp.deleteCharAt(index);\n            }\n        }\n    }\n}\n```\n\n#### [22. 括号生成（中等）](https://leetcode-cn.com/problems/generate-parentheses/)\n\n- 题目介绍\n\n\n![4](../images/回溯——排列、组合、子集-1701680799652.png)\n\n- 解题思路\n\n1. 该题结果就两种字符类型，且左括号和右括号数相等，考虑分区\n\n```java\n        backTrace(res, temp, n, n);\n```\n\n2. 左括号在前，所有让左括号先作递归回溯\n\n```java\n        if (left > 0) {\n            temp.append(\"(\");\n            backTrace(res, temp, left - 1, right);\n            temp.deleteCharAt(temp.length() - 1);\n        }\n\n        if (right > 0) {\n            temp.append(\")\");\n            backTrace(res, temp, left, right - 1);\n            temp.deleteCharAt(temp.length() - 1);\n        }\n```\n\n3. 当右括号数大于左括号时进行剪枝，防止右括号在左括号前面（`不匹配`）的情况\n```\n        if (left>right){\n            return;\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        // 创建一个ArrayList用于存储结果\n        ArrayList<String> res = new ArrayList<>();\n        // 创建一个StringBuilder用于临时存储括号组合\n        StringBuilder temp = new StringBuilder();\n\n        // 调用backTrace方法进行回溯计算\n\n        // 返回结果\n        return res;\n    }\n\n    // 回溯函数，用于生成有效的括号组合\n    private void backTrace(ArrayList<String> res, StringBuilder temp, int left, int right) {\n        // 如果左括号和右括号都用完了，说明已经生成了一个有效的括号组合，将其添加到结果列表中\n        if (left == 0 && right == 0) {\n            res.add(temp.toString());\n        }\n\n        // 如果左括号的数量大于右括号的数量，说明生成的括号组合是无效的，直接返回\n        if (left > right) {\n            return;\n        }\n\n        // 如果还有剩余的左括号，可以添加一个左括号\n        if (left > 0) {\n            temp.append(\"(\");\n            // 递归调用回溯函数，将左括号的数量减1，继续生成下一个括号组合\n            backTrace(res, temp, left - 1, right);\n            // 回溯，删除刚刚添加的左括号，尝试生成其他括号组合\n            temp.deleteCharAt(temp.length() - 1);\n        }\n\n        // 如果还有剩余的右括号，可以添加一个右括号\n        if (right > 0) {\n            temp.append(\")\");\n            // 递归调用回溯函数，将右括号的数量减1，继续生成下一个括号组合\n            backTrace(res, temp, left, right - 1);\n            // 回溯，删除刚刚添加的右括号，尝试生成其他括号组合\n            temp.deleteCharAt(temp.length() - 1);\n        }\n    }\n}\n```\n\n####  [733. 图像渲染（Flood Fill，中等）](https://leetcode-cn.com/problems/flood-fill/)\n\n- 题目介绍\n\n\n![6](../images/回溯——排列、组合、子集-1701680821919.png)\n\n- 解题思路\n\n1. 设立四个方向的跳跃数组，向四周递归回溯\n\n```java\n    int[] dx = {0, 0, 1, -1};\n    int[] dy = {1, -1, 0, 0};\n\n\n        if (image[sr][sc] != preColor) {\n            return;\n        }\n        image[sr][sc] = color;\n        for (int i = 0; i < 4; i++) {\n            int newSr = sr + dx[i];\n            int newSc = sc + dy[i];\n            dfs(image, newSr, newSc, color, preColor);\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {0, 0, 1, -1};\n    // 定义垂直方向的增量数组\n    int[] dy = {1, -1, 0, 0};\n\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        // 获取起始点的颜色\n        int preColor = image[sr][sc];\n        // 如果起始点的颜色已经是目标颜色，直接返回图像\n        if (preColor == color) {\n            return image;\n        }\n        // 调用dfs方法进行深度优先搜索\n        dfs(image, sr, sc, color, preColor);\n        // 返回修改后的图像\n        return image;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(int[][] image, int sr, int sc, int color, int preColor) {\n        // 判断当前点是否越界\n        if (sr >= image.length || sr < 0 || sc >= image[0].length || sc < 0) {\n            return;\n        }\n        // 判断当前点的颜色是否与起始点的颜色相同\n        if (image[sr][sc] != preColor) {\n            return;\n        }\n        // 修改当前点的颜色为目标颜色\n        image[sr][sc] = color;\n        // 遍历四个方向，进行递归搜索\n        for (int i = 0; i < 4; i++) {\n            int newSr = sr + dx[i];\n            int newSc = sc + dy[i];\n            dfs(image, newSr, newSc, color, preColor);\n        }\n    }\n}\n```\n\n####  [200. 岛屿数量（中等）](https://leetcode-cn.com/problems/number-of-islands/)\n\n- 题目介绍\n\n\n![7](../images/回溯——排列、组合、子集-1701680842452.png)\n\n- 解题思路\n\n\n1.每找到一块陆地边界，则进行递归回溯操作\n\n```java\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1') {\n                    dfs(grid, i, j);\n                    count++;\n                }\n            }\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n    // 定义岛屿数量的计数器\n    int count;\n\n    public int numIslands(char[][] grid) {\n        // 初始化岛屿数量计数器\n        this.count = 0;\n        // 遍历整个二维网格\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                // 如果当前位置是陆地，则进行深度优先搜索\n                if (grid[i][j] == '1') {\n                    dfs(grid, i, j);\n                    // 搜索完成后，岛屿数量加1\n                    count++;\n                }\n            }\n        }\n        // 返回岛屿数量\n        return count;\n    }\n\n    // 深度优先搜索函数\n    private void dfs(char[][] grid, int i, int j) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {\n            return;\n        }\n        // 如果当前位置是水域，则直接返回\n        if (grid[i][j] == '0') {\n            return;\n        }\n        // 将当前位置标记为水域\n        grid[i][j] = '0';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int sx = dx[k] + i;\n            int sy = dy[k] + j;\n            dfs(grid, sx, sy);\n        }\n    }\n}\n```\n\n####   [130. 被围绕的区域（中等）](https://leetcode-cn.com/problems/surrounded-regions/)\n\n- 题目介绍\n\n\n![8](../images/回溯——排列、组合、子集-1701680859373.png)\n\n- 解题思路\n\n1.对原来的数组进行拷贝，遍历拷贝数组的边界点找值进行递归回溯\n```java\n        char[][] copyOf=new char[board.length][board[0].length];\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                copyOf[i][j]=board[i][j];\n            }\n        }\n        for (int i = 0; i < board.length; i++) {\n            dfs(copyOf, i, 0);\n            dfs(copyOf, i, board[0].length - 1);\n        }\n        for (int i = 0; i < board[0].length; i++) {\n            dfs(copyOf, 0, i);\n            dfs(copyOf, board.length - 1, i);\n        }\n```\n2. 此时拷贝数组中剩余的点则为答案值，对原数组进行赋值操作\n\n```java\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (copyOf[i][j]=='O'){\n                    board[i][j]='X';\n                }\n            }\n        }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n\n    public void solve(char[][] board) {\n        // 创建一个与原始二维数组相同大小的副本数组\n        char[][] copyOf = new char[board.length][board[0].length];\n        // 将原始数组的值复制到副本数组中\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                copyOf[i][j] = board[i][j];\n            }\n        }\n        // 遍历副本数组的边界，对边界上的 'O' 进行深度优先搜索\n        for (int i = 0; i < board.length; i++) {\n            dfs(copyOf, i, 0);\n            dfs(copyOf, i, board[0].length - 1);\n        }\n        for (int i = 0; i < board[0].length; i++) {\n            dfs(copyOf, 0, i);\n            dfs(copyOf, board.length - 1, i);\n        }\n        // 遍历原始数组，将副本数组中的 'O' 修改为 'X'\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (copyOf[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n\n    // 深度优先搜索函数\n    private void dfs(char[][] board, int i, int j) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {\n            return;\n        }\n        // 如果当前位置为 'X'，则直接返回\n        if (board[i][j] == 'X') {\n            return;\n        }\n        // 修改当前位置为 'X'\n        board[i][j] = 'X';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int sx = dx[k] + i;\n            int sy = dy[k] + j;\n            dfs(board, sx, sy);\n        }\n    }\n}\n```\n\n####   [79. 单词搜索（中等）](https://leetcode-cn.com/problems/word-search/)\n\n- 题目介绍\n\n\n![9](../images/回溯——排列、组合、子集-1701680879514.png)\n\n- 解题思路\n\n1. 在二维数组中找目标字符串的起始值，找到后对当前值置零进行递归，回溯时当值改回\n\n```java\n        if (chars[index] != board[i][j]) {\n            return;\n        }\n        if (index == length - 1) {\n            res = true;\n            return;\n        }\n        index += 1;\n        char pre = board[i][j];\n        board[i][j] = '0';\n        for (int k = 0; k < 4; k++) {\n            int newI = dx[k] + i;\n            int newJ = dy[k] + j;\n            dfs(board, newI, newJ, index, length, chars);\n        }\n        board[i][j] = pre;\n```\n- 设置全局bool变量，当找到完整字符串则赋值true\n\n```java\n int[] dx = {1, -1, 0, 0};\n    int[] dy = {0, 0, 1, -1};\n    boolean res = false;\n\n    public boolean exist(char[][] board, String word) {\n        char[] chars = word.toCharArray();\n        int length = chars.length;\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (chars[0] == board[i][j]) {\n                    dfs(board, i, j, 0, length, chars);\n                }\n            }\n        }\n        return res;\n    }\n```\n\n- 完整代码\n\n```java\nclass Solution {\n\n    // 定义水平方向的增量数组\n    int[] dx = {1, -1, 0, 0};\n    // 定义垂直方向的增量数组\n    int[] dy = {0, 0, 1, -1};\n    // 定义结果变量\n    boolean res = false;\n\n    public boolean exist(char[][] board, String word) {\n        // 将目标字符串转换为字符数组\n        char[] chars = word.toCharArray();\n        // 获取字符数组的长度\n        int length = chars.length;\n        // 遍历二维数组\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                // 如果第一个字符匹配，开始深度优先搜索\n                if (chars[0] == board[i][j]) {\n                    dfs(board, i, j, 0, length, chars);\n                }\n            }\n        }\n        // 返回结果\n        return res;\n    }\n\n    private void dfs(char[][] board,\n                     int i,\n                     int j,\n                     int index,\n                     int length,\n                     char[] chars) {\n        // 判断当前位置是否越界\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {\n            return;\n        }\n        // 判断当前位置的字符是否匹配\n        if (chars[index] != board[i][j]) {\n            return;\n        }\n        // 如果已经匹配到目标字符串的最后一个字符，设置结果为 true，返回\n        if (index == length - 1) {\n            res = true;\n            return;\n        }\n        // 增加索引，保存当前位置的字符，将当前位置标记为已访问\n        index += 1;\n        char pre = board[i][j];\n        board[i][j] = '0';\n        // 遍历四个方向，进行递归搜索\n        for (int k = 0; k < 4; k++) {\n            int newI = dx[k] + i;\n            int newJ = dy[k] + j;\n            dfs(board, newI, newJ, index, length, chars);\n        }\n        // 将当前位置的字符恢复为之前的值\n        board[i][j] = pre;\n    }\n}\n```\n","slug":"回溯——排列、组合、子集","published":1,"updated":"2023-12-05T03:00:45.611Z","_id":"clpqoimj200060cpk6idgh8xf","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>回溯算法初探————flood fill、字符串</p>\n</blockquote>\n<h2 id=\"整体解题步骤\"><a href=\"#整体解题步骤\" class=\"headerlink\" title=\"整体解题步骤\"></a>整体解题步骤</h2><p>回溯算法有统一的代码解方案</p>\n<ol>\n<li>确定题解<code>res</code>格式和部分可能解<code>temp</code>格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res</span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// temp</span></span><br><span class=\"line\">Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>确定递归调用方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定递归终止条件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定回溯位置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>往往还涉及到unused数组的使用或者begin变量，以防止重复情况</code></p>\n<h4 id=\"17-电话号码的字母组合（中等）\"><a href=\"#17-电话号码的字母组合（中等）\" class=\"headerlink\" title=\"17. 电话号码的字母组合（中等）\"></a><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\">17. 电话号码的字母组合（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680751840.png\" alt=\"1\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>将电话簿信息填入哈希表</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap&lt;Character, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>每个数字对应的字母向后递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> digits.charAt(index);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> map.get(c);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">    stringBuilder.append(s.charAt(i));</span><br><span class=\"line\">    backTrace(digits, map, index + <span class=\"number\">1</span>, stringBuilder, res);</span><br><span class=\"line\">    stringBuilder.deleteCharAt(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCombinations</span><span class=\"params\">(String digits)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个HashMap用于存储数字与对应的字符组合</span></span><br><span class=\"line\">        HashMap&lt;Character, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果输入的字符串长度为0，直接返回一个空的ArrayList</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digits.length()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于构建字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(digits, map, <span class=\"number\">0</span>, stringBuilder, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String digits, HashMap&lt;Character, String&gt; map, <span class=\"type\">int</span> index, StringBuilder stringBuilder, ArrayList&lt;String&gt; res)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringBuilder.length() == digits.length()) &#123;</span><br><span class=\"line\">            res.add(stringBuilder.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的数字字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> digits.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 根据数字字符获取对应的字符组合</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> map.get(c);</span><br><span class=\"line\">            <span class=\"comment\">// 遍历字符组合中的每个字符</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前字符添加到字符串构建器中</span></span><br><span class=\"line\">                stringBuilder.append(s.charAt(i));</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(digits, map, index + <span class=\"number\">1</span>, stringBuilder, res);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                stringBuilder.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"784-字母大小写全排列（中等）\"><a href=\"#784-字母大小写全排列（中等）\" class=\"headerlink\" title=\"784. 字母大小写全排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/letter-case-permutation/\">784. 字母大小写全排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680779347.png\" alt=\"2\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>确认当前位数的字符是否为字母，分区向后递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.append(c);</span><br><span class=\"line\">            backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.deleteCharAt(index);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">            backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.deleteCharAt(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCasePermutation</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(s, res, temp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s, ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() == s.length()) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为大写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为小写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为小写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为小写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;a&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为大写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为大写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>) (c - <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果字符不是字母，则保持原字符</span></span><br><span class=\"line\">                temp.append(c);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                temp.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCasePermutation</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(s, res, temp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s, ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() == s.length()) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为大写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为小写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为小写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为小写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;a&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为大写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为大写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>) (c - <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果字符不是字母，则保持原字符</span></span><br><span class=\"line\">                temp.append(c);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                temp.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-括号生成（中等）\"><a href=\"#22-括号生成（中等）\" class=\"headerlink\" title=\"22. 括号生成（中等）\"></a><a href=\"https://leetcode-cn.com/problems/generate-parentheses/\">22. 括号生成（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680799652.png\" alt=\"4\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>该题结果就两种字符类型，且左括号和右括号数相等，考虑分区</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrace(res, temp, n, n);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>左括号在前，所有让左括号先作递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    temp.append(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">    backTrace(res, temp, left - <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    temp.append(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    backTrace(res, temp, left, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">    temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当右括号数大于左括号时进行剪枝，防止右括号在左括号前面（<code>不匹配</code>）的情况<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (left&gt;right)&#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储括号组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成有效的括号组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果左括号和右括号都用完了，说明已经生成了一个有效的括号组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == <span class=\"number\">0</span> &amp;&amp; right == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果左括号的数量大于右括号的数量，说明生成的括号组合是无效的，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果还有剩余的左括号，可以添加一个左括号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            temp.append(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，将左括号的数量减1，继续生成下一个括号组合</span></span><br><span class=\"line\">            backTrace(res, temp, left - <span class=\"number\">1</span>, right);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯，删除刚刚添加的左括号，尝试生成其他括号组合</span></span><br><span class=\"line\">            temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果还有剩余的右括号，可以添加一个右括号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            temp.append(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，将右括号的数量减1，继续生成下一个括号组合</span></span><br><span class=\"line\">            backTrace(res, temp, left, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯，删除刚刚添加的右括号，尝试生成其他括号组合</span></span><br><span class=\"line\">            temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"733-图像渲染（Flood-Fill，中等）\"><a href=\"#733-图像渲染（Flood-Fill，中等）\" class=\"headerlink\" title=\"733. 图像渲染（Flood Fill，中等）\"></a><a href=\"https://leetcode-cn.com/problems/flood-fill/\">733. 图像渲染（Flood Fill，中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680821919.png\" alt=\"6\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>设立四个方向的跳跃数组，向四周递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image[sr][sc] != preColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    image[sr][sc] = color;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newSr</span> <span class=\"operator\">=</span> sr + dx[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newSc</span> <span class=\"operator\">=</span> sc + dy[i];</span><br><span class=\"line\">        dfs(image, newSr, newSc, color, preColor);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] floodFill(<span class=\"type\">int</span>[][] image, <span class=\"type\">int</span> sr, <span class=\"type\">int</span> sc, <span class=\"type\">int</span> color) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取起始点的颜色</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">preColor</span> <span class=\"operator\">=</span> image[sr][sc];</span><br><span class=\"line\">        <span class=\"comment\">// 如果起始点的颜色已经是目标颜色，直接返回图像</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preColor == color) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用dfs方法进行深度优先搜索</span></span><br><span class=\"line\">        dfs(image, sr, sc, color, preColor);</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改后的图像</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[][] image, <span class=\"type\">int</span> sr, <span class=\"type\">int</span> sc, <span class=\"type\">int</span> color, <span class=\"type\">int</span> preColor)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前点是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sr &gt;= image.length || sr &lt; <span class=\"number\">0</span> || sc &gt;= image[<span class=\"number\">0</span>].length || sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前点的颜色是否与起始点的颜色相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (image[sr][sc] != preColor) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 修改当前点的颜色为目标颜色</span></span><br><span class=\"line\">        image[sr][sc] = color;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newSr</span> <span class=\"operator\">=</span> sr + dx[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newSc</span> <span class=\"operator\">=</span> sc + dy[i];</span><br><span class=\"line\">            dfs(image, newSr, newSc, color, preColor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"200-岛屿数量（中等）\"><a href=\"#200-岛屿数量（中等）\" class=\"headerlink\" title=\"200. 岛屿数量（中等）\"></a><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680842452.png\" alt=\"7\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p>1.每找到一块陆地边界，则进行递归回溯操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">            dfs(grid, i, j);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义岛屿数量的计数器</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numIslands</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化岛屿数量计数器</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历整个二维网格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前位置是陆地，则进行深度优先搜索</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">                    dfs(grid, i, j);</span><br><span class=\"line\">                    <span class=\"comment\">// 搜索完成后，岛屿数量加1</span></span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回岛屿数量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= grid.length || j &gt;= grid[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前位置是水域，则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前位置标记为水域</span></span><br><span class=\"line\">        grid[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sx</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sy</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(grid, sx, sy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"130-被围绕的区域（中等）\"><a href=\"#130-被围绕的区域（中等）\" class=\"headerlink\" title=\"130. 被围绕的区域（中等）\"></a><a href=\"https://leetcode-cn.com/problems/surrounded-regions/\">130. 被围绕的区域（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680859373.png\" alt=\"8\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p>1.对原来的数组进行拷贝，遍历拷贝数组的边界点找值进行递归回溯</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>[][] copyOf=<span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[board.length][board[<span class=\"number\">0</span>].length];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        copyOf[i][j]=board[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    dfs(copyOf, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(copyOf, i, board[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">    dfs(copyOf, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">    dfs(copyOf, board.length - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>此时拷贝数组中剩余的点则为答案值，对原数组进行赋值操作</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copyOf[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">            board[i][j]=<span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个与原始二维数组相同大小的副本数组</span></span><br><span class=\"line\">        <span class=\"type\">char</span>[][] copyOf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[board.length][board[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"comment\">// 将原始数组的值复制到副本数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                copyOf[i][j] = board[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历副本数组的边界，对边界上的 &#x27;O&#x27; 进行深度优先搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            dfs(copyOf, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">            dfs(copyOf, i, board[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">            dfs(copyOf, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            dfs(copyOf, board.length - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历原始数组，将副本数组中的 &#x27;O&#x27; 修改为 &#x27;X&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (copyOf[i][j] == <span class=\"string\">&#x27;O&#x27;</span>) &#123;</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= board.length || j &gt;= board[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前位置为 &#x27;X&#x27;，则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 修改当前位置为 &#x27;X&#x27;</span></span><br><span class=\"line\">        board[i][j] = <span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sx</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sy</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(board, sx, sy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"79-单词搜索（中等）\"><a href=\"#79-单词搜索（中等）\" class=\"headerlink\" title=\"79. 单词搜索（中等）\"></a><a href=\"https://leetcode-cn.com/problems/word-search/\">79. 单词搜索（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680879514.png\" alt=\"9\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>在二维数组中找目标字符串的起始值，找到后对当前值置零进行递归，回溯时当值改回</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (chars[index] != board[i][j]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (index == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">index += <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> board[i][j];</span><br><span class=\"line\">board[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newI</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newJ</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">    dfs(board, newI, newJ, index, length, chars);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">board[i][j] = pre;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置全局bool变量，当找到完整字符串则赋值true</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">   <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">   <span class=\"type\">boolean</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">exist</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, String word)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> chars.length;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (chars[<span class=\"number\">0</span>] == board[i][j]) &#123;</span><br><span class=\"line\">                   dfs(board, i, j, <span class=\"number\">0</span>, length, chars);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义结果变量</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">exist</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将目标字符串转换为字符数组</span></span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">        <span class=\"comment\">// 获取字符数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> chars.length;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果第一个字符匹配，开始深度优先搜索</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chars[<span class=\"number\">0</span>] == board[i][j]) &#123;</span><br><span class=\"line\">                    dfs(board, i, j, <span class=\"number\">0</span>, length, chars);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> i,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> j,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> index,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">char</span>[] chars)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= board.length || j &gt;= board[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置的字符是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chars[index] != board[i][j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经匹配到目标字符串的最后一个字符，设置结果为 true，返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 增加索引，保存当前位置的字符，将当前位置标记为已访问</span></span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> board[i][j];</span><br><span class=\"line\">        board[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newI</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newJ</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(board, newI, newJ, index, length, chars);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前位置的字符恢复为之前的值</span></span><br><span class=\"line\">        board[i][j] = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>回溯算法初探————flood fill、字符串</p>\n</blockquote>\n<h2 id=\"整体解题步骤\"><a href=\"#整体解题步骤\" class=\"headerlink\" title=\"整体解题步骤\"></a>整体解题步骤</h2><p>回溯算法有统一的代码解方案</p>\n<ol>\n<li>确定题解<code>res</code>格式和部分可能解<code>temp</code>格式</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res</span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// temp</span></span><br><span class=\"line\">Deque&lt;Integer&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;(len);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>确定递归调用方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrack(nums, res, temp, <span class=\"number\">0</span>, length, unused);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定递归终止条件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (depth == len) &#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(path));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定回溯位置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        path.addLast(nums[i]);</span><br><span class=\"line\">        dfs(nums, len, depth + <span class=\"number\">1</span>, path, used, res);</span><br><span class=\"line\">        path.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>往往还涉及到unused数组的使用或者begin变量，以防止重复情况</code></p>\n<h4 id=\"17-电话号码的字母组合（中等）\"><a href=\"#17-电话号码的字母组合（中等）\" class=\"headerlink\" title=\"17. 电话号码的字母组合（中等）\"></a><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\">17. 电话号码的字母组合（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680751840.png\" alt=\"1\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>将电话簿信息填入哈希表</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap&lt;Character, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>每个数字对应的字母向后递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> digits.charAt(index);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> map.get(c);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">    stringBuilder.append(s.charAt(i));</span><br><span class=\"line\">    backTrace(digits, map, index + <span class=\"number\">1</span>, stringBuilder, res);</span><br><span class=\"line\">    stringBuilder.deleteCharAt(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCombinations</span><span class=\"params\">(String digits)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个HashMap用于存储数字与对应的字符组合</span></span><br><span class=\"line\">        HashMap&lt;Character, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果输入的字符串长度为0，直接返回一个空的ArrayList</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digits.length()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于构建字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(digits, map, <span class=\"number\">0</span>, stringBuilder, res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String digits, HashMap&lt;Character, String&gt; map, <span class=\"type\">int</span> index, StringBuilder stringBuilder, ArrayList&lt;String&gt; res)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringBuilder.length() == digits.length()) &#123;</span><br><span class=\"line\">            res.add(stringBuilder.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的数字字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> digits.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 根据数字字符获取对应的字符组合</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> map.get(c);</span><br><span class=\"line\">            <span class=\"comment\">// 遍历字符组合中的每个字符</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前字符添加到字符串构建器中</span></span><br><span class=\"line\">                stringBuilder.append(s.charAt(i));</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(digits, map, index + <span class=\"number\">1</span>, stringBuilder, res);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                stringBuilder.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"784-字母大小写全排列（中等）\"><a href=\"#784-字母大小写全排列（中等）\" class=\"headerlink\" title=\"784. 字母大小写全排列（中等）\"></a><a href=\"https://leetcode-cn.com/problems/letter-case-permutation/\">784. 字母大小写全排列（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680779347.png\" alt=\"2\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>确认当前位数的字符是否为字母，分区向后递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            temp.append(c);</span><br><span class=\"line\">            backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.deleteCharAt(index);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">            backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.deleteCharAt(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCasePermutation</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(s, res, temp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s, ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() == s.length()) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为大写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为小写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为小写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为小写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;a&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为大写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为大写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>) (c - <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果字符不是字母，则保持原字符</span></span><br><span class=\"line\">                temp.append(c);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                temp.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCasePermutation</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储字符组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\">        backTrace(s, res, temp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成所有可能的字符组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(String s, ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果临时字符组合的长度等于输入字符串的长度，说明已经生成了一个完整的字符组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.length() == s.length()) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取当前索引对应的字符</span></span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(index);</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为大写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;A&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为小写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为小写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>)(c + <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断字符是否为小写字母</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c - <span class=\"string\">&#x27;a&#x27;</span> &lt;= <span class=\"number\">26</span> &amp;&amp; c - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历两种情况：保持原字符和转换为大写字母</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 保持原字符</span></span><br><span class=\"line\">                        temp.append(c);</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 转换为大写字母</span></span><br><span class=\"line\">                        temp.append((<span class=\"type\">char</span>) (c - <span class=\"number\">32</span>));</span><br><span class=\"line\">                        <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                        backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                        temp.deleteCharAt(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果字符不是字母，则保持原字符</span></span><br><span class=\"line\">                temp.append(c);</span><br><span class=\"line\">                <span class=\"comment\">// 递归调用回溯函数，将索引加1，继续生成下一个字符组合</span></span><br><span class=\"line\">                backTrace(s, res, temp, index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 回溯，删除刚刚添加的字符，尝试生成其他字符组合</span></span><br><span class=\"line\">                temp.deleteCharAt(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"22-括号生成（中等）\"><a href=\"#22-括号生成（中等）\" class=\"headerlink\" title=\"22. 括号生成（中等）\"></a><a href=\"https://leetcode-cn.com/problems/generate-parentheses/\">22. 括号生成（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680799652.png\" alt=\"4\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>该题结果就两种字符类型，且左括号和右括号数相等，考虑分区</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backTrace(res, temp, n, n);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>左括号在前，所有让左括号先作递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    temp.append(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">    backTrace(res, temp, left - <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    temp.append(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    backTrace(res, temp, left, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">    temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当右括号数大于左括号时进行剪枝，防止右括号在左括号前面（<code>不匹配</code>）的情况<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (left&gt;right)&#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ArrayList用于存储结果</span></span><br><span class=\"line\">        ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个StringBuilder用于临时存储括号组合</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用backTrace方法进行回溯计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回溯函数，用于生成有效的括号组合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backTrace</span><span class=\"params\">(ArrayList&lt;String&gt; res, StringBuilder temp, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果左括号和右括号都用完了，说明已经生成了一个有效的括号组合，将其添加到结果列表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == <span class=\"number\">0</span> &amp;&amp; right == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res.add(temp.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果左括号的数量大于右括号的数量，说明生成的括号组合是无效的，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果还有剩余的左括号，可以添加一个左括号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            temp.append(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，将左括号的数量减1，继续生成下一个括号组合</span></span><br><span class=\"line\">            backTrace(res, temp, left - <span class=\"number\">1</span>, right);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯，删除刚刚添加的左括号，尝试生成其他括号组合</span></span><br><span class=\"line\">            temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果还有剩余的右括号，可以添加一个右括号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            temp.append(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用回溯函数，将右括号的数量减1，继续生成下一个括号组合</span></span><br><span class=\"line\">            backTrace(res, temp, left, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 回溯，删除刚刚添加的右括号，尝试生成其他括号组合</span></span><br><span class=\"line\">            temp.deleteCharAt(temp.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"733-图像渲染（Flood-Fill，中等）\"><a href=\"#733-图像渲染（Flood-Fill，中等）\" class=\"headerlink\" title=\"733. 图像渲染（Flood Fill，中等）\"></a><a href=\"https://leetcode-cn.com/problems/flood-fill/\">733. 图像渲染（Flood Fill，中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680821919.png\" alt=\"6\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>设立四个方向的跳跃数组，向四周递归回溯</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image[sr][sc] != preColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    image[sr][sc] = color;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newSr</span> <span class=\"operator\">=</span> sr + dx[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newSc</span> <span class=\"operator\">=</span> sc + dy[i];</span><br><span class=\"line\">        dfs(image, newSr, newSc, color, preColor);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] floodFill(<span class=\"type\">int</span>[][] image, <span class=\"type\">int</span> sr, <span class=\"type\">int</span> sc, <span class=\"type\">int</span> color) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取起始点的颜色</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">preColor</span> <span class=\"operator\">=</span> image[sr][sc];</span><br><span class=\"line\">        <span class=\"comment\">// 如果起始点的颜色已经是目标颜色，直接返回图像</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preColor == color) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用dfs方法进行深度优先搜索</span></span><br><span class=\"line\">        dfs(image, sr, sc, color, preColor);</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改后的图像</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[][] image, <span class=\"type\">int</span> sr, <span class=\"type\">int</span> sc, <span class=\"type\">int</span> color, <span class=\"type\">int</span> preColor)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前点是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sr &gt;= image.length || sr &lt; <span class=\"number\">0</span> || sc &gt;= image[<span class=\"number\">0</span>].length || sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前点的颜色是否与起始点的颜色相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (image[sr][sc] != preColor) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 修改当前点的颜色为目标颜色</span></span><br><span class=\"line\">        image[sr][sc] = color;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newSr</span> <span class=\"operator\">=</span> sr + dx[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newSc</span> <span class=\"operator\">=</span> sc + dy[i];</span><br><span class=\"line\">            dfs(image, newSr, newSc, color, preColor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"200-岛屿数量（中等）\"><a href=\"#200-岛屿数量（中等）\" class=\"headerlink\" title=\"200. 岛屿数量（中等）\"></a><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680842452.png\" alt=\"7\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p>1.每找到一块陆地边界，则进行递归回溯操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">            dfs(grid, i, j);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义岛屿数量的计数器</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numIslands</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化岛屿数量计数器</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历整个二维网格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前位置是陆地，则进行深度优先搜索</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">                    dfs(grid, i, j);</span><br><span class=\"line\">                    <span class=\"comment\">// 搜索完成后，岛屿数量加1</span></span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回岛屿数量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= grid.length || j &gt;= grid[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前位置是水域，则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前位置标记为水域</span></span><br><span class=\"line\">        grid[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sx</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sy</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(grid, sx, sy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"130-被围绕的区域（中等）\"><a href=\"#130-被围绕的区域（中等）\" class=\"headerlink\" title=\"130. 被围绕的区域（中等）\"></a><a href=\"https://leetcode-cn.com/problems/surrounded-regions/\">130. 被围绕的区域（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680859373.png\" alt=\"8\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<p>1.对原来的数组进行拷贝，遍历拷贝数组的边界点找值进行递归回溯</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>[][] copyOf=<span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[board.length][board[<span class=\"number\">0</span>].length];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        copyOf[i][j]=board[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    dfs(copyOf, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(copyOf, i, board[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">    dfs(copyOf, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">    dfs(copyOf, board.length - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>此时拷贝数组中剩余的点则为答案值，对原数组进行赋值操作</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copyOf[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;</span><br><span class=\"line\">            board[i][j]=<span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个与原始二维数组相同大小的副本数组</span></span><br><span class=\"line\">        <span class=\"type\">char</span>[][] copyOf = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[board.length][board[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"comment\">// 将原始数组的值复制到副本数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                copyOf[i][j] = board[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历副本数组的边界，对边界上的 &#x27;O&#x27; 进行深度优先搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            dfs(copyOf, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">            dfs(copyOf, i, board[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">            dfs(copyOf, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            dfs(copyOf, board.length - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历原始数组，将副本数组中的 &#x27;O&#x27; 修改为 &#x27;X&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (copyOf[i][j] == <span class=\"string\">&#x27;O&#x27;</span>) &#123;</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先搜索函数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= board.length || j &gt;= board[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前位置为 &#x27;X&#x27;，则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 修改当前位置为 &#x27;X&#x27;</span></span><br><span class=\"line\">        board[i][j] = <span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sx</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sy</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(board, sx, sy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"79-单词搜索（中等）\"><a href=\"#79-单词搜索（中等）\" class=\"headerlink\" title=\"79. 单词搜索（中等）\"></a><a href=\"https://leetcode-cn.com/problems/word-search/\">79. 单词搜索（中等）</a></h4><ul>\n<li>题目介绍</li>\n</ul>\n<p><img src=\"/../images/%E5%9B%9E%E6%BA%AF%E2%80%94%E2%80%94%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86-1701680879514.png\" alt=\"9\"></p>\n<ul>\n<li>解题思路</li>\n</ul>\n<ol>\n<li>在二维数组中找目标字符串的起始值，找到后对当前值置零进行递归，回溯时当值改回</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (chars[index] != board[i][j]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (index == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">index += <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> board[i][j];</span><br><span class=\"line\">board[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newI</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newJ</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">    dfs(board, newI, newJ, index, length, chars);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">board[i][j] = pre;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置全局bool变量，当找到完整字符串则赋值true</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">   <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">   <span class=\"type\">boolean</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">exist</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, String word)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> chars.length;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (chars[<span class=\"number\">0</span>] == board[i][j]) &#123;</span><br><span class=\"line\">                   dfs(board, i, j, <span class=\"number\">0</span>, length, chars);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义水平方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = &#123;<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义垂直方向的增量数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定义结果变量</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">exist</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, String word)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将目标字符串转换为字符数组</span></span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">        <span class=\"comment\">// 获取字符数组的长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> chars.length;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; board[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果第一个字符匹配，开始深度优先搜索</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chars[<span class=\"number\">0</span>] == board[i][j]) &#123;</span><br><span class=\"line\">                    dfs(board, i, j, <span class=\"number\">0</span>, length, chars);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> i,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> j,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> index,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span> length,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">char</span>[] chars)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= board.length || j &gt;= board[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前位置的字符是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chars[index] != board[i][j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经匹配到目标字符串的最后一个字符，设置结果为 true，返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 增加索引，保存当前位置的字符，将当前位置标记为已访问</span></span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> board[i][j];</span><br><span class=\"line\">        board[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历四个方向，进行递归搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newI</span> <span class=\"operator\">=</span> dx[k] + i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newJ</span> <span class=\"operator\">=</span> dy[k] + j;</span><br><span class=\"line\">            dfs(board, newI, newJ, index, length, chars);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前位置的字符恢复为之前的值</span></span><br><span class=\"line\">        board[i][j] = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql小记","keywords":"mysql, 面试, 就业, 后端","description":"mysql二次复习","top_img":"/img/houduan.png","comments":1,"cover":"/img/houduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"本文章转载自我的掘金","date":"2023-12-05T02:38:14.000Z","_content":"\n> 整理自各大面经及白马视频\n# 优化\n### 定位慢查询\n##### 慢查询原因（多以压测时间1s以上）\n1. 聚合查询\n2. 多表查询\n3. 表数据量过大查询\n4. 深度分页查询\n\n##### 检测工具\n1. 调试工具：`Arthas`\n2. 运维工具：`Prometheus`、`Skywalking`\n\n##### mysql自带慢日志(`生产环境不建议开启，会有性能损耗`)\n- 在mysql配置文件(`etc/my.cnf`)中配置如下信息\n\n``` yml\n# 开启mysql慢日志查询开关\nslow_query_log=1\n# 设置慢日志的时间为2s，sql语句执行时间超过两秒，则会被视为慢查询，记录查询日志\nlong_query_time=2\n```\n### 慢sql优化\n\n##### select语句前使用`explain`或者`desc`获取mysql语句执行信息\n\n![1](../images/mysql小记-1701744061305.png)\n\n- `possible_key` 当前sql可能会用到的索引\n- `key` sql实际命中的索引\n- `key_len` 索引所占大小\n- `extra` 额外的优化建议\n\n\n![2](../images/mysql小记-1701744069648.png)\n- `type` sql连接的类型（`index`或者`all`需要进行sql优化）\n\n![3](../images/mysql小记-1701744076874.png)\n\n### 索引\n##### 为什么选择b+树\n1. 阶数更多，路径更短\n2. 磁盘读写代价B+树更低，非叶子节点只存储指针，叶子节点存储数据\n3. B+树便于扫库和区间查询，叶子节点是一个双向链表\n\n##### b树与b+树的区别\n1. 在B树中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，在查询的时候，B+树查找效率更加稳定（每次查找都会到叶子节点）\n2. 在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表\n3. 磁盘读写代价b+树更低（b树会将父节点数据也加载）\n\n#####  什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\n\n![4](../images/mysql小记-1701744087281.png)\n##### 回表查询\n`回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表`\n\n##### 覆盖索引\n- 覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，`直接返回数据`，性能高。\n- 如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发`回表查询`，尽量避免使用select *，尽量在返回的列中都包含添加索引的字段\n\n##### 超大分页怎么处理\n\n- 场景\n\n![5](../images/mysql小记-1701744094831.png)\n\n- 优化方案（`使用覆盖索引+子查询`）\n  `先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了因为查询id的时候，走的覆盖索引，所以效率可以提升很多`\n![6](../images/mysql小记-1701744101965.png)\n\n##### 索引创建原则\n1. 数据量较大，查询频繁（10万条）\n2. 正对常作为查询条件（where）、排序（order by）、分组（group by） 操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率就越高\n4. 字符串类型的字段，且字段长度较长，可以针对字段特点，建立前缀索引\n5. 尽量选用联合索引，减少单列索引，查询时候可以使用最左前缀法则覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 控制索引数量，影响增删改的效率（索引重构时间！）\n\n##### 索引失效场景（使用explain检查）\n1. 违反最左前缀法则\n2. 对于`联合索引`,范围查询右边的列索引失效\n\n`如下图，`status`使用了范围查询，导致address未使用索引`\n\n![7](../images/mysql小记-1701744109641.png)\n\n3. 在索引列上使用运算操作导致失效\n4. 模糊匹配%未在尾部导致失效\n\n### sql优化方案\n##### 表的设计优化\n1.tinyint、int 、bigint根据实际情况选择\n2.char定长效率高，varchar可变长度，效率较低\n##### sql语句优化\n1. select 语句尽量指定字段名称（避免*）\n2. sql避免索引失效\n3. union all 不会过滤重复数据，union会自动过滤重复数据（导致多一层过滤降低效率）\n4. 避免在where中对字段进行表达式操作\n5. 如果是表关联的话，尽量使用innerjoin ，不要使用left join、right join，如必须使用 一定要以小表为驱动\n##### 主从复制、读写分离\n\n![8](../images/mysql小记-1701744118087.png)\n\n# 事务\n##### 事务特性\n- 原子性（`Atomicity`）：事务是不可分割的最小单元，要么全部成功，要么全部失败\n- 一致性（`Consistensy`）:事务完成时，必须使所有的数据都保持一致状态\n- 隔离性（`Isolation`）：保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性（`Durability`）：事务一旦提交或者回滚，他对数据库中的数据的改变就是永久的\n\n##### 并发问题\n`此处还有`丢失修改`，指两个线程同时改，最后就是后面改的数据`\n\n![9](../images/mysql小记-1701744125502.png)\n\n##### 事务隔离界别\n`mysql8当前事务隔离级别repeatable-read已经可以解决幻读问题`\n![10](../images/mysql小记-1701744131762.png)\n\n##### redolog和undolog\n- `buffer pool`缓冲池：位于主存中，在执行增删改操作的时候，先操作缓冲池中的数据（缓冲池中没有则从磁盘加载进缓冲池），缓冲池的数据以一定频率刷新到磁盘，减少磁盘IO,加快处理速度\n- `page`数据页：InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认16kb，页中存储行数据\n\n\n1.`redolog`分为`redo log buffer`(内存中)和`redo log file`（磁盘中），当`buffer pool`刷新数据到磁盘出错的时候，使用redolog进行数据恢复（`实现事务的持久性`）\n\n![11](../images/mysql小记-1701744138342.png)\n2. `undolog`也称作回滚日志——记录了每条增删改语句的逆语句（`回滚`和`MVCC`）(`实现事务的原子性`)\n\n###### MVCC\n- 表记录中的隐藏字段（`DB_ROLL_ID`指向上一个版本id，`DB_TAX_ID`当前版本id）\n\n![12](../images/mysql小记-1701744145264.png)\n\n- readview\n\n![13](../images/mysql小记-1701744154056.png)\n\n- 数据库默认隔离级别RR情况下一直复用第一个readview，保证了每次查询数据一致\n\n# 主从同步原理\n\n1. 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。\n2. 从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志Relay Log 。\n3. 从库重做中继日志中的事件，将改变反映它自己的数据\n\n\n![14](../images/mysql小记-1701744163753.png)\n\n# 分库分表\n- 水平分库：将一个库的数据分到多个库中，解决海量数据存储和高并发问题\n- 水平分表：解决单表存储和性能问题（用的少）\n- 垂直分库：微服务架构按业务分库\n- 垂直分表：冷热数据分离，多表互不影响\n\n# 三大范式\n- 第⼀范式：每个列都不可以再拆分。\n- 第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。\n- `第三范式`：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键(`尽量遵守`)\n\n# InnoDB和MyISAM的区别\n- 锁粒度：InnoDB为行锁，MyISAM为表锁\n- 可恢复性：InnoDB有事务日志，MyISAM不支持事务\n- InnoDB是聚簇索引，叶子节点存储着行数据，MyISAM是非聚簇索引，叶子节点存储的是行数据地址，需要再次寻址\n\n","source":"_posts/mysql小记.md","raw":"---\ntitle: mysql小记\ntags: \n  - mysql \n  - 面试 \n  - 就业\ncategories: 后端\nkeywords: mysql, 面试, 就业, 后端\ndescription: mysql二次复习\ntop_img: /img/houduan.png\ncomments: true\ncover: /img/houduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 本文章转载自我的掘金\ndate: 2023-12-05 10:38:14\n---\n\n> 整理自各大面经及白马视频\n# 优化\n### 定位慢查询\n##### 慢查询原因（多以压测时间1s以上）\n1. 聚合查询\n2. 多表查询\n3. 表数据量过大查询\n4. 深度分页查询\n\n##### 检测工具\n1. 调试工具：`Arthas`\n2. 运维工具：`Prometheus`、`Skywalking`\n\n##### mysql自带慢日志(`生产环境不建议开启，会有性能损耗`)\n- 在mysql配置文件(`etc/my.cnf`)中配置如下信息\n\n``` yml\n# 开启mysql慢日志查询开关\nslow_query_log=1\n# 设置慢日志的时间为2s，sql语句执行时间超过两秒，则会被视为慢查询，记录查询日志\nlong_query_time=2\n```\n### 慢sql优化\n\n##### select语句前使用`explain`或者`desc`获取mysql语句执行信息\n\n![1](../images/mysql小记-1701744061305.png)\n\n- `possible_key` 当前sql可能会用到的索引\n- `key` sql实际命中的索引\n- `key_len` 索引所占大小\n- `extra` 额外的优化建议\n\n\n![2](../images/mysql小记-1701744069648.png)\n- `type` sql连接的类型（`index`或者`all`需要进行sql优化）\n\n![3](../images/mysql小记-1701744076874.png)\n\n### 索引\n##### 为什么选择b+树\n1. 阶数更多，路径更短\n2. 磁盘读写代价B+树更低，非叶子节点只存储指针，叶子节点存储数据\n3. B+树便于扫库和区间查询，叶子节点是一个双向链表\n\n##### b树与b+树的区别\n1. 在B树中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，在查询的时候，B+树查找效率更加稳定（每次查找都会到叶子节点）\n2. 在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表\n3. 磁盘读写代价b+树更低（b树会将父节点数据也加载）\n\n#####  什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\n\n![4](../images/mysql小记-1701744087281.png)\n##### 回表查询\n`回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表`\n\n##### 覆盖索引\n- 覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，`直接返回数据`，性能高。\n- 如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发`回表查询`，尽量避免使用select *，尽量在返回的列中都包含添加索引的字段\n\n##### 超大分页怎么处理\n\n- 场景\n\n![5](../images/mysql小记-1701744094831.png)\n\n- 优化方案（`使用覆盖索引+子查询`）\n  `先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了因为查询id的时候，走的覆盖索引，所以效率可以提升很多`\n![6](../images/mysql小记-1701744101965.png)\n\n##### 索引创建原则\n1. 数据量较大，查询频繁（10万条）\n2. 正对常作为查询条件（where）、排序（order by）、分组（group by） 操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率就越高\n4. 字符串类型的字段，且字段长度较长，可以针对字段特点，建立前缀索引\n5. 尽量选用联合索引，减少单列索引，查询时候可以使用最左前缀法则覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 控制索引数量，影响增删改的效率（索引重构时间！）\n\n##### 索引失效场景（使用explain检查）\n1. 违反最左前缀法则\n2. 对于`联合索引`,范围查询右边的列索引失效\n\n`如下图，`status`使用了范围查询，导致address未使用索引`\n\n![7](../images/mysql小记-1701744109641.png)\n\n3. 在索引列上使用运算操作导致失效\n4. 模糊匹配%未在尾部导致失效\n\n### sql优化方案\n##### 表的设计优化\n1.tinyint、int 、bigint根据实际情况选择\n2.char定长效率高，varchar可变长度，效率较低\n##### sql语句优化\n1. select 语句尽量指定字段名称（避免*）\n2. sql避免索引失效\n3. union all 不会过滤重复数据，union会自动过滤重复数据（导致多一层过滤降低效率）\n4. 避免在where中对字段进行表达式操作\n5. 如果是表关联的话，尽量使用innerjoin ，不要使用left join、right join，如必须使用 一定要以小表为驱动\n##### 主从复制、读写分离\n\n![8](../images/mysql小记-1701744118087.png)\n\n# 事务\n##### 事务特性\n- 原子性（`Atomicity`）：事务是不可分割的最小单元，要么全部成功，要么全部失败\n- 一致性（`Consistensy`）:事务完成时，必须使所有的数据都保持一致状态\n- 隔离性（`Isolation`）：保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性（`Durability`）：事务一旦提交或者回滚，他对数据库中的数据的改变就是永久的\n\n##### 并发问题\n`此处还有`丢失修改`，指两个线程同时改，最后就是后面改的数据`\n\n![9](../images/mysql小记-1701744125502.png)\n\n##### 事务隔离界别\n`mysql8当前事务隔离级别repeatable-read已经可以解决幻读问题`\n![10](../images/mysql小记-1701744131762.png)\n\n##### redolog和undolog\n- `buffer pool`缓冲池：位于主存中，在执行增删改操作的时候，先操作缓冲池中的数据（缓冲池中没有则从磁盘加载进缓冲池），缓冲池的数据以一定频率刷新到磁盘，减少磁盘IO,加快处理速度\n- `page`数据页：InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认16kb，页中存储行数据\n\n\n1.`redolog`分为`redo log buffer`(内存中)和`redo log file`（磁盘中），当`buffer pool`刷新数据到磁盘出错的时候，使用redolog进行数据恢复（`实现事务的持久性`）\n\n![11](../images/mysql小记-1701744138342.png)\n2. `undolog`也称作回滚日志——记录了每条增删改语句的逆语句（`回滚`和`MVCC`）(`实现事务的原子性`)\n\n###### MVCC\n- 表记录中的隐藏字段（`DB_ROLL_ID`指向上一个版本id，`DB_TAX_ID`当前版本id）\n\n![12](../images/mysql小记-1701744145264.png)\n\n- readview\n\n![13](../images/mysql小记-1701744154056.png)\n\n- 数据库默认隔离级别RR情况下一直复用第一个readview，保证了每次查询数据一致\n\n# 主从同步原理\n\n1. 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。\n2. 从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志Relay Log 。\n3. 从库重做中继日志中的事件，将改变反映它自己的数据\n\n\n![14](../images/mysql小记-1701744163753.png)\n\n# 分库分表\n- 水平分库：将一个库的数据分到多个库中，解决海量数据存储和高并发问题\n- 水平分表：解决单表存储和性能问题（用的少）\n- 垂直分库：微服务架构按业务分库\n- 垂直分表：冷热数据分离，多表互不影响\n\n# 三大范式\n- 第⼀范式：每个列都不可以再拆分。\n- 第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。\n- `第三范式`：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键(`尽量遵守`)\n\n# InnoDB和MyISAM的区别\n- 锁粒度：InnoDB为行锁，MyISAM为表锁\n- 可恢复性：InnoDB有事务日志，MyISAM不支持事务\n- InnoDB是聚簇索引，叶子节点存储着行数据，MyISAM是非聚簇索引，叶子节点存储的是行数据地址，需要再次寻址\n\n","slug":"mysql小记","published":1,"updated":"2023-12-05T03:06:28.506Z","_id":"clprqo1q10000tspk1sufch0x","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>整理自各大面经及白马视频</p>\n</blockquote>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h3 id=\"定位慢查询\"><a href=\"#定位慢查询\" class=\"headerlink\" title=\"定位慢查询\"></a>定位慢查询</h3><h5 id=\"慢查询原因（多以压测时间1s以上）\"><a href=\"#慢查询原因（多以压测时间1s以上）\" class=\"headerlink\" title=\"慢查询原因（多以压测时间1s以上）\"></a>慢查询原因（多以压测时间1s以上）</h5><ol>\n<li>聚合查询</li>\n<li>多表查询</li>\n<li>表数据量过大查询</li>\n<li>深度分页查询</li>\n</ol>\n<h5 id=\"检测工具\"><a href=\"#检测工具\" class=\"headerlink\" title=\"检测工具\"></a>检测工具</h5><ol>\n<li>调试工具：<code>Arthas</code></li>\n<li>运维工具：<code>Prometheus</code>、<code>Skywalking</code></li>\n</ol>\n<h5 id=\"mysql自带慢日志-生产环境不建议开启，会有性能损耗\"><a href=\"#mysql自带慢日志-生产环境不建议开启，会有性能损耗\" class=\"headerlink\" title=\"mysql自带慢日志(生产环境不建议开启，会有性能损耗)\"></a>mysql自带慢日志(<code>生产环境不建议开启，会有性能损耗</code>)</h5><ul>\n<li>在mysql配置文件(<code>etc/my.cnf</code>)中配置如下信息</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启mysql慢日志查询开关</span></span><br><span class=\"line\"><span class=\"string\">slow_query_log=1</span></span><br><span class=\"line\"><span class=\"comment\"># 设置慢日志的时间为2s，sql语句执行时间超过两秒，则会被视为慢查询，记录查询日志</span></span><br><span class=\"line\"><span class=\"string\">long_query_time=2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"慢sql优化\"><a href=\"#慢sql优化\" class=\"headerlink\" title=\"慢sql优化\"></a>慢sql优化</h3><h5 id=\"select语句前使用explain或者desc获取mysql语句执行信息\"><a href=\"#select语句前使用explain或者desc获取mysql语句执行信息\" class=\"headerlink\" title=\"select语句前使用explain或者desc获取mysql语句执行信息\"></a>select语句前使用<code>explain</code>或者<code>desc</code>获取mysql语句执行信息</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744061305.png\" alt=\"1\"></p>\n<ul>\n<li><code>possible_key</code> 当前sql可能会用到的索引</li>\n<li><code>key</code> sql实际命中的索引</li>\n<li><code>key_len</code> 索引所占大小</li>\n<li><code>extra</code> 额外的优化建议</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744069648.png\" alt=\"2\"></p>\n<ul>\n<li><code>type</code> sql连接的类型（<code>index</code>或者<code>all</code>需要进行sql优化）</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744076874.png\" alt=\"3\"></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h5 id=\"为什么选择b-树\"><a href=\"#为什么选择b-树\" class=\"headerlink\" title=\"为什么选择b+树\"></a>为什么选择b+树</h5><ol>\n<li>阶数更多，路径更短</li>\n<li>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子节点存储数据</li>\n<li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li>\n</ol>\n<h5 id=\"b树与b-树的区别\"><a href=\"#b树与b-树的区别\" class=\"headerlink\" title=\"b树与b+树的区别\"></a>b树与b+树的区别</h5><ol>\n<li>在B树中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，在查询的时候，B+树查找效率更加稳定（每次查找都会到叶子节点）</li>\n<li>在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表</li>\n<li>磁盘读写代价b+树更低（b树会将父节点数据也加载）</li>\n</ol>\n<h5 id=\"什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\"><a href=\"#什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\" class=\"headerlink\" title=\"什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\"></a>什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744087281.png\" alt=\"4\"></p>\n<h5 id=\"回表查询\"><a href=\"#回表查询\" class=\"headerlink\" title=\"回表查询\"></a>回表查询</h5><p><code>回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表</code></p>\n<h5 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h5><ul>\n<li>覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，<code>直接返回数据</code>，性能高。</li>\n<li>如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发<code>回表查询</code>，尽量避免使用select *，尽量在返回的列中都包含添加索引的字段</li>\n</ul>\n<h5 id=\"超大分页怎么处理\"><a href=\"#超大分页怎么处理\" class=\"headerlink\" title=\"超大分页怎么处理\"></a>超大分页怎么处理</h5><ul>\n<li>场景</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744094831.png\" alt=\"5\"></p>\n<ul>\n<li>优化方案（<code>使用覆盖索引+子查询</code>）<br><code>先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了因为查询id的时候，走的覆盖索引，所以效率可以提升很多</code><br><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744101965.png\" alt=\"6\"></li>\n</ul>\n<h5 id=\"索引创建原则\"><a href=\"#索引创建原则\" class=\"headerlink\" title=\"索引创建原则\"></a>索引创建原则</h5><ol>\n<li>数据量较大，查询频繁（10万条）</li>\n<li>正对常作为查询条件（where）、排序（order by）、分组（group by） 操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率就越高</li>\n<li>字符串类型的字段，且字段长度较长，可以针对字段特点，建立前缀索引</li>\n<li>尽量选用联合索引，减少单列索引，查询时候可以使用最左前缀法则覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>控制索引数量，影响增删改的效率（索引重构时间！）</li>\n</ol>\n<h5 id=\"索引失效场景（使用explain检查）\"><a href=\"#索引失效场景（使用explain检查）\" class=\"headerlink\" title=\"索引失效场景（使用explain检查）\"></a>索引失效场景（使用explain检查）</h5><ol>\n<li>违反最左前缀法则</li>\n<li>对于<code>联合索引</code>,范围查询右边的列索引失效</li>\n</ol>\n<p><code>如下图，</code>status<code>使用了范围查询，导致address未使用索引</code></p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744109641.png\" alt=\"7\"></p>\n<ol start=\"3\">\n<li>在索引列上使用运算操作导致失效</li>\n<li>模糊匹配%未在尾部导致失效</li>\n</ol>\n<h3 id=\"sql优化方案\"><a href=\"#sql优化方案\" class=\"headerlink\" title=\"sql优化方案\"></a>sql优化方案</h3><h5 id=\"表的设计优化\"><a href=\"#表的设计优化\" class=\"headerlink\" title=\"表的设计优化\"></a>表的设计优化</h5><p>1.tinyint、int 、bigint根据实际情况选择<br>2.char定长效率高，varchar可变长度，效率较低</p>\n<h5 id=\"sql语句优化\"><a href=\"#sql语句优化\" class=\"headerlink\" title=\"sql语句优化\"></a>sql语句优化</h5><ol>\n<li>select 语句尽量指定字段名称（避免*）</li>\n<li>sql避免索引失效</li>\n<li>union all 不会过滤重复数据，union会自动过滤重复数据（导致多一层过滤降低效率）</li>\n<li>避免在where中对字段进行表达式操作</li>\n<li>如果是表关联的话，尽量使用innerjoin ，不要使用left join、right join，如必须使用 一定要以小表为驱动</li>\n</ol>\n<h5 id=\"主从复制、读写分离\"><a href=\"#主从复制、读写分离\" class=\"headerlink\" title=\"主从复制、读写分离\"></a>主从复制、读写分离</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744118087.png\" alt=\"8\"></p>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><h5 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h5><ul>\n<li>原子性（<code>Atomicity</code>）：事务是不可分割的最小单元，要么全部成功，要么全部失败</li>\n<li>一致性（<code>Consistensy</code>）:事务完成时，必须使所有的数据都保持一致状态</li>\n<li>隔离性（<code>Isolation</code>）：保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性（<code>Durability</code>）：事务一旦提交或者回滚，他对数据库中的数据的改变就是永久的</li>\n</ul>\n<h5 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h5><p><code>此处还有</code>丢失修改<code>，指两个线程同时改，最后就是后面改的数据</code></p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744125502.png\" alt=\"9\"></p>\n<h5 id=\"事务隔离界别\"><a href=\"#事务隔离界别\" class=\"headerlink\" title=\"事务隔离界别\"></a>事务隔离界别</h5><p><code>mysql8当前事务隔离级别repeatable-read已经可以解决幻读问题</code><br><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744131762.png\" alt=\"10\"></p>\n<h5 id=\"redolog和undolog\"><a href=\"#redolog和undolog\" class=\"headerlink\" title=\"redolog和undolog\"></a>redolog和undolog</h5><ul>\n<li><code>buffer pool</code>缓冲池：位于主存中，在执行增删改操作的时候，先操作缓冲池中的数据（缓冲池中没有则从磁盘加载进缓冲池），缓冲池的数据以一定频率刷新到磁盘，减少磁盘IO,加快处理速度</li>\n<li><code>page</code>数据页：InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认16kb，页中存储行数据</li>\n</ul>\n<p>1.<code>redolog</code>分为<code>redo log buffer</code>(内存中)和<code>redo log file</code>（磁盘中），当<code>buffer pool</code>刷新数据到磁盘出错的时候，使用redolog进行数据恢复（<code>实现事务的持久性</code>）</p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744138342.png\" alt=\"11\"><br>2. <code>undolog</code>也称作回滚日志——记录了每条增删改语句的逆语句（<code>回滚</code>和<code>MVCC</code>）(<code>实现事务的原子性</code>)</p>\n<h6 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h6><ul>\n<li>表记录中的隐藏字段（<code>DB_ROLL_ID</code>指向上一个版本id，<code>DB_TAX_ID</code>当前版本id）</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744145264.png\" alt=\"12\"></p>\n<ul>\n<li>readview</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744154056.png\" alt=\"13\"></p>\n<ul>\n<li>数据库默认隔离级别RR情况下一直复用第一个readview，保证了每次查询数据一致</li>\n</ul>\n<h1 id=\"主从同步原理\"><a href=\"#主从同步原理\" class=\"headerlink\" title=\"主从同步原理\"></a>主从同步原理</h1><ol>\n<li>主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li>\n<li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志Relay Log 。</li>\n<li>从库重做中继日志中的事件，将改变反映它自己的数据</li>\n</ol>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744163753.png\" alt=\"14\"></p>\n<h1 id=\"分库分表\"><a href=\"#分库分表\" class=\"headerlink\" title=\"分库分表\"></a>分库分表</h1><ul>\n<li>水平分库：将一个库的数据分到多个库中，解决海量数据存储和高并发问题</li>\n<li>水平分表：解决单表存储和性能问题（用的少）</li>\n<li>垂直分库：微服务架构按业务分库</li>\n<li>垂直分表：冷热数据分离，多表互不影响</li>\n</ul>\n<h1 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h1><ul>\n<li>第⼀范式：每个列都不可以再拆分。</li>\n<li>第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。</li>\n<li><code>第三范式</code>：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键(<code>尽量遵守</code>)</li>\n</ul>\n<h1 id=\"InnoDB和MyISAM的区别\"><a href=\"#InnoDB和MyISAM的区别\" class=\"headerlink\" title=\"InnoDB和MyISAM的区别\"></a>InnoDB和MyISAM的区别</h1><ul>\n<li>锁粒度：InnoDB为行锁，MyISAM为表锁</li>\n<li>可恢复性：InnoDB有事务日志，MyISAM不支持事务</li>\n<li>InnoDB是聚簇索引，叶子节点存储着行数据，MyISAM是非聚簇索引，叶子节点存储的是行数据地址，需要再次寻址</li>\n</ul>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>整理自各大面经及白马视频</p>\n</blockquote>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h3 id=\"定位慢查询\"><a href=\"#定位慢查询\" class=\"headerlink\" title=\"定位慢查询\"></a>定位慢查询</h3><h5 id=\"慢查询原因（多以压测时间1s以上）\"><a href=\"#慢查询原因（多以压测时间1s以上）\" class=\"headerlink\" title=\"慢查询原因（多以压测时间1s以上）\"></a>慢查询原因（多以压测时间1s以上）</h5><ol>\n<li>聚合查询</li>\n<li>多表查询</li>\n<li>表数据量过大查询</li>\n<li>深度分页查询</li>\n</ol>\n<h5 id=\"检测工具\"><a href=\"#检测工具\" class=\"headerlink\" title=\"检测工具\"></a>检测工具</h5><ol>\n<li>调试工具：<code>Arthas</code></li>\n<li>运维工具：<code>Prometheus</code>、<code>Skywalking</code></li>\n</ol>\n<h5 id=\"mysql自带慢日志-生产环境不建议开启，会有性能损耗\"><a href=\"#mysql自带慢日志-生产环境不建议开启，会有性能损耗\" class=\"headerlink\" title=\"mysql自带慢日志(生产环境不建议开启，会有性能损耗)\"></a>mysql自带慢日志(<code>生产环境不建议开启，会有性能损耗</code>)</h5><ul>\n<li>在mysql配置文件(<code>etc/my.cnf</code>)中配置如下信息</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启mysql慢日志查询开关</span></span><br><span class=\"line\"><span class=\"string\">slow_query_log=1</span></span><br><span class=\"line\"><span class=\"comment\"># 设置慢日志的时间为2s，sql语句执行时间超过两秒，则会被视为慢查询，记录查询日志</span></span><br><span class=\"line\"><span class=\"string\">long_query_time=2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"慢sql优化\"><a href=\"#慢sql优化\" class=\"headerlink\" title=\"慢sql优化\"></a>慢sql优化</h3><h5 id=\"select语句前使用explain或者desc获取mysql语句执行信息\"><a href=\"#select语句前使用explain或者desc获取mysql语句执行信息\" class=\"headerlink\" title=\"select语句前使用explain或者desc获取mysql语句执行信息\"></a>select语句前使用<code>explain</code>或者<code>desc</code>获取mysql语句执行信息</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744061305.png\" alt=\"1\"></p>\n<ul>\n<li><code>possible_key</code> 当前sql可能会用到的索引</li>\n<li><code>key</code> sql实际命中的索引</li>\n<li><code>key_len</code> 索引所占大小</li>\n<li><code>extra</code> 额外的优化建议</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744069648.png\" alt=\"2\"></p>\n<ul>\n<li><code>type</code> sql连接的类型（<code>index</code>或者<code>all</code>需要进行sql优化）</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744076874.png\" alt=\"3\"></p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h5 id=\"为什么选择b-树\"><a href=\"#为什么选择b-树\" class=\"headerlink\" title=\"为什么选择b+树\"></a>为什么选择b+树</h5><ol>\n<li>阶数更多，路径更短</li>\n<li>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子节点存储数据</li>\n<li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li>\n</ol>\n<h5 id=\"b树与b-树的区别\"><a href=\"#b树与b-树的区别\" class=\"headerlink\" title=\"b树与b+树的区别\"></a>b树与b+树的区别</h5><ol>\n<li>在B树中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，在查询的时候，B+树查找效率更加稳定（每次查找都会到叶子节点）</li>\n<li>在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表</li>\n<li>磁盘读写代价b+树更低（b树会将父节点数据也加载）</li>\n</ol>\n<h5 id=\"什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\"><a href=\"#什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\" class=\"headerlink\" title=\"什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）\"></a>什么是聚簇索引（主键或者唯一索引）和非聚簇索引（二级索引、非聚簇索引）</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744087281.png\" alt=\"4\"></p>\n<h5 id=\"回表查询\"><a href=\"#回表查询\" class=\"headerlink\" title=\"回表查询\"></a>回表查询</h5><p><code>回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表</code></p>\n<h5 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h5><ul>\n<li>覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，<code>直接返回数据</code>，性能高。</li>\n<li>如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发<code>回表查询</code>，尽量避免使用select *，尽量在返回的列中都包含添加索引的字段</li>\n</ul>\n<h5 id=\"超大分页怎么处理\"><a href=\"#超大分页怎么处理\" class=\"headerlink\" title=\"超大分页怎么处理\"></a>超大分页怎么处理</h5><ul>\n<li>场景</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744094831.png\" alt=\"5\"></p>\n<ul>\n<li>优化方案（<code>使用覆盖索引+子查询</code>）<br><code>先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了因为查询id的时候，走的覆盖索引，所以效率可以提升很多</code><br><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744101965.png\" alt=\"6\"></li>\n</ul>\n<h5 id=\"索引创建原则\"><a href=\"#索引创建原则\" class=\"headerlink\" title=\"索引创建原则\"></a>索引创建原则</h5><ol>\n<li>数据量较大，查询频繁（10万条）</li>\n<li>正对常作为查询条件（where）、排序（order by）、分组（group by） 操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率就越高</li>\n<li>字符串类型的字段，且字段长度较长，可以针对字段特点，建立前缀索引</li>\n<li>尽量选用联合索引，减少单列索引，查询时候可以使用最左前缀法则覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>控制索引数量，影响增删改的效率（索引重构时间！）</li>\n</ol>\n<h5 id=\"索引失效场景（使用explain检查）\"><a href=\"#索引失效场景（使用explain检查）\" class=\"headerlink\" title=\"索引失效场景（使用explain检查）\"></a>索引失效场景（使用explain检查）</h5><ol>\n<li>违反最左前缀法则</li>\n<li>对于<code>联合索引</code>,范围查询右边的列索引失效</li>\n</ol>\n<p><code>如下图，</code>status<code>使用了范围查询，导致address未使用索引</code></p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744109641.png\" alt=\"7\"></p>\n<ol start=\"3\">\n<li>在索引列上使用运算操作导致失效</li>\n<li>模糊匹配%未在尾部导致失效</li>\n</ol>\n<h3 id=\"sql优化方案\"><a href=\"#sql优化方案\" class=\"headerlink\" title=\"sql优化方案\"></a>sql优化方案</h3><h5 id=\"表的设计优化\"><a href=\"#表的设计优化\" class=\"headerlink\" title=\"表的设计优化\"></a>表的设计优化</h5><p>1.tinyint、int 、bigint根据实际情况选择<br>2.char定长效率高，varchar可变长度，效率较低</p>\n<h5 id=\"sql语句优化\"><a href=\"#sql语句优化\" class=\"headerlink\" title=\"sql语句优化\"></a>sql语句优化</h5><ol>\n<li>select 语句尽量指定字段名称（避免*）</li>\n<li>sql避免索引失效</li>\n<li>union all 不会过滤重复数据，union会自动过滤重复数据（导致多一层过滤降低效率）</li>\n<li>避免在where中对字段进行表达式操作</li>\n<li>如果是表关联的话，尽量使用innerjoin ，不要使用left join、right join，如必须使用 一定要以小表为驱动</li>\n</ol>\n<h5 id=\"主从复制、读写分离\"><a href=\"#主从复制、读写分离\" class=\"headerlink\" title=\"主从复制、读写分离\"></a>主从复制、读写分离</h5><p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744118087.png\" alt=\"8\"></p>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><h5 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h5><ul>\n<li>原子性（<code>Atomicity</code>）：事务是不可分割的最小单元，要么全部成功，要么全部失败</li>\n<li>一致性（<code>Consistensy</code>）:事务完成时，必须使所有的数据都保持一致状态</li>\n<li>隔离性（<code>Isolation</code>）：保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性（<code>Durability</code>）：事务一旦提交或者回滚，他对数据库中的数据的改变就是永久的</li>\n</ul>\n<h5 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h5><p><code>此处还有</code>丢失修改<code>，指两个线程同时改，最后就是后面改的数据</code></p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744125502.png\" alt=\"9\"></p>\n<h5 id=\"事务隔离界别\"><a href=\"#事务隔离界别\" class=\"headerlink\" title=\"事务隔离界别\"></a>事务隔离界别</h5><p><code>mysql8当前事务隔离级别repeatable-read已经可以解决幻读问题</code><br><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744131762.png\" alt=\"10\"></p>\n<h5 id=\"redolog和undolog\"><a href=\"#redolog和undolog\" class=\"headerlink\" title=\"redolog和undolog\"></a>redolog和undolog</h5><ul>\n<li><code>buffer pool</code>缓冲池：位于主存中，在执行增删改操作的时候，先操作缓冲池中的数据（缓冲池中没有则从磁盘加载进缓冲池），缓冲池的数据以一定频率刷新到磁盘，减少磁盘IO,加快处理速度</li>\n<li><code>page</code>数据页：InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认16kb，页中存储行数据</li>\n</ul>\n<p>1.<code>redolog</code>分为<code>redo log buffer</code>(内存中)和<code>redo log file</code>（磁盘中），当<code>buffer pool</code>刷新数据到磁盘出错的时候，使用redolog进行数据恢复（<code>实现事务的持久性</code>）</p>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744138342.png\" alt=\"11\"><br>2. <code>undolog</code>也称作回滚日志——记录了每条增删改语句的逆语句（<code>回滚</code>和<code>MVCC</code>）(<code>实现事务的原子性</code>)</p>\n<h6 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h6><ul>\n<li>表记录中的隐藏字段（<code>DB_ROLL_ID</code>指向上一个版本id，<code>DB_TAX_ID</code>当前版本id）</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744145264.png\" alt=\"12\"></p>\n<ul>\n<li>readview</li>\n</ul>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744154056.png\" alt=\"13\"></p>\n<ul>\n<li>数据库默认隔离级别RR情况下一直复用第一个readview，保证了每次查询数据一致</li>\n</ul>\n<h1 id=\"主从同步原理\"><a href=\"#主从同步原理\" class=\"headerlink\" title=\"主从同步原理\"></a>主从同步原理</h1><ol>\n<li>主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li>\n<li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志Relay Log 。</li>\n<li>从库重做中继日志中的事件，将改变反映它自己的数据</li>\n</ol>\n<p><img src=\"/../images/mysql%E5%B0%8F%E8%AE%B0-1701744163753.png\" alt=\"14\"></p>\n<h1 id=\"分库分表\"><a href=\"#分库分表\" class=\"headerlink\" title=\"分库分表\"></a>分库分表</h1><ul>\n<li>水平分库：将一个库的数据分到多个库中，解决海量数据存储和高并发问题</li>\n<li>水平分表：解决单表存储和性能问题（用的少）</li>\n<li>垂直分库：微服务架构按业务分库</li>\n<li>垂直分表：冷热数据分离，多表互不影响</li>\n</ul>\n<h1 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h1><ul>\n<li>第⼀范式：每个列都不可以再拆分。</li>\n<li>第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。</li>\n<li><code>第三范式</code>：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键(<code>尽量遵守</code>)</li>\n</ul>\n<h1 id=\"InnoDB和MyISAM的区别\"><a href=\"#InnoDB和MyISAM的区别\" class=\"headerlink\" title=\"InnoDB和MyISAM的区别\"></a>InnoDB和MyISAM的区别</h1><ul>\n<li>锁粒度：InnoDB为行锁，MyISAM为表锁</li>\n<li>可恢复性：InnoDB有事务日志，MyISAM不支持事务</li>\n<li>InnoDB是聚簇索引，叶子节点存储着行数据，MyISAM是非聚簇索引，叶子节点存储的是行数据地址，需要再次寻址</li>\n</ul>\n"},{"title":"next.js实战","keywords":"next.js实战","description":"next.js实战记录","top_img":"/img/qianduan.png","comments":1,"cover":"/img/qianduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"本文章转载自我的掘金","date":"2023-12-05T02:38:54.000Z","_content":"\n\n\n# nexj.js特点\n\n#### 服务端渲染/客户端渲染/同构渲染的优缺点\n\n- 首屏等待\n\n在 SPA 模式下，所有的数据请求和 Dom 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在“白屏”等待，而服务端渲染所有数据请求和 html内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。\n\n- SEO 优化\n\n有些网站的流量来源主要还是靠搜索引擎，所以网站的 SEO 还是很重要的，而 SPA 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。\n\n##### 服务端渲染优点\n- 前端渲染时间。因为后端拼接htm，浏览器只需直接渲染出来。\n- 有利于SEO。服务端有完整的html页面，所以爬虫更容易获得信息，更利于seo\n- 无需占用客户端资源，模板解析由后端完成，客户端只需解析标准的html页面，这样对客户端的资源占用更少，尤其是移动端，可以更加省电。\n- 后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 等。\n\n##### 服务端渲染缺点\n- 不利于前后端分离，开发效率很低\n- 占用服务器端资源。请求过多对服务器压力很大。\n- 即使局部页面发生变化也需要重新请求整个页面，费流量等。\n\n\n#### next.js 项目搭建\n- 先上图，next.js渲染流程\n\n![1](../images/next-js实战-1701744261397.png)\n\n- 使用next.js官方脚手架快速生成next.js项目\n\n> npm init next-app nextjs-blog --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n\n此时使用`yarn dev`就可以迅速启动项目啦\n\n\n![2](../images/next-js实战-1701744267906.png)\n\n- next.js初探----页面跳转link\n\n```\nimport Link from 'next/link'\n\n<Link href=\"/test\">\n   <span>test`1</span>\n   <span>test`2</span>\n </Link>\n```\n- next.js初探----页面跳转router\n```\nimport Router from 'next/router'\n<button onClick={()=>{Router.push('/test')}}>去test页面</button>\n```\n\n- next.js初探----接收页面跳转传入参数\n```\n\nimport { withRouter } from 'next/router'\nimport Link from 'next/link'\n\nconst  Test = ({router}) =>{\n    return(\n        <div>\n            <p>{router.query.id}</p>\n            <Link href={{pathname:'/'}}>\n                <span>回首页</span>\n            </Link>\n        </div>\n    )\n}\nexport default withRouter(Test)\n\n```\n\n- next.js初探----路由钩子\n\n```\n// 监听\nRouter.events.on('routeChangeStart', handleRouteChange)\n// 关闭\nRouter.events.off('routeChangeStart', handleRouteChange)\n\n Router.events.on('routeChangeStart',(...args)=>{\n   console.log('路由开始变化',...args)\n})\n\nRouter.events.on('routeChangeComplete',(...args)=>{\n  console.log('路由结束变化',...args)\n})\n\nRouter.events.on('beforeHistoryChange,(...args)=>{\n  console.log('浏览器 history改变之前',...args)\n})\n\nRouter.events.on('routeChangeError,(...args)=>{\n  console.log('跳转发生错误',...args)\n})\n\nRouter.events.on('hashChangeStart,(...args)=>{\n  console.log('hash模式路由改变刚开始',...args)\n})\n\nRouter.events.on('hashChangeComplete,(...args)=>{\n  console.log('hash模式路由改变结束',...args)\n})\n```\n\n#### next.js核心---getServerSideProps（老师推荐）\n\n在初始渲染时就拿到数据，需要在页面组件处导出名为getServerSideProps的async函数，如果不需要接口数据做seo，也可以在页面加载后使用ajax请求\n```\nimport { useRouter } from 'next/router'\n\nexport async function getServerSideProps(context) {\n\t// context为路由信息\n\tconst query = context.query\n\tconst id = query.id\n\tconst res = await apirequestxxx(id)\n\n  return {\n  \t// 信息可以在组件的props中拿到\n    props: {\n\t\t\tdetailData: res.data\n\t\t}\n  }\n}\n\nconst NoData = ({detailData}) => {\n  return (\n    <div>\n      // ...\n    </div>\n  )\n}\n\n```\n\n> 聊胜于无，感觉前后端分离开发才是大势所趋\n\n\n","source":"_posts/next-js实战.md","raw":"---\ntitle: next.js实战\ntags: \n    - next.js\n    - react\ncategories: 前端\nkeywords: next.js实战\ndescription: next.js实战记录\ntop_img: /img/qianduan.png\ncomments: true\ncover: /img/qianduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 本文章转载自我的掘金\ndate: 2023-12-05 10:38:54\n---\n\n\n\n# nexj.js特点\n\n#### 服务端渲染/客户端渲染/同构渲染的优缺点\n\n- 首屏等待\n\n在 SPA 模式下，所有的数据请求和 Dom 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在“白屏”等待，而服务端渲染所有数据请求和 html内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。\n\n- SEO 优化\n\n有些网站的流量来源主要还是靠搜索引擎，所以网站的 SEO 还是很重要的，而 SPA 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。\n\n##### 服务端渲染优点\n- 前端渲染时间。因为后端拼接htm，浏览器只需直接渲染出来。\n- 有利于SEO。服务端有完整的html页面，所以爬虫更容易获得信息，更利于seo\n- 无需占用客户端资源，模板解析由后端完成，客户端只需解析标准的html页面，这样对客户端的资源占用更少，尤其是移动端，可以更加省电。\n- 后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 等。\n\n##### 服务端渲染缺点\n- 不利于前后端分离，开发效率很低\n- 占用服务器端资源。请求过多对服务器压力很大。\n- 即使局部页面发生变化也需要重新请求整个页面，费流量等。\n\n\n#### next.js 项目搭建\n- 先上图，next.js渲染流程\n\n![1](../images/next-js实战-1701744261397.png)\n\n- 使用next.js官方脚手架快速生成next.js项目\n\n> npm init next-app nextjs-blog --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n\n此时使用`yarn dev`就可以迅速启动项目啦\n\n\n![2](../images/next-js实战-1701744267906.png)\n\n- next.js初探----页面跳转link\n\n```\nimport Link from 'next/link'\n\n<Link href=\"/test\">\n   <span>test`1</span>\n   <span>test`2</span>\n </Link>\n```\n- next.js初探----页面跳转router\n```\nimport Router from 'next/router'\n<button onClick={()=>{Router.push('/test')}}>去test页面</button>\n```\n\n- next.js初探----接收页面跳转传入参数\n```\n\nimport { withRouter } from 'next/router'\nimport Link from 'next/link'\n\nconst  Test = ({router}) =>{\n    return(\n        <div>\n            <p>{router.query.id}</p>\n            <Link href={{pathname:'/'}}>\n                <span>回首页</span>\n            </Link>\n        </div>\n    )\n}\nexport default withRouter(Test)\n\n```\n\n- next.js初探----路由钩子\n\n```\n// 监听\nRouter.events.on('routeChangeStart', handleRouteChange)\n// 关闭\nRouter.events.off('routeChangeStart', handleRouteChange)\n\n Router.events.on('routeChangeStart',(...args)=>{\n   console.log('路由开始变化',...args)\n})\n\nRouter.events.on('routeChangeComplete',(...args)=>{\n  console.log('路由结束变化',...args)\n})\n\nRouter.events.on('beforeHistoryChange,(...args)=>{\n  console.log('浏览器 history改变之前',...args)\n})\n\nRouter.events.on('routeChangeError,(...args)=>{\n  console.log('跳转发生错误',...args)\n})\n\nRouter.events.on('hashChangeStart,(...args)=>{\n  console.log('hash模式路由改变刚开始',...args)\n})\n\nRouter.events.on('hashChangeComplete,(...args)=>{\n  console.log('hash模式路由改变结束',...args)\n})\n```\n\n#### next.js核心---getServerSideProps（老师推荐）\n\n在初始渲染时就拿到数据，需要在页面组件处导出名为getServerSideProps的async函数，如果不需要接口数据做seo，也可以在页面加载后使用ajax请求\n```\nimport { useRouter } from 'next/router'\n\nexport async function getServerSideProps(context) {\n\t// context为路由信息\n\tconst query = context.query\n\tconst id = query.id\n\tconst res = await apirequestxxx(id)\n\n  return {\n  \t// 信息可以在组件的props中拿到\n    props: {\n\t\t\tdetailData: res.data\n\t\t}\n  }\n}\n\nconst NoData = ({detailData}) => {\n  return (\n    <div>\n      // ...\n    </div>\n  )\n}\n\n```\n\n> 聊胜于无，感觉前后端分离开发才是大势所趋\n\n\n","slug":"next-js实战","published":1,"updated":"2023-12-05T03:06:28.483Z","_id":"clprqo1qq0001tspk4nbr3zrh","layout":"post","photos":[],"link":"","content":"<h1 id=\"nexj-js特点\"><a href=\"#nexj-js特点\" class=\"headerlink\" title=\"nexj.js特点\"></a>nexj.js特点</h1><h4 id=\"服务端渲染-客户端渲染-同构渲染的优缺点\"><a href=\"#服务端渲染-客户端渲染-同构渲染的优缺点\" class=\"headerlink\" title=\"服务端渲染&#x2F;客户端渲染&#x2F;同构渲染的优缺点\"></a>服务端渲染&#x2F;客户端渲染&#x2F;同构渲染的优缺点</h4><ul>\n<li>首屏等待</li>\n</ul>\n<p>在 SPA 模式下，所有的数据请求和 Dom 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在“白屏”等待，而服务端渲染所有数据请求和 html内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。</p>\n<ul>\n<li>SEO 优化</li>\n</ul>\n<p>有些网站的流量来源主要还是靠搜索引擎，所以网站的 SEO 还是很重要的，而 SPA 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。</p>\n<h5 id=\"服务端渲染优点\"><a href=\"#服务端渲染优点\" class=\"headerlink\" title=\"服务端渲染优点\"></a>服务端渲染优点</h5><ul>\n<li>前端渲染时间。因为后端拼接htm，浏览器只需直接渲染出来。</li>\n<li>有利于SEO。服务端有完整的html页面，所以爬虫更容易获得信息，更利于seo</li>\n<li>无需占用客户端资源，模板解析由后端完成，客户端只需解析标准的html页面，这样对客户端的资源占用更少，尤其是移动端，可以更加省电。</li>\n<li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 等。</li>\n</ul>\n<h5 id=\"服务端渲染缺点\"><a href=\"#服务端渲染缺点\" class=\"headerlink\" title=\"服务端渲染缺点\"></a>服务端渲染缺点</h5><ul>\n<li>不利于前后端分离，开发效率很低</li>\n<li>占用服务器端资源。请求过多对服务器压力很大。</li>\n<li>即使局部页面发生变化也需要重新请求整个页面，费流量等。</li>\n</ul>\n<h4 id=\"next-js-项目搭建\"><a href=\"#next-js-项目搭建\" class=\"headerlink\" title=\"next.js 项目搭建\"></a>next.js 项目搭建</h4><ul>\n<li>先上图，next.js渲染流程</li>\n</ul>\n<p><img src=\"/../images/next-js%E5%AE%9E%E6%88%98-1701744261397.png\" alt=\"1\"></p>\n<ul>\n<li>使用next.js官方脚手架快速生成next.js项目</li>\n</ul>\n<blockquote>\n<p>npm init next-app nextjs-blog –example “<a href=\"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\">https://github.com/vercel/next-learn-starter/tree/master/learn-starter</a>“</p>\n</blockquote>\n<p>此时使用<code>yarn dev</code>就可以迅速启动项目啦</p>\n<p><img src=\"/../images/next-js%E5%AE%9E%E6%88%98-1701744267906.png\" alt=\"2\"></p>\n<ul>\n<li>next.js初探—-页面跳转link</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Link from &#x27;next/link&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link href=&quot;/test&quot;&gt;</span><br><span class=\"line\">   &lt;span&gt;test`1&lt;/span&gt;</span><br><span class=\"line\">   &lt;span&gt;test`2&lt;/span&gt;</span><br><span class=\"line\"> &lt;/Link&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>next.js初探—-页面跳转router</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Router from &#x27;next/router&#x27;</span><br><span class=\"line\">&lt;button onClick=&#123;()=&gt;&#123;Router.push(&#x27;/test&#x27;)&#125;&#125;&gt;去test页面&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>next.js初探—-接收页面跳转传入参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123; withRouter &#125; from &#x27;next/router&#x27;</span><br><span class=\"line\">import Link from &#x27;next/link&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const  Test = (&#123;router&#125;) =&gt;&#123;</span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;&#123;router.query.id&#125;&lt;/p&gt;</span><br><span class=\"line\">            &lt;Link href=&#123;&#123;pathname:&#x27;/&#x27;&#125;&#125;&gt;</span><br><span class=\"line\">                &lt;span&gt;回首页&lt;/span&gt;</span><br><span class=\"line\">            &lt;/Link&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default withRouter(Test)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>next.js初探—-路由钩子</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 监听</span><br><span class=\"line\">Router.events.on(&#x27;routeChangeStart&#x27;, handleRouteChange)</span><br><span class=\"line\">// 关闭</span><br><span class=\"line\">Router.events.off(&#x27;routeChangeStart&#x27;, handleRouteChange)</span><br><span class=\"line\"></span><br><span class=\"line\"> Router.events.on(&#x27;routeChangeStart&#x27;,(...args)=&gt;&#123;</span><br><span class=\"line\">   console.log(&#x27;路由开始变化&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;routeChangeComplete&#x27;,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;路由结束变化&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;beforeHistoryChange,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;浏览器 history改变之前&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;routeChangeError,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;跳转发生错误&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;hashChangeStart,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;hash模式路由改变刚开始&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;hashChangeComplete,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;hash模式路由改变结束&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"next-js核心—getServerSideProps（老师推荐）\"><a href=\"#next-js核心—getServerSideProps（老师推荐）\" class=\"headerlink\" title=\"next.js核心—getServerSideProps（老师推荐）\"></a>next.js核心—getServerSideProps（老师推荐）</h4><p>在初始渲染时就拿到数据，需要在页面组件处导出名为getServerSideProps的async函数，如果不需要接口数据做seo，也可以在页面加载后使用ajax请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useRouter &#125; from &#x27;next/router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function getServerSideProps(context) &#123;</span><br><span class=\"line\">\t// context为路由信息</span><br><span class=\"line\">\tconst query = context.query</span><br><span class=\"line\">\tconst id = query.id</span><br><span class=\"line\">\tconst res = await apirequestxxx(id)</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">  \t// 信息可以在组件的props中拿到</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">\t\t\tdetailData: res.data</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const NoData = (&#123;detailData&#125;) =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>聊胜于无，感觉前后端分离开发才是大势所趋</p>\n</blockquote>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"nexj-js特点\"><a href=\"#nexj-js特点\" class=\"headerlink\" title=\"nexj.js特点\"></a>nexj.js特点</h1><h4 id=\"服务端渲染-客户端渲染-同构渲染的优缺点\"><a href=\"#服务端渲染-客户端渲染-同构渲染的优缺点\" class=\"headerlink\" title=\"服务端渲染&#x2F;客户端渲染&#x2F;同构渲染的优缺点\"></a>服务端渲染&#x2F;客户端渲染&#x2F;同构渲染的优缺点</h4><ul>\n<li>首屏等待</li>\n</ul>\n<p>在 SPA 模式下，所有的数据请求和 Dom 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在“白屏”等待，而服务端渲染所有数据请求和 html内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。</p>\n<ul>\n<li>SEO 优化</li>\n</ul>\n<p>有些网站的流量来源主要还是靠搜索引擎，所以网站的 SEO 还是很重要的，而 SPA 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。</p>\n<h5 id=\"服务端渲染优点\"><a href=\"#服务端渲染优点\" class=\"headerlink\" title=\"服务端渲染优点\"></a>服务端渲染优点</h5><ul>\n<li>前端渲染时间。因为后端拼接htm，浏览器只需直接渲染出来。</li>\n<li>有利于SEO。服务端有完整的html页面，所以爬虫更容易获得信息，更利于seo</li>\n<li>无需占用客户端资源，模板解析由后端完成，客户端只需解析标准的html页面，这样对客户端的资源占用更少，尤其是移动端，可以更加省电。</li>\n<li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 等。</li>\n</ul>\n<h5 id=\"服务端渲染缺点\"><a href=\"#服务端渲染缺点\" class=\"headerlink\" title=\"服务端渲染缺点\"></a>服务端渲染缺点</h5><ul>\n<li>不利于前后端分离，开发效率很低</li>\n<li>占用服务器端资源。请求过多对服务器压力很大。</li>\n<li>即使局部页面发生变化也需要重新请求整个页面，费流量等。</li>\n</ul>\n<h4 id=\"next-js-项目搭建\"><a href=\"#next-js-项目搭建\" class=\"headerlink\" title=\"next.js 项目搭建\"></a>next.js 项目搭建</h4><ul>\n<li>先上图，next.js渲染流程</li>\n</ul>\n<p><img src=\"/../images/next-js%E5%AE%9E%E6%88%98-1701744261397.png\" alt=\"1\"></p>\n<ul>\n<li>使用next.js官方脚手架快速生成next.js项目</li>\n</ul>\n<blockquote>\n<p>npm init next-app nextjs-blog –example “<a href=\"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\">https://github.com/vercel/next-learn-starter/tree/master/learn-starter</a>“</p>\n</blockquote>\n<p>此时使用<code>yarn dev</code>就可以迅速启动项目啦</p>\n<p><img src=\"/../images/next-js%E5%AE%9E%E6%88%98-1701744267906.png\" alt=\"2\"></p>\n<ul>\n<li>next.js初探—-页面跳转link</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Link from &#x27;next/link&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link href=&quot;/test&quot;&gt;</span><br><span class=\"line\">   &lt;span&gt;test`1&lt;/span&gt;</span><br><span class=\"line\">   &lt;span&gt;test`2&lt;/span&gt;</span><br><span class=\"line\"> &lt;/Link&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>next.js初探—-页面跳转router</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Router from &#x27;next/router&#x27;</span><br><span class=\"line\">&lt;button onClick=&#123;()=&gt;&#123;Router.push(&#x27;/test&#x27;)&#125;&#125;&gt;去test页面&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>next.js初探—-接收页面跳转传入参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123; withRouter &#125; from &#x27;next/router&#x27;</span><br><span class=\"line\">import Link from &#x27;next/link&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const  Test = (&#123;router&#125;) =&gt;&#123;</span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;&#123;router.query.id&#125;&lt;/p&gt;</span><br><span class=\"line\">            &lt;Link href=&#123;&#123;pathname:&#x27;/&#x27;&#125;&#125;&gt;</span><br><span class=\"line\">                &lt;span&gt;回首页&lt;/span&gt;</span><br><span class=\"line\">            &lt;/Link&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default withRouter(Test)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>next.js初探—-路由钩子</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 监听</span><br><span class=\"line\">Router.events.on(&#x27;routeChangeStart&#x27;, handleRouteChange)</span><br><span class=\"line\">// 关闭</span><br><span class=\"line\">Router.events.off(&#x27;routeChangeStart&#x27;, handleRouteChange)</span><br><span class=\"line\"></span><br><span class=\"line\"> Router.events.on(&#x27;routeChangeStart&#x27;,(...args)=&gt;&#123;</span><br><span class=\"line\">   console.log(&#x27;路由开始变化&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;routeChangeComplete&#x27;,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;路由结束变化&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;beforeHistoryChange,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;浏览器 history改变之前&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;routeChangeError,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;跳转发生错误&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;hashChangeStart,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;hash模式路由改变刚开始&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Router.events.on(&#x27;hashChangeComplete,(...args)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;hash模式路由改变结束&#x27;,...args)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"next-js核心—getServerSideProps（老师推荐）\"><a href=\"#next-js核心—getServerSideProps（老师推荐）\" class=\"headerlink\" title=\"next.js核心—getServerSideProps（老师推荐）\"></a>next.js核心—getServerSideProps（老师推荐）</h4><p>在初始渲染时就拿到数据，需要在页面组件处导出名为getServerSideProps的async函数，如果不需要接口数据做seo，也可以在页面加载后使用ajax请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useRouter &#125; from &#x27;next/router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function getServerSideProps(context) &#123;</span><br><span class=\"line\">\t// context为路由信息</span><br><span class=\"line\">\tconst query = context.query</span><br><span class=\"line\">\tconst id = query.id</span><br><span class=\"line\">\tconst res = await apirequestxxx(id)</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">  \t// 信息可以在组件的props中拿到</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">\t\t\tdetailData: res.data</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const NoData = (&#123;detailData&#125;) =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>聊胜于无，感觉前后端分离开发才是大势所趋</p>\n</blockquote>\n"},{"title":"redis在springboot项目中的使用","keywords":"springboot, redis","description":"redis二次回忆","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"本文章转载自我的掘金","date":"2023-12-05T02:38:38.000Z","_content":"\n\n### Spring-data-redis简介\n​Spring-data-redis提供了在Spring应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis, JRedis, and RJC)进行了高度封装，封装了 RedisTemplate 对象来进行对Redis的各种操作、异常处理及序列化，支持发布订阅，并对Spring 3.1 cache进行了实现，它支持所有的Redis原生的 API。\n\n### Spring-data-redis 针对 Jedis 提供的功能\n1. 连接池自动管理，提供了一个高度封装的“RedisTemplate”类\n2. 针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口\n\n-   ValueOperations：简单的K-V操作\n-   SetOperations：set类型数据操作\n-   ZSetOperations：zset类型数据操作\n-   HashOperations：针对map类型的数据操作\n-   ListOperations：针对list类型的数据操作\n\n### 加入依赖整合redis\n```xml\n<!-- redis依赖 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!-- fastjson -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.76</version>\n</dependency>\n```\n\n### 增加配置类，提供序列化方式\n```\n/**\n * @author star\n */\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    @ConditionalOnMissingBean(name = \"redisTemplate\")\n    public RedisTemplate<String, Object> redisTemplate(\n            RedisConnectionFactory redisConnectionFactory)\n            throws UnknownHostException {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n\n        RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();\n        template.setConnectionFactory(redisConnectionFactory);\n        template.setKeySerializer(jackson2JsonRedisSerializer);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setHashKeySerializer(jackson2JsonRedisSerializer);\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n\n\n    @Bean\n    @ConditionalOnMissingBean(StringRedisTemplate.class)\n    public StringRedisTemplate stringRedisTemplate(\n            RedisConnectionFactory redisConnectionFactory)\n            throws UnknownHostException {\n        StringRedisTemplate template = new StringRedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    @Bean\n    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForHash();\n    }\n}\n```\n\n### redisTemplate针对redis中五种数据类型的操作详解\n- string类型-------opsForSet和opsForValue\n\n\n```java\n   //最简单操作\n    public void set(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n    \n    //常用操作可以设置多久后过期\n   public void setWithExpire(String key, Object value, Long seconds, TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, seconds, timeUnit);\n    }\n    \n    //获取值\n    public Object get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n    \n    //是否有值\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }\n    \n    \n    public Boolean del(String key) {\n        return redisTemplate.delete(key);\n    }\n    \n    public Long batchDel(Collection<String> keys) {\n        return redisTemplate.delete(keys);\n    }\n    \n    //重新设置过期时间，作刷新用\n    public Boolean expire(String key, long seconds) {\n        return redisTemplate.expire(key, seconds, TimeUnit.SECONDS);\n    }\n    \n    //重新设置过期的日期，作刷新用\n    public Boolean expireAt(String key, Date date) {\n        return redisTemplate.expireAt(key, date);\n    }\n    \n    //根据新的 key的名称修改 redis中老的 key的名称\n    public Boolean renameIfAbsent(String oldKey, String newKey) {\n        return redisTemplate.renameIfAbsent(oldKey, newKey);\n    }\n    \n    //获取key值的类型\n    public DataType type(String key) {\n        return redisTemplate.type(key);\n    }\n    \n    //从当前redis的key中国随机取一个\n    public String randomKey() {\n        return redisTemplate.randomKey();\n    }\n    \n    //获取当前key的过期时间（可以设置时间单位）\n    public Long getExpire(String key, TimeUnit timeUnit) {\n        return redisTemplate.getExpire(key, timeUnit);\n    }\n    \n    //让当前key的值++  （此处多用数字。类型为long值）\n    public Long increment(String key) {\n        return redisTemplate.opsForValue().increment(key,1);\n    }\n    \n    //重新设置 key对应的值，如果存在返回 false，否则返回 true\n    public Boolean setIfAbsent(String key, Object value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n    \n\n    \n```\n\n- map类型-------opsForHash\n\n```\n    //新增map值，key为键  field+value是map\n    public void put(String key, Object field, Object value) {\n        redisTemplate.opsForHash().put(key, field, value);\n    }\n    \n    //用map的形式添加\n    public void putAll(String key, Map<Object, Object> map) {\n        redisTemplate.opsForHash().putAll(key, map);\n    }\n    \n    //获取 map中指定的 key值，如果存在则返回值，没有就返回null\n    public Object getMapValue(String key, String field) {\n        return redisTemplate.opsForHash().get(key, field);\n    }\n    \n    //根据 key获取 Map对象\n    public Map<Object, Object> getMap(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n    \n    //当 hashKey不存在的时候，进行设置 map的值\n    public Boolean putIfAbsent(String key, Object hashKey, Object value) {\n        return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n    }\n    \n    //此处用法和opsForValue相同\n    public Long incrementLong(String key, Object field, long increment) {\n        return redisTemplate.opsForHash().increment(key, field, increment);\n    }\n    \n    //获取 map中的所有字段\n    public Set<Object> keys(String key) {\n        return redisTemplate.opsForHash().keys(key);\n    }\n    \n```\n\n- list类型-------opsForList\n\n```\n    //把值添加在list的前面，可以是单个值也可以多个值（也可以是List<Object> value类型）\n    //注意此处的left就是从前面插入，right就是插入到末尾\n    public Long leftPush(String key, Object... values) {\n        return redisTemplate.opsForList().leftPushAll(key, values);\n    }\n    \n    //根据索引获取list中的值\n    public Object index(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }\n    \n    //从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边\n    public Object rightPopAndLeftPush(String sourceKey, String destinationKey) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);\n    }\n    \n    //从存储在键中的列表中删除等于值的元素的第一个计数事件。count> 0：删除等于从左到右移动的值的第一个元素；count< 0：删除等于从右到左移动的值的第一个元素；count = 0：删除等于value的所有元素。\n    //index从第几个值开始去进行删除，返回值是删除元素的数量\n    public Long remove(String key, long index, Object value) {\n        return redisTemplate.opsForList().remove(key, index, value);\n    }\n    \n```\n\n\n- set类型-------opsForSet\n\n```\n    //添加元素到 set中\n    public Long add(String key, Collection<Object> values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }\n    \n    //从 set中删除一个随机元素，并返回该元素\n    public Object pop(String key) {\n        return redisTemplate.opsForSet().pop(key);\n    }\n    \n    //判断 set集合中是否存在value值\n    public Boolean isMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n    \n    \n    //以下多个方法均为获取两个集合的交集或者并集或者差集并返回一个集合，其中一个可以是自定义的集合，也可以是redis中的集合\n    //交集\n    public Set<Object> intersect(String key, String otherKey) {\n        return redisTemplate.opsForSet().intersect(key, otherKey);\n    }\n    public Set<Object> intersect(String key, Collection<String> collection) {\n        return redisTemplate.opsForSet().intersect(key, collection);\n    }\n    //并集\n    public Set<Object> union(String key, String key1) {\n        return redisTemplate.opsForSet().union(key, key1);\n    }\n    //差集\n    public Set<Object> difference(String key, String key1) {\n        return redisTemplate.opsForSet().difference(key, key1);\n    }\n    \n    //获取集合中的所有元素\n    public Set<Object> members(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n    \n    //移除集合中某个元素\n    public Long remove(String key, Collection<Object> objects) {\n        return redisTemplate.opsForSet().remove(key, objects);\n    }\n```\n\n- set类型-------opsForZSet(相比于set为元素增加了score，默认安装score从小到大排序)\n\n```\n    //添加元素到 zset，从小到大排序\n    public Boolean add(String key, Object value, double score) {\n        return redisTemplate.opsForZSet().add(key, value, score);\n    }\n    \n    //增加元素的 score值同时返回增加后的 score值\n    public Double incrementScore(String key, Object value, double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, score);\n    }\n    \n    //返回 zset元素在集合的从大到小排名\n    public Long rank(String key, Object object) {\n        return redisTemplate.opsForZSet().rank(key, object);\n    }\n    //返回 zset元素在集合的从大到小排名\n    public Long reverseRank(String key, Object object) {\n        return redisTemplate.opsForZSet().reverseRank(key, object);\n    }\n    \n    //获取集合中 key、value元素的 score值\n    public Double score(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }\n\n    //删除多个value的值\n    public Long remove(String key, Object... values) {\n        return redisTemplate.opsForZSet().remove(key, values);\n    }\n```","source":"_posts/redis在springboot项目中的使用.md","raw":"---\ntitle: redis在springboot项目中的使用\ntags: \n    - springboot\n    - redis\ncategories: 后端\nkeywords: springboot, redis\ndescription: redis二次回忆\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 本文章转载自我的掘金\ndate: 2023-12-05 10:38:38\n---\n\n\n### Spring-data-redis简介\n​Spring-data-redis提供了在Spring应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis, JRedis, and RJC)进行了高度封装，封装了 RedisTemplate 对象来进行对Redis的各种操作、异常处理及序列化，支持发布订阅，并对Spring 3.1 cache进行了实现，它支持所有的Redis原生的 API。\n\n### Spring-data-redis 针对 Jedis 提供的功能\n1. 连接池自动管理，提供了一个高度封装的“RedisTemplate”类\n2. 针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口\n\n-   ValueOperations：简单的K-V操作\n-   SetOperations：set类型数据操作\n-   ZSetOperations：zset类型数据操作\n-   HashOperations：针对map类型的数据操作\n-   ListOperations：针对list类型的数据操作\n\n### 加入依赖整合redis\n```xml\n<!-- redis依赖 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!-- fastjson -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.76</version>\n</dependency>\n```\n\n### 增加配置类，提供序列化方式\n```\n/**\n * @author star\n */\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    @ConditionalOnMissingBean(name = \"redisTemplate\")\n    public RedisTemplate<String, Object> redisTemplate(\n            RedisConnectionFactory redisConnectionFactory)\n            throws UnknownHostException {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n\n        RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();\n        template.setConnectionFactory(redisConnectionFactory);\n        template.setKeySerializer(jackson2JsonRedisSerializer);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setHashKeySerializer(jackson2JsonRedisSerializer);\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n\n\n    @Bean\n    @ConditionalOnMissingBean(StringRedisTemplate.class)\n    public StringRedisTemplate stringRedisTemplate(\n            RedisConnectionFactory redisConnectionFactory)\n            throws UnknownHostException {\n        StringRedisTemplate template = new StringRedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    @Bean\n    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForHash();\n    }\n}\n```\n\n### redisTemplate针对redis中五种数据类型的操作详解\n- string类型-------opsForSet和opsForValue\n\n\n```java\n   //最简单操作\n    public void set(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n    \n    //常用操作可以设置多久后过期\n   public void setWithExpire(String key, Object value, Long seconds, TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, seconds, timeUnit);\n    }\n    \n    //获取值\n    public Object get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n    \n    //是否有值\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }\n    \n    \n    public Boolean del(String key) {\n        return redisTemplate.delete(key);\n    }\n    \n    public Long batchDel(Collection<String> keys) {\n        return redisTemplate.delete(keys);\n    }\n    \n    //重新设置过期时间，作刷新用\n    public Boolean expire(String key, long seconds) {\n        return redisTemplate.expire(key, seconds, TimeUnit.SECONDS);\n    }\n    \n    //重新设置过期的日期，作刷新用\n    public Boolean expireAt(String key, Date date) {\n        return redisTemplate.expireAt(key, date);\n    }\n    \n    //根据新的 key的名称修改 redis中老的 key的名称\n    public Boolean renameIfAbsent(String oldKey, String newKey) {\n        return redisTemplate.renameIfAbsent(oldKey, newKey);\n    }\n    \n    //获取key值的类型\n    public DataType type(String key) {\n        return redisTemplate.type(key);\n    }\n    \n    //从当前redis的key中国随机取一个\n    public String randomKey() {\n        return redisTemplate.randomKey();\n    }\n    \n    //获取当前key的过期时间（可以设置时间单位）\n    public Long getExpire(String key, TimeUnit timeUnit) {\n        return redisTemplate.getExpire(key, timeUnit);\n    }\n    \n    //让当前key的值++  （此处多用数字。类型为long值）\n    public Long increment(String key) {\n        return redisTemplate.opsForValue().increment(key,1);\n    }\n    \n    //重新设置 key对应的值，如果存在返回 false，否则返回 true\n    public Boolean setIfAbsent(String key, Object value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n    \n\n    \n```\n\n- map类型-------opsForHash\n\n```\n    //新增map值，key为键  field+value是map\n    public void put(String key, Object field, Object value) {\n        redisTemplate.opsForHash().put(key, field, value);\n    }\n    \n    //用map的形式添加\n    public void putAll(String key, Map<Object, Object> map) {\n        redisTemplate.opsForHash().putAll(key, map);\n    }\n    \n    //获取 map中指定的 key值，如果存在则返回值，没有就返回null\n    public Object getMapValue(String key, String field) {\n        return redisTemplate.opsForHash().get(key, field);\n    }\n    \n    //根据 key获取 Map对象\n    public Map<Object, Object> getMap(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n    \n    //当 hashKey不存在的时候，进行设置 map的值\n    public Boolean putIfAbsent(String key, Object hashKey, Object value) {\n        return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n    }\n    \n    //此处用法和opsForValue相同\n    public Long incrementLong(String key, Object field, long increment) {\n        return redisTemplate.opsForHash().increment(key, field, increment);\n    }\n    \n    //获取 map中的所有字段\n    public Set<Object> keys(String key) {\n        return redisTemplate.opsForHash().keys(key);\n    }\n    \n```\n\n- list类型-------opsForList\n\n```\n    //把值添加在list的前面，可以是单个值也可以多个值（也可以是List<Object> value类型）\n    //注意此处的left就是从前面插入，right就是插入到末尾\n    public Long leftPush(String key, Object... values) {\n        return redisTemplate.opsForList().leftPushAll(key, values);\n    }\n    \n    //根据索引获取list中的值\n    public Object index(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }\n    \n    //从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边\n    public Object rightPopAndLeftPush(String sourceKey, String destinationKey) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);\n    }\n    \n    //从存储在键中的列表中删除等于值的元素的第一个计数事件。count> 0：删除等于从左到右移动的值的第一个元素；count< 0：删除等于从右到左移动的值的第一个元素；count = 0：删除等于value的所有元素。\n    //index从第几个值开始去进行删除，返回值是删除元素的数量\n    public Long remove(String key, long index, Object value) {\n        return redisTemplate.opsForList().remove(key, index, value);\n    }\n    \n```\n\n\n- set类型-------opsForSet\n\n```\n    //添加元素到 set中\n    public Long add(String key, Collection<Object> values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }\n    \n    //从 set中删除一个随机元素，并返回该元素\n    public Object pop(String key) {\n        return redisTemplate.opsForSet().pop(key);\n    }\n    \n    //判断 set集合中是否存在value值\n    public Boolean isMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n    \n    \n    //以下多个方法均为获取两个集合的交集或者并集或者差集并返回一个集合，其中一个可以是自定义的集合，也可以是redis中的集合\n    //交集\n    public Set<Object> intersect(String key, String otherKey) {\n        return redisTemplate.opsForSet().intersect(key, otherKey);\n    }\n    public Set<Object> intersect(String key, Collection<String> collection) {\n        return redisTemplate.opsForSet().intersect(key, collection);\n    }\n    //并集\n    public Set<Object> union(String key, String key1) {\n        return redisTemplate.opsForSet().union(key, key1);\n    }\n    //差集\n    public Set<Object> difference(String key, String key1) {\n        return redisTemplate.opsForSet().difference(key, key1);\n    }\n    \n    //获取集合中的所有元素\n    public Set<Object> members(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n    \n    //移除集合中某个元素\n    public Long remove(String key, Collection<Object> objects) {\n        return redisTemplate.opsForSet().remove(key, objects);\n    }\n```\n\n- set类型-------opsForZSet(相比于set为元素增加了score，默认安装score从小到大排序)\n\n```\n    //添加元素到 zset，从小到大排序\n    public Boolean add(String key, Object value, double score) {\n        return redisTemplate.opsForZSet().add(key, value, score);\n    }\n    \n    //增加元素的 score值同时返回增加后的 score值\n    public Double incrementScore(String key, Object value, double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, score);\n    }\n    \n    //返回 zset元素在集合的从大到小排名\n    public Long rank(String key, Object object) {\n        return redisTemplate.opsForZSet().rank(key, object);\n    }\n    //返回 zset元素在集合的从大到小排名\n    public Long reverseRank(String key, Object object) {\n        return redisTemplate.opsForZSet().reverseRank(key, object);\n    }\n    \n    //获取集合中 key、value元素的 score值\n    public Double score(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }\n\n    //删除多个value的值\n    public Long remove(String key, Object... values) {\n        return redisTemplate.opsForZSet().remove(key, values);\n    }\n```","slug":"redis在springboot项目中的使用","published":1,"updated":"2023-12-05T03:06:28.496Z","_id":"clprqo1rb0003tspk1cqh7n2x","layout":"post","photos":[],"link":"","content":"<h3 id=\"Spring-data-redis简介\"><a href=\"#Spring-data-redis简介\" class=\"headerlink\" title=\"Spring-data-redis简介\"></a>Spring-data-redis简介</h3><p>​Spring-data-redis提供了在Spring应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis, JRedis, and RJC)进行了高度封装，封装了 RedisTemplate 对象来进行对Redis的各种操作、异常处理及序列化，支持发布订阅，并对Spring 3.1 cache进行了实现，它支持所有的Redis原生的 API。</p>\n<h3 id=\"Spring-data-redis-针对-Jedis-提供的功能\"><a href=\"#Spring-data-redis-针对-Jedis-提供的功能\" class=\"headerlink\" title=\"Spring-data-redis 针对 Jedis 提供的功能\"></a>Spring-data-redis 针对 Jedis 提供的功能</h3><ol>\n<li>连接池自动管理，提供了一个高度封装的“RedisTemplate”类</li>\n<li>针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口</li>\n</ol>\n<ul>\n<li>ValueOperations：简单的K-V操作</li>\n<li>SetOperations：set类型数据操作</li>\n<li>ZSetOperations：zset类型数据操作</li>\n<li>HashOperations：针对map类型的数据操作</li>\n<li>ListOperations：针对list类型的数据操作</li>\n</ul>\n<h3 id=\"加入依赖整合redis\"><a href=\"#加入依赖整合redis\" class=\"headerlink\" title=\"加入依赖整合redis\"></a>加入依赖整合redis</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- fastjson --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.76<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加配置类，提供序列化方式\"><a href=\"#增加配置类，提供序列化方式\" class=\"headerlink\" title=\"增加配置类，提供序列化方式\"></a>增加配置类，提供序列化方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author star</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br><span class=\"line\">    public RedisTemplate&lt;String, Object&gt; redisTemplate(</span><br><span class=\"line\">            RedisConnectionFactory redisConnectionFactory)</span><br><span class=\"line\">            throws UnknownHostException &#123;</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class=\"line\">        ObjectMapper om = new ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\"></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean(StringRedisTemplate.class)</span><br><span class=\"line\">    public StringRedisTemplate stringRedisTemplate(</span><br><span class=\"line\">            RedisConnectionFactory redisConnectionFactory)</span><br><span class=\"line\">            throws UnknownHostException &#123;</span><br><span class=\"line\">        StringRedisTemplate template = new StringRedisTemplate();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public HashOperations&lt;String, String, Object&gt; hashOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class=\"line\">        return redisTemplate.opsForHash();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redisTemplate针对redis中五种数据类型的操作详解\"><a href=\"#redisTemplate针对redis中五种数据类型的操作详解\" class=\"headerlink\" title=\"redisTemplate针对redis中五种数据类型的操作详解\"></a>redisTemplate针对redis中五种数据类型的操作详解</h3><ul>\n<li>string类型——-opsForSet和opsForValue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//最简单操作</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">     redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//常用操作可以设置多久后过期</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWithExpire</span><span class=\"params\">(String key, Object value, Long seconds, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">     redisTemplate.opsForValue().set(key, value, seconds, timeUnit);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取值</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//是否有值</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">hasKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">del</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">batchDel</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.delete(keys);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置过期时间，作刷新用</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">expire</span><span class=\"params\">(String key, <span class=\"type\">long</span> seconds)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.expire(key, seconds, TimeUnit.SECONDS);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置过期的日期，作刷新用</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">expireAt</span><span class=\"params\">(String key, Date date)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.expireAt(key, date);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//根据新的 key的名称修改 redis中老的 key的名称</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">renameIfAbsent</span><span class=\"params\">(String oldKey, String newKey)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取key值的类型</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> DataType <span class=\"title function_\">type</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.type(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//从当前redis的key中国随机取一个</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> String <span class=\"title function_\">randomKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.randomKey();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取当前key的过期时间（可以设置时间单位）</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">getExpire</span><span class=\"params\">(String key, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.getExpire(key, timeUnit);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//让当前key的值++  （此处多用数字。类型为long值）</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">increment</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key,<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置 key对应的值，如果存在返回 false，否则返回 true</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">setIfAbsent</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map类型——-opsForHash</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增map值，key为键  field+value是map</span><br><span class=\"line\">public void put(String key, Object field, Object value) &#123;</span><br><span class=\"line\">    redisTemplate.opsForHash().put(key, field, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//用map的形式添加</span><br><span class=\"line\">public void putAll(String key, Map&lt;Object, Object&gt; map) &#123;</span><br><span class=\"line\">    redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取 map中指定的 key值，如果存在则返回值，没有就返回null</span><br><span class=\"line\">public Object getMapValue(String key, String field) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().get(key, field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//根据 key获取 Map对象</span><br><span class=\"line\">public Map&lt;Object, Object&gt; getMap(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//当 hashKey不存在的时候，进行设置 map的值</span><br><span class=\"line\">public Boolean putIfAbsent(String key, Object hashKey, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//此处用法和opsForValue相同</span><br><span class=\"line\">public Long incrementLong(String key, Object field, long increment) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().increment(key, field, increment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取 map中的所有字段</span><br><span class=\"line\">public Set&lt;Object&gt; keys(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().keys(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>list类型——-opsForList</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把值添加在list的前面，可以是单个值也可以多个值（也可以是List&lt;Object&gt; value类型）</span><br><span class=\"line\">//注意此处的left就是从前面插入，right就是插入到末尾</span><br><span class=\"line\">public Long leftPush(String key, Object... values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().leftPushAll(key, values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//根据索引获取list中的值</span><br><span class=\"line\">public Object index(String key, long index) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</span><br><span class=\"line\">public Object rightPopAndLeftPush(String sourceKey, String destinationKey) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从存储在键中的列表中删除等于值的元素的第一个计数事件。count&gt; 0：删除等于从左到右移动的值的第一个元素；count&lt; 0：删除等于从右到左移动的值的第一个元素；count = 0：删除等于value的所有元素。</span><br><span class=\"line\">//index从第几个值开始去进行删除，返回值是删除元素的数量</span><br><span class=\"line\">public Long remove(String key, long index, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().remove(key, index, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>set类型——-opsForSet</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加元素到 set中</span><br><span class=\"line\">public Long add(String key, Collection&lt;Object&gt; values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从 set中删除一个随机元素，并返回该元素</span><br><span class=\"line\">public Object pop(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().pop(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//判断 set集合中是否存在value值</span><br><span class=\"line\">public Boolean isMember(String key, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//以下多个方法均为获取两个集合的交集或者并集或者差集并返回一个集合，其中一个可以是自定义的集合，也可以是redis中的集合</span><br><span class=\"line\">//交集</span><br><span class=\"line\">public Set&lt;Object&gt; intersect(String key, String otherKey) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().intersect(key, otherKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Set&lt;Object&gt; intersect(String key, Collection&lt;String&gt; collection) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().intersect(key, collection);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//并集</span><br><span class=\"line\">public Set&lt;Object&gt; union(String key, String key1) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().union(key, key1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//差集</span><br><span class=\"line\">public Set&lt;Object&gt; difference(String key, String key1) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().difference(key, key1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取集合中的所有元素</span><br><span class=\"line\">public Set&lt;Object&gt; members(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//移除集合中某个元素</span><br><span class=\"line\">public Long remove(String key, Collection&lt;Object&gt; objects) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().remove(key, objects);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>set类型——-opsForZSet(相比于set为元素增加了score，默认安装score从小到大排序)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加元素到 zset，从小到大排序</span><br><span class=\"line\">public Boolean add(String key, Object value, double score) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().add(key, value, score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//增加元素的 score值同时返回增加后的 score值</span><br><span class=\"line\">public Double incrementScore(String key, Object value, double score) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().incrementScore(key, value, score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回 zset元素在集合的从大到小排名</span><br><span class=\"line\">public Long rank(String key, Object object) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().rank(key, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回 zset元素在集合的从大到小排名</span><br><span class=\"line\">public Long reverseRank(String key, Object object) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().reverseRank(key, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取集合中 key、value元素的 score值</span><br><span class=\"line\">public Double score(String key, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().score(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//删除多个value的值</span><br><span class=\"line\">public Long remove(String key, Object... values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().remove(key, values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"Spring-data-redis简介\"><a href=\"#Spring-data-redis简介\" class=\"headerlink\" title=\"Spring-data-redis简介\"></a>Spring-data-redis简介</h3><p>​Spring-data-redis提供了在Spring应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis, JRedis, and RJC)进行了高度封装，封装了 RedisTemplate 对象来进行对Redis的各种操作、异常处理及序列化，支持发布订阅，并对Spring 3.1 cache进行了实现，它支持所有的Redis原生的 API。</p>\n<h3 id=\"Spring-data-redis-针对-Jedis-提供的功能\"><a href=\"#Spring-data-redis-针对-Jedis-提供的功能\" class=\"headerlink\" title=\"Spring-data-redis 针对 Jedis 提供的功能\"></a>Spring-data-redis 针对 Jedis 提供的功能</h3><ol>\n<li>连接池自动管理，提供了一个高度封装的“RedisTemplate”类</li>\n<li>针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口</li>\n</ol>\n<ul>\n<li>ValueOperations：简单的K-V操作</li>\n<li>SetOperations：set类型数据操作</li>\n<li>ZSetOperations：zset类型数据操作</li>\n<li>HashOperations：针对map类型的数据操作</li>\n<li>ListOperations：针对list类型的数据操作</li>\n</ul>\n<h3 id=\"加入依赖整合redis\"><a href=\"#加入依赖整合redis\" class=\"headerlink\" title=\"加入依赖整合redis\"></a>加入依赖整合redis</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- fastjson --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.76<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加配置类，提供序列化方式\"><a href=\"#增加配置类，提供序列化方式\" class=\"headerlink\" title=\"增加配置类，提供序列化方式\"></a>增加配置类，提供序列化方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author star</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br><span class=\"line\">    public RedisTemplate&lt;String, Object&gt; redisTemplate(</span><br><span class=\"line\">            RedisConnectionFactory redisConnectionFactory)</span><br><span class=\"line\">            throws UnknownHostException &#123;</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class=\"line\">        ObjectMapper om = new ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\"></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean(StringRedisTemplate.class)</span><br><span class=\"line\">    public StringRedisTemplate stringRedisTemplate(</span><br><span class=\"line\">            RedisConnectionFactory redisConnectionFactory)</span><br><span class=\"line\">            throws UnknownHostException &#123;</span><br><span class=\"line\">        StringRedisTemplate template = new StringRedisTemplate();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public HashOperations&lt;String, String, Object&gt; hashOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class=\"line\">        return redisTemplate.opsForHash();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redisTemplate针对redis中五种数据类型的操作详解\"><a href=\"#redisTemplate针对redis中五种数据类型的操作详解\" class=\"headerlink\" title=\"redisTemplate针对redis中五种数据类型的操作详解\"></a>redisTemplate针对redis中五种数据类型的操作详解</h3><ul>\n<li>string类型——-opsForSet和opsForValue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//最简单操作</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">     redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//常用操作可以设置多久后过期</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWithExpire</span><span class=\"params\">(String key, Object value, Long seconds, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">     redisTemplate.opsForValue().set(key, value, seconds, timeUnit);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取值</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//是否有值</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">hasKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">del</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">batchDel</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.delete(keys);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置过期时间，作刷新用</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">expire</span><span class=\"params\">(String key, <span class=\"type\">long</span> seconds)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.expire(key, seconds, TimeUnit.SECONDS);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置过期的日期，作刷新用</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">expireAt</span><span class=\"params\">(String key, Date date)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.expireAt(key, date);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//根据新的 key的名称修改 redis中老的 key的名称</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">renameIfAbsent</span><span class=\"params\">(String oldKey, String newKey)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取key值的类型</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> DataType <span class=\"title function_\">type</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.type(key);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//从当前redis的key中国随机取一个</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> String <span class=\"title function_\">randomKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.randomKey();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//获取当前key的过期时间（可以设置时间单位）</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">getExpire</span><span class=\"params\">(String key, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.getExpire(key, timeUnit);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//让当前key的值++  （此处多用数字。类型为long值）</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Long <span class=\"title function_\">increment</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key,<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//重新设置 key对应的值，如果存在返回 false，否则返回 true</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">setIfAbsent</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map类型——-opsForHash</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增map值，key为键  field+value是map</span><br><span class=\"line\">public void put(String key, Object field, Object value) &#123;</span><br><span class=\"line\">    redisTemplate.opsForHash().put(key, field, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//用map的形式添加</span><br><span class=\"line\">public void putAll(String key, Map&lt;Object, Object&gt; map) &#123;</span><br><span class=\"line\">    redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取 map中指定的 key值，如果存在则返回值，没有就返回null</span><br><span class=\"line\">public Object getMapValue(String key, String field) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().get(key, field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//根据 key获取 Map对象</span><br><span class=\"line\">public Map&lt;Object, Object&gt; getMap(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//当 hashKey不存在的时候，进行设置 map的值</span><br><span class=\"line\">public Boolean putIfAbsent(String key, Object hashKey, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//此处用法和opsForValue相同</span><br><span class=\"line\">public Long incrementLong(String key, Object field, long increment) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().increment(key, field, increment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取 map中的所有字段</span><br><span class=\"line\">public Set&lt;Object&gt; keys(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForHash().keys(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>list类型——-opsForList</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把值添加在list的前面，可以是单个值也可以多个值（也可以是List&lt;Object&gt; value类型）</span><br><span class=\"line\">//注意此处的left就是从前面插入，right就是插入到末尾</span><br><span class=\"line\">public Long leftPush(String key, Object... values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().leftPushAll(key, values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//根据索引获取list中的值</span><br><span class=\"line\">public Object index(String key, long index) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</span><br><span class=\"line\">public Object rightPopAndLeftPush(String sourceKey, String destinationKey) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从存储在键中的列表中删除等于值的元素的第一个计数事件。count&gt; 0：删除等于从左到右移动的值的第一个元素；count&lt; 0：删除等于从右到左移动的值的第一个元素；count = 0：删除等于value的所有元素。</span><br><span class=\"line\">//index从第几个值开始去进行删除，返回值是删除元素的数量</span><br><span class=\"line\">public Long remove(String key, long index, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForList().remove(key, index, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>set类型——-opsForSet</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加元素到 set中</span><br><span class=\"line\">public Long add(String key, Collection&lt;Object&gt; values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从 set中删除一个随机元素，并返回该元素</span><br><span class=\"line\">public Object pop(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().pop(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//判断 set集合中是否存在value值</span><br><span class=\"line\">public Boolean isMember(String key, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//以下多个方法均为获取两个集合的交集或者并集或者差集并返回一个集合，其中一个可以是自定义的集合，也可以是redis中的集合</span><br><span class=\"line\">//交集</span><br><span class=\"line\">public Set&lt;Object&gt; intersect(String key, String otherKey) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().intersect(key, otherKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Set&lt;Object&gt; intersect(String key, Collection&lt;String&gt; collection) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().intersect(key, collection);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//并集</span><br><span class=\"line\">public Set&lt;Object&gt; union(String key, String key1) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().union(key, key1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//差集</span><br><span class=\"line\">public Set&lt;Object&gt; difference(String key, String key1) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().difference(key, key1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取集合中的所有元素</span><br><span class=\"line\">public Set&lt;Object&gt; members(String key) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//移除集合中某个元素</span><br><span class=\"line\">public Long remove(String key, Collection&lt;Object&gt; objects) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForSet().remove(key, objects);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>set类型——-opsForZSet(相比于set为元素增加了score，默认安装score从小到大排序)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加元素到 zset，从小到大排序</span><br><span class=\"line\">public Boolean add(String key, Object value, double score) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().add(key, value, score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//增加元素的 score值同时返回增加后的 score值</span><br><span class=\"line\">public Double incrementScore(String key, Object value, double score) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().incrementScore(key, value, score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回 zset元素在集合的从大到小排名</span><br><span class=\"line\">public Long rank(String key, Object object) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().rank(key, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回 zset元素在集合的从大到小排名</span><br><span class=\"line\">public Long reverseRank(String key, Object object) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().reverseRank(key, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取集合中 key、value元素的 score值</span><br><span class=\"line\">public Double score(String key, Object value) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().score(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//删除多个value的值</span><br><span class=\"line\">public Long remove(String key, Object... values) &#123;</span><br><span class=\"line\">    return redisTemplate.opsForZSet().remove(key, values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"http请求内容详解","keywords":"http，后端","description":"http，后端","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:16:01.000Z","_content":"\n## http报文组成\n-   `起始行（start line）`：描述请求或响应的基本信息；\n-   `头部字段（header）`：使用 key-value 形式更详细地说明报文；\n-   `消息正文（entity）`：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。`此处在服务端代码编写的时候使用的是body属性`\n     ![1](../images/http请求内容详解-1701757597107.png)\n\n![2](../images/http请求内容详解-1701757614367.png)\n\n## http请求方法\n- GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；\n\n- POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，\n\n- PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。\n\n但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。\n\n- HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。`不常用`\n\n- DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。\n\n- OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。` 不常用`\n\n- TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。` 不常用`\n\n- CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n-\n\n![5](../images/http请求内容详解-1701757625731.png)\n## http响应状态码\n\n![6](../images/http请求内容详解-1701757634525.png)\n","source":"_posts/http请求内容详解.md","raw":"---\ntitle: http请求内容详解\ntags:\n  - http\n  - 后端\ncategories: 后端\nkeywords: http，后端\ndescription: http，后端\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:16:01\n---\n\n## http报文组成\n-   `起始行（start line）`：描述请求或响应的基本信息；\n-   `头部字段（header）`：使用 key-value 形式更详细地说明报文；\n-   `消息正文（entity）`：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。`此处在服务端代码编写的时候使用的是body属性`\n     ![1](../images/http请求内容详解-1701757597107.png)\n\n![2](../images/http请求内容详解-1701757614367.png)\n\n## http请求方法\n- GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；\n\n- POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，\n\n- PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。\n\n但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。\n\n- HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。`不常用`\n\n- DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。\n\n- OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。` 不常用`\n\n- TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。` 不常用`\n\n- CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n-\n\n![5](../images/http请求内容详解-1701757625731.png)\n## http响应状态码\n\n![6](../images/http请求内容详解-1701757634525.png)\n","slug":"http请求内容详解","published":1,"updated":"2023-12-05T06:29:15.561Z","_id":"clprymdjw0000h4pk6las0dif","layout":"post","photos":[],"link":"","content":"<h2 id=\"http报文组成\"><a href=\"#http报文组成\" class=\"headerlink\" title=\"http报文组成\"></a>http报文组成</h2><ul>\n<li><code>起始行（start line）</code>：描述请求或响应的基本信息；</li>\n<li><code>头部字段（header）</code>：使用 key-value 形式更详细地说明报文；</li>\n<li><code>消息正文（entity）</code>：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。<code>此处在服务端代码编写的时候使用的是body属性</code><br> <img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757597107.png\" alt=\"1\"></li>\n</ul>\n<p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757614367.png\" alt=\"2\"></p>\n<h2 id=\"http请求方法\"><a href=\"#http请求方法\" class=\"headerlink\" title=\"http请求方法\"></a>http请求方法</h2><ul>\n<li><p>GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；</p>\n</li>\n<li><p>POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，</p>\n</li>\n<li><p>PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p>\n</li>\n</ul>\n<p>但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p>\n<ul>\n<li><p>HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。<code>不常用</code></p>\n</li>\n<li><p>DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p>\n</li>\n<li><p>OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。<code> 不常用</code></p>\n</li>\n<li><p>TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。<code> 不常用</code></p>\n</li>\n<li><p>CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n</li>\n<li></li>\n</ul>\n<p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757625731.png\" alt=\"5\"></p>\n<h2 id=\"http响应状态码\"><a href=\"#http响应状态码\" class=\"headerlink\" title=\"http响应状态码\"></a>http响应状态码</h2><p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757634525.png\" alt=\"6\"></p>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"http报文组成\"><a href=\"#http报文组成\" class=\"headerlink\" title=\"http报文组成\"></a>http报文组成</h2><ul>\n<li><code>起始行（start line）</code>：描述请求或响应的基本信息；</li>\n<li><code>头部字段（header）</code>：使用 key-value 形式更详细地说明报文；</li>\n<li><code>消息正文（entity）</code>：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。<code>此处在服务端代码编写的时候使用的是body属性</code><br> <img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757597107.png\" alt=\"1\"></li>\n</ul>\n<p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757614367.png\" alt=\"2\"></p>\n<h2 id=\"http请求方法\"><a href=\"#http请求方法\" class=\"headerlink\" title=\"http请求方法\"></a>http请求方法</h2><ul>\n<li><p>GET 获取资源，GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；</p>\n</li>\n<li><p>POST 传输实体，虽然 GET 方法也可以传输主体信息，但是便于区分，我们一般不用 GET 传输实体信息，反而使用 POST 传输实体信息，</p>\n</li>\n<li><p>PUT 传输文件，PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p>\n</li>\n</ul>\n<p>但是，鉴于 HTTP 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 W eb 网站不使用该方法。若配合 W eb 应用程序的验证机制，或架构设计采用REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p>\n<ul>\n<li><p>HEAD 获得响应首部，HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。<code>不常用</code></p>\n</li>\n<li><p>DELETE 删除文件，DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p>\n</li>\n<li><p>OPTIONS 询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。<code> 不常用</code></p>\n</li>\n<li><p>TRACE 追踪路径，TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。<code> 不常用</code></p>\n</li>\n<li><p>CONNECT 要求用隧道协议连接代理，CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n</li>\n<li></li>\n</ul>\n<p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757625731.png\" alt=\"5\"></p>\n<h2 id=\"http响应状态码\"><a href=\"#http响应状态码\" class=\"headerlink\" title=\"http响应状态码\"></a>http响应状态码</h2><p><img src=\"/../images/http%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E8%AF%A6%E8%A7%A3-1701757634525.png\" alt=\"6\"></p>\n"},{"title":"react-markdown踩坑实记","keywords":"react，前端","description":"react-markdown的尝试（最后还是觉得很烂）","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:15:39.000Z","_content":"\n\n### 前往react-markdown的github官网参照使用\n\n首先安装react-markdown插件\n```\nyarn add react-markdown\n```\n\n- 看了几份使用样例，最终找到了封装最完善的react-markdown使用实例\n\n\n![1](../images/react-markdown踩坑实记-1701757666333.png)\n\n- 但是按照此样例搬运上nextjs后却发现报错\n\n\n![2](../images/react-markdown踩坑实记-1701757671966.png)\n\n- 经过一番操作后发现无解，只能把`react-syntax-highlighter/dist/esm/styles/prism`删除，然后去掉style样式，代码如下\n\n```\n// index.jsx\n\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'// 划线、表、任务列表和直接url等的语法扩展\nimport rehypeRaw from 'rehype-raw'// 解析标签，支持html语法\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport styles from './MarkdownDisplay.module.less'\nimport dark from 'react-syntax-highlighter/dist/esm/styles/prism/atom-dark'\n\ninterface IProps {\n\n    content: string\n}\n\nconst MarkdownDisplay: React.FC<IProps> = (props) => {\n    const {content} = props\n\n    return (\n        <ReactMarkdown\n            className={styles.markdownDisplay}\n            children={content}\n\n            remarkPlugins={[remarkGfm]}\n            rehypePlugins={[rehypeRaw]}\n            components={{\n                code({inline, className, children, ...props}) {\n                    const match = /language-(\\w+)/.exec(className || '')\n                    return !inline && match\n                        ? (\n                            <SyntaxHighlighter\n                                children={String(children).replace(/\\n$/, '')}\n                                style={dark}\n                                language={match[1]}\n                                PreTag=\"div\"\n                            />\n                        )\n                        : (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        )\n                },\n            }}\n        />\n\n    )\n}\nexport default MarkdownDisplay\n\n// css部分 采用继承父类的min-width、max-width使得图片撑满布局\n\n.markdownDisplay{\n  background-color: white;\n  p{\n    img{\n      min-width: inherit;\n      max-width: inherit;\n    }\n  }\n}\n\n\n\n```\n\n- 此时页面可以正常显示，无任何报错，但是在`git commit`到本地仓库的时候会出现`ESlint检查`错误\n\n```\n117:17  Warning: Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element  @next/next/no-img-element\n./components/MarkdownDisplay/index.tsx\nError: Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable\n26:32  Error: Unexpected mix of '&&' and '?:'. Use parentheses to clarify the intended order of operations.  no-mixed-operators\n27:19  Error: Unexpected mix of '&&' and '?:'. Use parentheses to clarify the intended order of operations.  no-mixed-operators\nError: Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable\ninfo  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules\nhusky - pre-commit hook exited with code 1 (error)\n\n```\n\n`如果有大佬解决还请留言`\n\n### 前往react-markdown的github官网参照使用\n\n首先安装react-markdown插件\n```\nyarn add markdown-navbar # or `npm i markdown-navbar --save`\n```\n\n- 有一说一，这个插件真的好用,自动实现了`markdown标题跳转和标题高亮`，减少了手动dom元素的操作，而且性能佳佳~\n\n代码如下\n\n```\n//index.tsx\n\n\nimport MarkNav from 'markdown-navbar'\nimport React from 'react'\nimport styles from './MarkdownNav.module.less'\nimport 'markdown-navbar/dist/navbar.css'\n\ninterface IProps {\n  content: string\n}\n\nconst MarkdownNav: React.FC<IProps> = (props) => {\n  const { content } = props\n  return (\n        <div className=\"nav-menu\">\n            <MarkNav\n                className={styles.markdownNav}\n                source={content}\n                headingTopOffset={10}\n                ordered={false}// 是否显示标题题号1,2等\n            />\n        </div>\n  )\n}\n\nexport default MarkdownNav\n\n```\n\n如果你想让它变的更好看一点可以手动再加一些css样式（通过f12得知他的每个标题均为div元素）\n```\n//css\n\n.markdownNav {\n  padding: 0 0 0 11px;\n  overflow-x: hidden;\n  overflow-y: auto;\n\n\n  div {\n    display: inline-block;\n    color: inherit;\n    padding: 8px;\n    width: 80%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    line-height: 18px;\n    cursor: pointer;\n    border-radius: 10px;\n\n    &:hover {\n      color: #1171ee;\n      background-color: #e7e7e7;\n      transition: 0.2s;\n    }\n\n   /* &:active {\n      position: relative;\n      &:before {\n        content: \"\";\n        position: absolute;\n        top: 4px;\n        left: 0;\n        margin-top: 7px;\n        width: 4px;\n        height: 16px;\n        background: #1e80ff;\n        border-radius: 0 4px 4px 0;\n      }\n    }*/\n\n  }\n}\n\n.active{\n  color: pink;\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 4px;\n    left: 0;\n    margin-top: 7px;\n    width: 4px;\n    height: 16px;\n    background: #1e80ff;\n    border-radius: 0 4px 4px 0;\n  }\n}\n\n```\n\n","source":"_posts/react-markdown踩坑实记.md","raw":"---\ntitle: react-markdown踩坑实记\ntags:\n  - react\n  - 前端\ncategories: 前端\nkeywords: react，前端\ndescription: react-markdown的尝试（最后还是觉得很烂）\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:15:39\n---\n\n\n### 前往react-markdown的github官网参照使用\n\n首先安装react-markdown插件\n```\nyarn add react-markdown\n```\n\n- 看了几份使用样例，最终找到了封装最完善的react-markdown使用实例\n\n\n![1](../images/react-markdown踩坑实记-1701757666333.png)\n\n- 但是按照此样例搬运上nextjs后却发现报错\n\n\n![2](../images/react-markdown踩坑实记-1701757671966.png)\n\n- 经过一番操作后发现无解，只能把`react-syntax-highlighter/dist/esm/styles/prism`删除，然后去掉style样式，代码如下\n\n```\n// index.jsx\n\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'// 划线、表、任务列表和直接url等的语法扩展\nimport rehypeRaw from 'rehype-raw'// 解析标签，支持html语法\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport styles from './MarkdownDisplay.module.less'\nimport dark from 'react-syntax-highlighter/dist/esm/styles/prism/atom-dark'\n\ninterface IProps {\n\n    content: string\n}\n\nconst MarkdownDisplay: React.FC<IProps> = (props) => {\n    const {content} = props\n\n    return (\n        <ReactMarkdown\n            className={styles.markdownDisplay}\n            children={content}\n\n            remarkPlugins={[remarkGfm]}\n            rehypePlugins={[rehypeRaw]}\n            components={{\n                code({inline, className, children, ...props}) {\n                    const match = /language-(\\w+)/.exec(className || '')\n                    return !inline && match\n                        ? (\n                            <SyntaxHighlighter\n                                children={String(children).replace(/\\n$/, '')}\n                                style={dark}\n                                language={match[1]}\n                                PreTag=\"div\"\n                            />\n                        )\n                        : (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        )\n                },\n            }}\n        />\n\n    )\n}\nexport default MarkdownDisplay\n\n// css部分 采用继承父类的min-width、max-width使得图片撑满布局\n\n.markdownDisplay{\n  background-color: white;\n  p{\n    img{\n      min-width: inherit;\n      max-width: inherit;\n    }\n  }\n}\n\n\n\n```\n\n- 此时页面可以正常显示，无任何报错，但是在`git commit`到本地仓库的时候会出现`ESlint检查`错误\n\n```\n117:17  Warning: Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element  @next/next/no-img-element\n./components/MarkdownDisplay/index.tsx\nError: Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable\n26:32  Error: Unexpected mix of '&&' and '?:'. Use parentheses to clarify the intended order of operations.  no-mixed-operators\n27:19  Error: Unexpected mix of '&&' and '?:'. Use parentheses to clarify the intended order of operations.  no-mixed-operators\nError: Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable\ninfo  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules\nhusky - pre-commit hook exited with code 1 (error)\n\n```\n\n`如果有大佬解决还请留言`\n\n### 前往react-markdown的github官网参照使用\n\n首先安装react-markdown插件\n```\nyarn add markdown-navbar # or `npm i markdown-navbar --save`\n```\n\n- 有一说一，这个插件真的好用,自动实现了`markdown标题跳转和标题高亮`，减少了手动dom元素的操作，而且性能佳佳~\n\n代码如下\n\n```\n//index.tsx\n\n\nimport MarkNav from 'markdown-navbar'\nimport React from 'react'\nimport styles from './MarkdownNav.module.less'\nimport 'markdown-navbar/dist/navbar.css'\n\ninterface IProps {\n  content: string\n}\n\nconst MarkdownNav: React.FC<IProps> = (props) => {\n  const { content } = props\n  return (\n        <div className=\"nav-menu\">\n            <MarkNav\n                className={styles.markdownNav}\n                source={content}\n                headingTopOffset={10}\n                ordered={false}// 是否显示标题题号1,2等\n            />\n        </div>\n  )\n}\n\nexport default MarkdownNav\n\n```\n\n如果你想让它变的更好看一点可以手动再加一些css样式（通过f12得知他的每个标题均为div元素）\n```\n//css\n\n.markdownNav {\n  padding: 0 0 0 11px;\n  overflow-x: hidden;\n  overflow-y: auto;\n\n\n  div {\n    display: inline-block;\n    color: inherit;\n    padding: 8px;\n    width: 80%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    line-height: 18px;\n    cursor: pointer;\n    border-radius: 10px;\n\n    &:hover {\n      color: #1171ee;\n      background-color: #e7e7e7;\n      transition: 0.2s;\n    }\n\n   /* &:active {\n      position: relative;\n      &:before {\n        content: \"\";\n        position: absolute;\n        top: 4px;\n        left: 0;\n        margin-top: 7px;\n        width: 4px;\n        height: 16px;\n        background: #1e80ff;\n        border-radius: 0 4px 4px 0;\n      }\n    }*/\n\n  }\n}\n\n.active{\n  color: pink;\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 4px;\n    left: 0;\n    margin-top: 7px;\n    width: 4px;\n    height: 16px;\n    background: #1e80ff;\n    border-radius: 0 4px 4px 0;\n  }\n}\n\n```\n\n","slug":"react-markdown踩坑实记","published":1,"updated":"2023-12-05T06:29:15.565Z","_id":"clprymdk90001h4pke4hl5jrj","layout":"post","photos":[],"link":"","content":"<h3 id=\"前往react-markdown的github官网参照使用\"><a href=\"#前往react-markdown的github官网参照使用\" class=\"headerlink\" title=\"前往react-markdown的github官网参照使用\"></a>前往react-markdown的github官网参照使用</h3><p>首先安装react-markdown插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-markdown</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看了几份使用样例，最终找到了封装最完善的react-markdown使用实例</li>\n</ul>\n<p><img src=\"/../images/react-markdown%E8%B8%A9%E5%9D%91%E5%AE%9E%E8%AE%B0-1701757666333.png\" alt=\"1\"></p>\n<ul>\n<li>但是按照此样例搬运上nextjs后却发现报错</li>\n</ul>\n<p><img src=\"/../images/react-markdown%E8%B8%A9%E5%9D%91%E5%AE%9E%E8%AE%B0-1701757671966.png\" alt=\"2\"></p>\n<ul>\n<li>经过一番操作后发现无解，只能把<code>react-syntax-highlighter/dist/esm/styles/prism</code>删除，然后去掉style样式，代码如下</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.jsx</span><br><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\">import ReactMarkdown from &#x27;react-markdown&#x27;</span><br><span class=\"line\">import remarkGfm from &#x27;remark-gfm&#x27;// 划线、表、任务列表和直接url等的语法扩展</span><br><span class=\"line\">import rehypeRaw from &#x27;rehype-raw&#x27;// 解析标签，支持html语法</span><br><span class=\"line\">import &#123;Prism as SyntaxHighlighter&#125; from &#x27;react-syntax-highlighter&#x27;</span><br><span class=\"line\">import styles from &#x27;./MarkdownDisplay.module.less&#x27;</span><br><span class=\"line\">import dark from &#x27;react-syntax-highlighter/dist/esm/styles/prism/atom-dark&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IProps &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MarkdownDisplay: React.FC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">    const &#123;content&#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;ReactMarkdown</span><br><span class=\"line\">            className=&#123;styles.markdownDisplay&#125;</span><br><span class=\"line\">            children=&#123;content&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            remarkPlugins=&#123;[remarkGfm]&#125;</span><br><span class=\"line\">            rehypePlugins=&#123;[rehypeRaw]&#125;</span><br><span class=\"line\">            components=&#123;&#123;</span><br><span class=\"line\">                code(&#123;inline, className, children, ...props&#125;) &#123;</span><br><span class=\"line\">                    const match = /language-(\\w+)/.exec(className || &#x27;&#x27;)</span><br><span class=\"line\">                    return !inline &amp;&amp; match</span><br><span class=\"line\">                        ? (</span><br><span class=\"line\">                            &lt;SyntaxHighlighter</span><br><span class=\"line\">                                children=&#123;String(children).replace(/\\n$/, &#x27;&#x27;)&#125;</span><br><span class=\"line\">                                style=&#123;dark&#125;</span><br><span class=\"line\">                                language=&#123;match[1]&#125;</span><br><span class=\"line\">                                PreTag=&quot;div&quot;</span><br><span class=\"line\">                            /&gt;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                        : (</span><br><span class=\"line\">                            &lt;code className=&#123;className&#125; &#123;...props&#125;&gt;</span><br><span class=\"line\">                                &#123;children&#125;</span><br><span class=\"line\">                            &lt;/code&gt;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default MarkdownDisplay</span><br><span class=\"line\"></span><br><span class=\"line\">// css部分 采用继承父类的min-width、max-width使得图片撑满布局</span><br><span class=\"line\"></span><br><span class=\"line\">.markdownDisplay&#123;</span><br><span class=\"line\">  background-color: white;</span><br><span class=\"line\">  p&#123;</span><br><span class=\"line\">    img&#123;</span><br><span class=\"line\">      min-width: inherit;</span><br><span class=\"line\">      max-width: inherit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此时页面可以正常显示，无任何报错，但是在<code>git commit</code>到本地仓库的时候会出现<code>ESlint检查</code>错误</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">117:17  Warning: Using `&lt;img&gt;` could result in slower LCP and higher bandwidth. Use `&lt;Image /&gt;` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element  @next/next/no-img-element</span><br><span class=\"line\">./components/MarkdownDisplay/index.tsx</span><br><span class=\"line\">Error: Unexpected unlimited &#x27;eslint-disable-line&#x27; comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable</span><br><span class=\"line\">26:32  Error: Unexpected mix of &#x27;&amp;&amp;&#x27; and &#x27;?:&#x27;. Use parentheses to clarify the intended order of operations.  no-mixed-operators</span><br><span class=\"line\">27:19  Error: Unexpected mix of &#x27;&amp;&amp;&#x27; and &#x27;?:&#x27;. Use parentheses to clarify the intended order of operations.  no-mixed-operators</span><br><span class=\"line\">Error: Unexpected unlimited &#x27;eslint-disable-line&#x27; comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable</span><br><span class=\"line\">info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules</span><br><span class=\"line\">husky - pre-commit hook exited with code 1 (error)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>如果有大佬解决还请留言</code></p>\n<h3 id=\"前往react-markdown的github官网参照使用-1\"><a href=\"#前往react-markdown的github官网参照使用-1\" class=\"headerlink\" title=\"前往react-markdown的github官网参照使用\"></a>前往react-markdown的github官网参照使用</h3><p>首先安装react-markdown插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add markdown-navbar # or `npm i markdown-navbar --save`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有一说一，这个插件真的好用,自动实现了<code>markdown标题跳转和标题高亮</code>，减少了手动dom元素的操作，而且性能佳佳~</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.tsx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import MarkNav from &#x27;markdown-navbar&#x27;</span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\">import styles from &#x27;./MarkdownNav.module.less&#x27;</span><br><span class=\"line\">import &#x27;markdown-navbar/dist/navbar.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IProps &#123;</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MarkdownNav: React.FC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">  const &#123; content &#125; = props</span><br><span class=\"line\">  return (</span><br><span class=\"line\">        &lt;div className=&quot;nav-menu&quot;&gt;</span><br><span class=\"line\">            &lt;MarkNav</span><br><span class=\"line\">                className=&#123;styles.markdownNav&#125;</span><br><span class=\"line\">                source=&#123;content&#125;</span><br><span class=\"line\">                headingTopOffset=&#123;10&#125;</span><br><span class=\"line\">                ordered=&#123;false&#125;// 是否显示标题题号1,2等</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default MarkdownNav</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果你想让它变的更好看一点可以手动再加一些css样式（通过f12得知他的每个标题均为div元素）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css</span><br><span class=\"line\"></span><br><span class=\"line\">.markdownNav &#123;</span><br><span class=\"line\">  padding: 0 0 0 11px;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  div &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    padding: 8px;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    line-height: 18px;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      color: #1171ee;</span><br><span class=\"line\">      background-color: #e7e7e7;</span><br><span class=\"line\">      transition: 0.2s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   /* &amp;:active &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      &amp;:before &#123;</span><br><span class=\"line\">        content: &quot;&quot;;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 4px;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        margin-top: 7px;</span><br><span class=\"line\">        width: 4px;</span><br><span class=\"line\">        height: 16px;</span><br><span class=\"line\">        background: #1e80ff;</span><br><span class=\"line\">        border-radius: 0 4px 4px 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.active&#123;</span><br><span class=\"line\">  color: pink;</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 4px;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    margin-top: 7px;</span><br><span class=\"line\">    width: 4px;</span><br><span class=\"line\">    height: 16px;</span><br><span class=\"line\">    background: #1e80ff;</span><br><span class=\"line\">    border-radius: 0 4px 4px 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"前往react-markdown的github官网参照使用\"><a href=\"#前往react-markdown的github官网参照使用\" class=\"headerlink\" title=\"前往react-markdown的github官网参照使用\"></a>前往react-markdown的github官网参照使用</h3><p>首先安装react-markdown插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-markdown</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看了几份使用样例，最终找到了封装最完善的react-markdown使用实例</li>\n</ul>\n<p><img src=\"/../images/react-markdown%E8%B8%A9%E5%9D%91%E5%AE%9E%E8%AE%B0-1701757666333.png\" alt=\"1\"></p>\n<ul>\n<li>但是按照此样例搬运上nextjs后却发现报错</li>\n</ul>\n<p><img src=\"/../images/react-markdown%E8%B8%A9%E5%9D%91%E5%AE%9E%E8%AE%B0-1701757671966.png\" alt=\"2\"></p>\n<ul>\n<li>经过一番操作后发现无解，只能把<code>react-syntax-highlighter/dist/esm/styles/prism</code>删除，然后去掉style样式，代码如下</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.jsx</span><br><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\">import ReactMarkdown from &#x27;react-markdown&#x27;</span><br><span class=\"line\">import remarkGfm from &#x27;remark-gfm&#x27;// 划线、表、任务列表和直接url等的语法扩展</span><br><span class=\"line\">import rehypeRaw from &#x27;rehype-raw&#x27;// 解析标签，支持html语法</span><br><span class=\"line\">import &#123;Prism as SyntaxHighlighter&#125; from &#x27;react-syntax-highlighter&#x27;</span><br><span class=\"line\">import styles from &#x27;./MarkdownDisplay.module.less&#x27;</span><br><span class=\"line\">import dark from &#x27;react-syntax-highlighter/dist/esm/styles/prism/atom-dark&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IProps &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MarkdownDisplay: React.FC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">    const &#123;content&#125; = props</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;ReactMarkdown</span><br><span class=\"line\">            className=&#123;styles.markdownDisplay&#125;</span><br><span class=\"line\">            children=&#123;content&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            remarkPlugins=&#123;[remarkGfm]&#125;</span><br><span class=\"line\">            rehypePlugins=&#123;[rehypeRaw]&#125;</span><br><span class=\"line\">            components=&#123;&#123;</span><br><span class=\"line\">                code(&#123;inline, className, children, ...props&#125;) &#123;</span><br><span class=\"line\">                    const match = /language-(\\w+)/.exec(className || &#x27;&#x27;)</span><br><span class=\"line\">                    return !inline &amp;&amp; match</span><br><span class=\"line\">                        ? (</span><br><span class=\"line\">                            &lt;SyntaxHighlighter</span><br><span class=\"line\">                                children=&#123;String(children).replace(/\\n$/, &#x27;&#x27;)&#125;</span><br><span class=\"line\">                                style=&#123;dark&#125;</span><br><span class=\"line\">                                language=&#123;match[1]&#125;</span><br><span class=\"line\">                                PreTag=&quot;div&quot;</span><br><span class=\"line\">                            /&gt;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                        : (</span><br><span class=\"line\">                            &lt;code className=&#123;className&#125; &#123;...props&#125;&gt;</span><br><span class=\"line\">                                &#123;children&#125;</span><br><span class=\"line\">                            &lt;/code&gt;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default MarkdownDisplay</span><br><span class=\"line\"></span><br><span class=\"line\">// css部分 采用继承父类的min-width、max-width使得图片撑满布局</span><br><span class=\"line\"></span><br><span class=\"line\">.markdownDisplay&#123;</span><br><span class=\"line\">  background-color: white;</span><br><span class=\"line\">  p&#123;</span><br><span class=\"line\">    img&#123;</span><br><span class=\"line\">      min-width: inherit;</span><br><span class=\"line\">      max-width: inherit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此时页面可以正常显示，无任何报错，但是在<code>git commit</code>到本地仓库的时候会出现<code>ESlint检查</code>错误</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">117:17  Warning: Using `&lt;img&gt;` could result in slower LCP and higher bandwidth. Use `&lt;Image /&gt;` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element  @next/next/no-img-element</span><br><span class=\"line\">./components/MarkdownDisplay/index.tsx</span><br><span class=\"line\">Error: Unexpected unlimited &#x27;eslint-disable-line&#x27; comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable</span><br><span class=\"line\">26:32  Error: Unexpected mix of &#x27;&amp;&amp;&#x27; and &#x27;?:&#x27;. Use parentheses to clarify the intended order of operations.  no-mixed-operators</span><br><span class=\"line\">27:19  Error: Unexpected mix of &#x27;&amp;&amp;&#x27; and &#x27;?:&#x27;. Use parentheses to clarify the intended order of operations.  no-mixed-operators</span><br><span class=\"line\">Error: Unexpected unlimited &#x27;eslint-disable-line&#x27; comment. Specify some rule names to disable.  eslint-comments/no-unlimited-disable</span><br><span class=\"line\">info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules</span><br><span class=\"line\">husky - pre-commit hook exited with code 1 (error)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>如果有大佬解决还请留言</code></p>\n<h3 id=\"前往react-markdown的github官网参照使用-1\"><a href=\"#前往react-markdown的github官网参照使用-1\" class=\"headerlink\" title=\"前往react-markdown的github官网参照使用\"></a>前往react-markdown的github官网参照使用</h3><p>首先安装react-markdown插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add markdown-navbar # or `npm i markdown-navbar --save`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有一说一，这个插件真的好用,自动实现了<code>markdown标题跳转和标题高亮</code>，减少了手动dom元素的操作，而且性能佳佳~</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.tsx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import MarkNav from &#x27;markdown-navbar&#x27;</span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\">import styles from &#x27;./MarkdownNav.module.less&#x27;</span><br><span class=\"line\">import &#x27;markdown-navbar/dist/navbar.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IProps &#123;</span><br><span class=\"line\">  content: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const MarkdownNav: React.FC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class=\"line\">  const &#123; content &#125; = props</span><br><span class=\"line\">  return (</span><br><span class=\"line\">        &lt;div className=&quot;nav-menu&quot;&gt;</span><br><span class=\"line\">            &lt;MarkNav</span><br><span class=\"line\">                className=&#123;styles.markdownNav&#125;</span><br><span class=\"line\">                source=&#123;content&#125;</span><br><span class=\"line\">                headingTopOffset=&#123;10&#125;</span><br><span class=\"line\">                ordered=&#123;false&#125;// 是否显示标题题号1,2等</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default MarkdownNav</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果你想让它变的更好看一点可以手动再加一些css样式（通过f12得知他的每个标题均为div元素）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css</span><br><span class=\"line\"></span><br><span class=\"line\">.markdownNav &#123;</span><br><span class=\"line\">  padding: 0 0 0 11px;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  div &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    padding: 8px;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    line-height: 18px;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      color: #1171ee;</span><br><span class=\"line\">      background-color: #e7e7e7;</span><br><span class=\"line\">      transition: 0.2s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   /* &amp;:active &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      &amp;:before &#123;</span><br><span class=\"line\">        content: &quot;&quot;;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 4px;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        margin-top: 7px;</span><br><span class=\"line\">        width: 4px;</span><br><span class=\"line\">        height: 16px;</span><br><span class=\"line\">        background: #1e80ff;</span><br><span class=\"line\">        border-radius: 0 4px 4px 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.active&#123;</span><br><span class=\"line\">  color: pink;</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 4px;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    margin-top: 7px;</span><br><span class=\"line\">    width: 4px;</span><br><span class=\"line\">    height: 16px;</span><br><span class=\"line\">    background: #1e80ff;</span><br><span class=\"line\">    border-radius: 0 4px 4px 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"spring-cloud-starter-oauth2+securit+jwt微服务实战","keywords":"springcloud，springsecurity","description":"springcloud，springsecurity","top_img":"/img/houduan.png","comments":1,"cover":"/img/houduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:15:17.000Z","_content":"\n\n### spring-cloud-starter-oauth2+securit简介\n\n##### 认证\n\n- 用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信 息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维 码登录，手机短信登录，指纹认证等方式。\n\n`认证是为了保护系统的隐私数据与资源，用户的身份合法方可访问该系统的资源。`\n#### 授权\n- 授权是用户认证通过后，根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访 问，没有权限则拒绝访问。\n\n`认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，授权是在认证通过 后发生的， 控制不同的用户能够访问不同的资源。`\n\n#### RBAC模型\n`主体 -》 角色 -》 资源 -》行为`\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2606eb94497441fb84648424a748d5e~tplv-k3u1fbpfcp-watermark.image?)\n### spring-cloud-starter-oauth2+security使用\n\n#### 相关依赖引入\n- spring-cloud-starter-oauth2+security是一套完整的用户登录授权系统，在认证服务上主要有三个依赖：`spring-cloud-starter-security、spring-cloud-starter-oauth2、spring-security-jwt`\n```\n\n        <!--spring security相关依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-oauth2</artifactId>\n        </dependency>\n\n  <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-jwt</artifactId>\n            <version>1.1.1.RELEASE</version>\n        </dependency>\n\n```\n- 在其他需要权限访问的服务上主要包含两个依赖：\n\n```\n  <!--spring security相关依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-oauth2</artifactId>\n        </dependency>\n\n```\n\n#### 认证服务搭建\n- 这里主要做security和oauth2的相关配置\n- 主要由以下四个配置文件\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64fdb305f8934f128f141085735d9945~tplv-k3u1fbpfcp-watermark.image?)\n\n- WebSecurityConfig主要做springsecurity相关的配置\n```\n@EnableWebSecurity //开启security服务\n@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true) //允许在方法上加的注解来配置权限\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    DaoAuthenticationProviderCustom daoAuthenticationProviderCustom;\n\n    //使用自己定义DaoAuthenticationProviderCustom来代替框架的DaoAuthenticationProvider\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.authenticationProvider(daoAuthenticationProviderCustom);\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        //密码为明文方式\n        return NoOpPasswordEncoder.getInstance();\n        //return new BCryptPasswordEncoder();\n    }\n\n    //配置安全拦截机制\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                .antMatchers(\"/pow/**\").authenticated()//访问/r开始的请求需要认证通过\n                .anyRequest().permitAll()//其它请求全部放行\n                .and()\n                .formLogin().successForwardUrl(\"/login-success\");//登录成功跳转到/login-success\n        http.logout().logoutUrl(\"/logout\");//退出地址\n    }\n\n}\n\n```\n- TokenConfig在认证服务中主要作token的生成配置\n\n```\n@Configuration\npublic class TokenConfig {\n\n    private String SIGNING_KEY = \"030321liuxinyu\";//和其他服务一致来解析token\n\n    @Autowired\n    TokenStore tokenStore;\n\n//    @Bean\n//    public TokenStore tokenStore() {\n//        //使用内存存储令牌（普通令牌）\n//        return new InMemoryTokenStore();\n//    }\n\n    @Autowired\n    private JwtAccessTokenConverter accessTokenConverter;\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(SIGNING_KEY);\n        return converter;\n    }\n\n    //令牌管理服务\n    @Bean(name=\"authorizationServerTokenServicesCustom\")\n    public AuthorizationServerTokenServices tokenService() {\n        DefaultTokenServices service=new DefaultTokenServices();\n        service.setSupportRefreshToken(true);//支持刷新令牌\n        service.setTokenStore(tokenStore);//令牌存储策略\n\n        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\n        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));\n        service.setTokenEnhancer(tokenEnhancerChain);\n\n        service.setAccessTokenValiditySeconds(7200); // 令牌默认有效期2小时\n        service.setRefreshTokenValiditySeconds(259200); // 刷新令牌默认有效期3天\n        return service;\n    }}\n```\n\n- AuthorizationServer主要是授权方面也就是spring-cloud-starter-oauth2相关的配置\n\n```\n@Configuration\n@EnableAuthorizationServer\n@Slf4j\npublic class AuthorizationServer extends AuthorizationServerConfigurerAdapter {\n\n\n    @Resource(name = \"authorizationServerTokenServicesCustom\")\n    private AuthorizationServerTokenServices authorizationServerTokenServices;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    //客户端详情服务\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients)\n            throws Exception {\n\n        clients.inMemory()// 使用in-memory存储\n                .withClient(\"starBlog\")// client_id\n                .secret(\"030321liuxinyu\")//客户端密钥\n//                .secret(new BCryptPasswordEncoder().encode(\"XcWebApp\"))//客户端密钥\n                .resourceIds(\"starBlog\")//资源列表\n\n                .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"implicit\", \"refresh_token\", \"password\")// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials\n                .scopes(\"all\")// 允许的授权范围\n                .autoApprove(false)//false跳转到授权页面\n                //客户端接收授权码的重定向地址\n                .redirectUris(\"http://www.xuecheng-plus.com\")\n        ;\n    }\n\n\n    //令牌端点的访问配置\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints\n                .authenticationManager(authenticationManager)//认证管理器\n                .tokenServices(authorizationServerTokenServices)//令牌管理服务\n                .allowedTokenEndpointRequestMethods(HttpMethod.POST);\n    }\n\n    //令牌端点的安全配置\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) {\n        security\n                .tokenKeyAccess(\"permitAll()\")                    //oauth/token_key是公开\n                .checkTokenAccess(\"permitAll()\")                  //oauth/check_token公开\n                .allowFormAuthenticationForClients()                //表单认证（申请令牌）\n        ;\n    }\n\n}\n```\n- DaoAuthenticationProviderCustom是一个很重要的配置，通过这个修改的springsecuritu原先提供的登录方案（账号密码登录），但当前环境肯定涉及到多种登录方式，我们通过重写`additionalAuthenticationChecks和setUserDetailsService`方法来自定义登录方式\n\n```\n@Slf4j\n@Component\npublic class DaoAuthenticationProviderCustom extends DaoAuthenticationProvider {\n\n @Autowired\n public void setUserDetailsService(UserDetailsService userDetailsService) {\n  super.setUserDetailsService(userDetailsService);\n }\n\n\n //不再校验密码\n protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {\n\n }\n\n\n}\n\n```\n\n- 至此认证服务的相关配置就完成啦，我们可以通过`POST localhost:8081/oauth/token?client_id=starBlog&client_secret=030321liuxinyu&grant_type=password&username={\"account\":\"账号\",\"authType\":\"登录方式\",\"password\":\"密码\"}`来进行测试\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf8661a32e914bee9e24ed8e7105e399~tplv-k3u1fbpfcp-watermark.image?)\n\n这就是前端用户点击登录后获得的信息，然后将该token存储在本地，用户每次访问的时候都携带token即可，\n\n- oauth也提供了校验token的方法`POST localhost:8081/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsieHVlY2hlbmctcGx1cyJdLCJ1c2VyX25hbWUiOiJ7XCJpZFwiOjE2MTY1MTYxNjUsXCJwaG9uZVwiOlwiMTM2NDg4MzcwOTNcIixcIkVtYWlsXCI6XCIyMDY0OTg5NDAzQHFxLmNvbVwiLFwiYWNjb3VudFwiOlwiMjA2NDk4OTQwM1wifSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NzUyNTI3MjIsImF1dGhvcml0aWVzIjpbInRlc3QiXSwianRpIjoiMDU1MjBlOTYtMTVhOS00MjAzLWExMWItNjRjZTNhNDQ5ZTM4IiwiY2xpZW50X2lkIjoic3RhckJsb2cifQ.I6wM4jZJdSA07gTnzmlP59vzqvm1hxNcNt3ejE0mR8w`\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2343a98e4ad64ee3a756ae144869cc7a~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 资源服务搭建\n- 引入配置文件，相比于认证服务，资源服务的配置量少很多，主要有以下两个配置文件\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ad3d5c189a4243beae77449c746b46~tplv-k3u1fbpfcp-watermark.image?)\n- TokenConfig(和认证服务的类似，但不需要token生成)\n\n```\n@Configuration\npublic class TokenConfig {\n\n    String SIGNING_KEY = \"key\";\n\n\n    @Autowired\n    private JwtAccessTokenConverter accessTokenConverter;\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(SIGNING_KEY);\n        return converter;\n    }\n}\n\n```\n\n- ResouceServerConfig（资源权限的相关配置）\n```\n@Configuration\n@EnableResourceServer\n@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\npublic class ResouceServerConfig extends ResourceServerConfigurerAdapter {\n\n\n    //资源服务标识\n    public static final String RESOURCE_ID = \"starBlog\";\n\n    @Autowired\n    TokenStore tokenStore;\n\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        resources.resourceId(RESOURCE_ID)//资源 id\n                .tokenStore(tokenStore)\n                .stateless(true);\n    }\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .disable()\n                .authorizeRequests()\n                .antMatchers( \"/**\").authenticated()//所有/r/**的请求必须认证通过\n                .anyRequest().permitAll()\n        ;\n    }\n\n}\n```\n\n- 这样资源服务就搭建好了，我们访问资源\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8d6f8c7a3704bfaa38e9523ae869698~tplv-k3u1fbpfcp-watermark.image?)\n\n- 在资源服务的方法上添加`@PreAuthorize(\"hasAuthority('test')\")`可以指定拥有某项权限的用户才可以访问\n\n\n\n> 这样一个简单的spring-cloud-starter-oauth2+securit+jwt微服务就搭建完成了\n\n","source":"_posts/spring-cloud-starter-oauth2-securit-jwt微服务实战.md","raw":"---\ntitle: spring-cloud-starter-oauth2+securit+jwt微服务实战\ntags:\n  - 后端\n  - springcloud\n  - springsecurity\ncategories: 后端\nkeywords: springcloud，springsecurity\ndescription: springcloud，springsecurity\ntop_img: /img/houduan.png\ncomments: true\ncover: /img/houduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:15:17\n---\n\n\n### spring-cloud-starter-oauth2+securit简介\n\n##### 认证\n\n- 用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信 息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维 码登录，手机短信登录，指纹认证等方式。\n\n`认证是为了保护系统的隐私数据与资源，用户的身份合法方可访问该系统的资源。`\n#### 授权\n- 授权是用户认证通过后，根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访 问，没有权限则拒绝访问。\n\n`认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，授权是在认证通过 后发生的， 控制不同的用户能够访问不同的资源。`\n\n#### RBAC模型\n`主体 -》 角色 -》 资源 -》行为`\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2606eb94497441fb84648424a748d5e~tplv-k3u1fbpfcp-watermark.image?)\n### spring-cloud-starter-oauth2+security使用\n\n#### 相关依赖引入\n- spring-cloud-starter-oauth2+security是一套完整的用户登录授权系统，在认证服务上主要有三个依赖：`spring-cloud-starter-security、spring-cloud-starter-oauth2、spring-security-jwt`\n```\n\n        <!--spring security相关依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-oauth2</artifactId>\n        </dependency>\n\n  <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-jwt</artifactId>\n            <version>1.1.1.RELEASE</version>\n        </dependency>\n\n```\n- 在其他需要权限访问的服务上主要包含两个依赖：\n\n```\n  <!--spring security相关依赖-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-oauth2</artifactId>\n        </dependency>\n\n```\n\n#### 认证服务搭建\n- 这里主要做security和oauth2的相关配置\n- 主要由以下四个配置文件\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64fdb305f8934f128f141085735d9945~tplv-k3u1fbpfcp-watermark.image?)\n\n- WebSecurityConfig主要做springsecurity相关的配置\n```\n@EnableWebSecurity //开启security服务\n@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true) //允许在方法上加的注解来配置权限\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    DaoAuthenticationProviderCustom daoAuthenticationProviderCustom;\n\n    //使用自己定义DaoAuthenticationProviderCustom来代替框架的DaoAuthenticationProvider\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.authenticationProvider(daoAuthenticationProviderCustom);\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        //密码为明文方式\n        return NoOpPasswordEncoder.getInstance();\n        //return new BCryptPasswordEncoder();\n    }\n\n    //配置安全拦截机制\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                .antMatchers(\"/pow/**\").authenticated()//访问/r开始的请求需要认证通过\n                .anyRequest().permitAll()//其它请求全部放行\n                .and()\n                .formLogin().successForwardUrl(\"/login-success\");//登录成功跳转到/login-success\n        http.logout().logoutUrl(\"/logout\");//退出地址\n    }\n\n}\n\n```\n- TokenConfig在认证服务中主要作token的生成配置\n\n```\n@Configuration\npublic class TokenConfig {\n\n    private String SIGNING_KEY = \"030321liuxinyu\";//和其他服务一致来解析token\n\n    @Autowired\n    TokenStore tokenStore;\n\n//    @Bean\n//    public TokenStore tokenStore() {\n//        //使用内存存储令牌（普通令牌）\n//        return new InMemoryTokenStore();\n//    }\n\n    @Autowired\n    private JwtAccessTokenConverter accessTokenConverter;\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(SIGNING_KEY);\n        return converter;\n    }\n\n    //令牌管理服务\n    @Bean(name=\"authorizationServerTokenServicesCustom\")\n    public AuthorizationServerTokenServices tokenService() {\n        DefaultTokenServices service=new DefaultTokenServices();\n        service.setSupportRefreshToken(true);//支持刷新令牌\n        service.setTokenStore(tokenStore);//令牌存储策略\n\n        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\n        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));\n        service.setTokenEnhancer(tokenEnhancerChain);\n\n        service.setAccessTokenValiditySeconds(7200); // 令牌默认有效期2小时\n        service.setRefreshTokenValiditySeconds(259200); // 刷新令牌默认有效期3天\n        return service;\n    }}\n```\n\n- AuthorizationServer主要是授权方面也就是spring-cloud-starter-oauth2相关的配置\n\n```\n@Configuration\n@EnableAuthorizationServer\n@Slf4j\npublic class AuthorizationServer extends AuthorizationServerConfigurerAdapter {\n\n\n    @Resource(name = \"authorizationServerTokenServicesCustom\")\n    private AuthorizationServerTokenServices authorizationServerTokenServices;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    //客户端详情服务\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients)\n            throws Exception {\n\n        clients.inMemory()// 使用in-memory存储\n                .withClient(\"starBlog\")// client_id\n                .secret(\"030321liuxinyu\")//客户端密钥\n//                .secret(new BCryptPasswordEncoder().encode(\"XcWebApp\"))//客户端密钥\n                .resourceIds(\"starBlog\")//资源列表\n\n                .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"implicit\", \"refresh_token\", \"password\")// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials\n                .scopes(\"all\")// 允许的授权范围\n                .autoApprove(false)//false跳转到授权页面\n                //客户端接收授权码的重定向地址\n                .redirectUris(\"http://www.xuecheng-plus.com\")\n        ;\n    }\n\n\n    //令牌端点的访问配置\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints\n                .authenticationManager(authenticationManager)//认证管理器\n                .tokenServices(authorizationServerTokenServices)//令牌管理服务\n                .allowedTokenEndpointRequestMethods(HttpMethod.POST);\n    }\n\n    //令牌端点的安全配置\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) {\n        security\n                .tokenKeyAccess(\"permitAll()\")                    //oauth/token_key是公开\n                .checkTokenAccess(\"permitAll()\")                  //oauth/check_token公开\n                .allowFormAuthenticationForClients()                //表单认证（申请令牌）\n        ;\n    }\n\n}\n```\n- DaoAuthenticationProviderCustom是一个很重要的配置，通过这个修改的springsecuritu原先提供的登录方案（账号密码登录），但当前环境肯定涉及到多种登录方式，我们通过重写`additionalAuthenticationChecks和setUserDetailsService`方法来自定义登录方式\n\n```\n@Slf4j\n@Component\npublic class DaoAuthenticationProviderCustom extends DaoAuthenticationProvider {\n\n @Autowired\n public void setUserDetailsService(UserDetailsService userDetailsService) {\n  super.setUserDetailsService(userDetailsService);\n }\n\n\n //不再校验密码\n protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {\n\n }\n\n\n}\n\n```\n\n- 至此认证服务的相关配置就完成啦，我们可以通过`POST localhost:8081/oauth/token?client_id=starBlog&client_secret=030321liuxinyu&grant_type=password&username={\"account\":\"账号\",\"authType\":\"登录方式\",\"password\":\"密码\"}`来进行测试\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf8661a32e914bee9e24ed8e7105e399~tplv-k3u1fbpfcp-watermark.image?)\n\n这就是前端用户点击登录后获得的信息，然后将该token存储在本地，用户每次访问的时候都携带token即可，\n\n- oauth也提供了校验token的方法`POST localhost:8081/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsieHVlY2hlbmctcGx1cyJdLCJ1c2VyX25hbWUiOiJ7XCJpZFwiOjE2MTY1MTYxNjUsXCJwaG9uZVwiOlwiMTM2NDg4MzcwOTNcIixcIkVtYWlsXCI6XCIyMDY0OTg5NDAzQHFxLmNvbVwiLFwiYWNjb3VudFwiOlwiMjA2NDk4OTQwM1wifSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NzUyNTI3MjIsImF1dGhvcml0aWVzIjpbInRlc3QiXSwianRpIjoiMDU1MjBlOTYtMTVhOS00MjAzLWExMWItNjRjZTNhNDQ5ZTM4IiwiY2xpZW50X2lkIjoic3RhckJsb2cifQ.I6wM4jZJdSA07gTnzmlP59vzqvm1hxNcNt3ejE0mR8w`\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2343a98e4ad64ee3a756ae144869cc7a~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 资源服务搭建\n- 引入配置文件，相比于认证服务，资源服务的配置量少很多，主要有以下两个配置文件\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ad3d5c189a4243beae77449c746b46~tplv-k3u1fbpfcp-watermark.image?)\n- TokenConfig(和认证服务的类似，但不需要token生成)\n\n```\n@Configuration\npublic class TokenConfig {\n\n    String SIGNING_KEY = \"key\";\n\n\n    @Autowired\n    private JwtAccessTokenConverter accessTokenConverter;\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(SIGNING_KEY);\n        return converter;\n    }\n}\n\n```\n\n- ResouceServerConfig（资源权限的相关配置）\n```\n@Configuration\n@EnableResourceServer\n@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\npublic class ResouceServerConfig extends ResourceServerConfigurerAdapter {\n\n\n    //资源服务标识\n    public static final String RESOURCE_ID = \"starBlog\";\n\n    @Autowired\n    TokenStore tokenStore;\n\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        resources.resourceId(RESOURCE_ID)//资源 id\n                .tokenStore(tokenStore)\n                .stateless(true);\n    }\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .disable()\n                .authorizeRequests()\n                .antMatchers( \"/**\").authenticated()//所有/r/**的请求必须认证通过\n                .anyRequest().permitAll()\n        ;\n    }\n\n}\n```\n\n- 这样资源服务就搭建好了，我们访问资源\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8d6f8c7a3704bfaa38e9523ae869698~tplv-k3u1fbpfcp-watermark.image?)\n\n- 在资源服务的方法上添加`@PreAuthorize(\"hasAuthority('test')\")`可以指定拥有某项权限的用户才可以访问\n\n\n\n> 这样一个简单的spring-cloud-starter-oauth2+securit+jwt微服务就搭建完成了\n\n","slug":"spring-cloud-starter-oauth2-securit-jwt微服务实战","published":1,"updated":"2023-12-05T06:23:12.578Z","layout":"post","photos":[],"link":"","_id":"clprymdkp0003h4pkajfkdh16","content":"<h3 id=\"spring-cloud-starter-oauth2-securit简介\"><a href=\"#spring-cloud-starter-oauth2-securit简介\" class=\"headerlink\" title=\"spring-cloud-starter-oauth2+securit简介\"></a>spring-cloud-starter-oauth2+securit简介</h3><h5 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h5><ul>\n<li>用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信 息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维 码登录，手机短信登录，指纹认证等方式。</li>\n</ul>\n<p><code>认证是为了保护系统的隐私数据与资源，用户的身份合法方可访问该系统的资源。</code></p>\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><ul>\n<li>授权是用户认证通过后，根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访 问，没有权限则拒绝访问。</li>\n</ul>\n<p><code>认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，授权是在认证通过 后发生的， 控制不同的用户能够访问不同的资源。</code></p>\n<h4 id=\"RBAC模型\"><a href=\"#RBAC模型\" class=\"headerlink\" title=\"RBAC模型\"></a>RBAC模型</h4><p><code>主体 -》 角色 -》 资源 -》行为</code></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2606eb94497441fb84648424a748d5e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"spring-cloud-starter-oauth2-security使用\"><a href=\"#spring-cloud-starter-oauth2-security使用\" class=\"headerlink\" title=\"spring-cloud-starter-oauth2+security使用\"></a>spring-cloud-starter-oauth2+security使用</h3><h4 id=\"相关依赖引入\"><a href=\"#相关依赖引入\" class=\"headerlink\" title=\"相关依赖引入\"></a>相关依赖引入</h4><ul>\n<li>spring-cloud-starter-oauth2+security是一套完整的用户登录授权系统，在认证服务上主要有三个依赖：<code>spring-cloud-starter-security、spring-cloud-starter-oauth2、spring-security-jwt</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      &lt;!--spring security相关依赖--&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;1.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>在其他需要权限访问的服务上主要包含两个依赖：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--spring security相关依赖--&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"认证服务搭建\"><a href=\"#认证服务搭建\" class=\"headerlink\" title=\"认证服务搭建\"></a>认证服务搭建</h4><ul>\n<li>这里主要做security和oauth2的相关配置</li>\n<li>主要由以下四个配置文件</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64fdb305f8934f128f141085735d9945~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>WebSecurityConfig主要做springsecurity相关的配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableWebSecurity //开启security服务</span><br><span class=\"line\">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true) //允许在方法上加的注解来配置权限</span><br><span class=\"line\">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    DaoAuthenticationProviderCustom daoAuthenticationProviderCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用自己定义DaoAuthenticationProviderCustom来代替框架的DaoAuthenticationProvider</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class=\"line\">        auth.authenticationProvider(daoAuthenticationProviderCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class=\"line\">        return super.authenticationManagerBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PasswordEncoder passwordEncoder() &#123;</span><br><span class=\"line\">        //密码为明文方式</span><br><span class=\"line\">        return NoOpPasswordEncoder.getInstance();</span><br><span class=\"line\">        //return new BCryptPasswordEncoder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //配置安全拦截机制</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                .antMatchers(&quot;/pow/**&quot;).authenticated()//访问/r开始的请求需要认证通过</span><br><span class=\"line\">                .anyRequest().permitAll()//其它请求全部放行</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .formLogin().successForwardUrl(&quot;/login-success&quot;);//登录成功跳转到/login-success</span><br><span class=\"line\">        http.logout().logoutUrl(&quot;/logout&quot;);//退出地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>TokenConfig在认证服务中主要作token的生成配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String SIGNING_KEY = &quot;030321liuxinyu&quot;;//和其他服务一致来解析token</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    TokenStore tokenStore;</span><br><span class=\"line\"></span><br><span class=\"line\">//    @Bean</span><br><span class=\"line\">//    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">//        //使用内存存储令牌（普通令牌）</span><br><span class=\"line\">//        return new InMemoryTokenStore();</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JwtAccessTokenConverter accessTokenConverter;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">        return new JwtTokenStore(accessTokenConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JwtAccessTokenConverter accessTokenConverter() &#123;</span><br><span class=\"line\">        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();</span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌管理服务</span><br><span class=\"line\">    @Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span><br><span class=\"line\">    public AuthorizationServerTokenServices tokenService() &#123;</span><br><span class=\"line\">        DefaultTokenServices service=new DefaultTokenServices();</span><br><span class=\"line\">        service.setSupportRefreshToken(true);//支持刷新令牌</span><br><span class=\"line\">        service.setTokenStore(tokenStore);//令牌存储策略</span><br><span class=\"line\"></span><br><span class=\"line\">        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();</span><br><span class=\"line\">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));</span><br><span class=\"line\">        service.setTokenEnhancer(tokenEnhancerChain);</span><br><span class=\"line\"></span><br><span class=\"line\">        service.setAccessTokenValiditySeconds(7200); // 令牌默认有效期2小时</span><br><span class=\"line\">        service.setRefreshTokenValiditySeconds(259200); // 刷新令牌默认有效期3天</span><br><span class=\"line\">        return service;</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>AuthorizationServer主要是授权方面也就是spring-cloud-starter-oauth2相关的配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAuthorizationServer</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class AuthorizationServer extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource(name = &quot;authorizationServerTokenServicesCustom&quot;)</span><br><span class=\"line\">    private AuthorizationServerTokenServices authorizationServerTokenServices;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    //客户端详情服务</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        clients.inMemory()// 使用in-memory存储</span><br><span class=\"line\">                .withClient(&quot;starBlog&quot;)// client_id</span><br><span class=\"line\">                .secret(&quot;030321liuxinyu&quot;)//客户端密钥</span><br><span class=\"line\">//                .secret(new BCryptPasswordEncoder().encode(&quot;XcWebApp&quot;))//客户端密钥</span><br><span class=\"line\">                .resourceIds(&quot;starBlog&quot;)//资源列表</span><br><span class=\"line\"></span><br><span class=\"line\">                .authorizedGrantTypes(&quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;implicit&quot;, &quot;refresh_token&quot;, &quot;password&quot;)// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials</span><br><span class=\"line\">                .scopes(&quot;all&quot;)// 允许的授权范围</span><br><span class=\"line\">                .autoApprove(false)//false跳转到授权页面</span><br><span class=\"line\">                //客户端接收授权码的重定向地址</span><br><span class=\"line\">                .redirectUris(&quot;http://www.xuecheng-plus.com&quot;)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌端点的访问配置</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) &#123;</span><br><span class=\"line\">        endpoints</span><br><span class=\"line\">                .authenticationManager(authenticationManager)//认证管理器</span><br><span class=\"line\">                .tokenServices(authorizationServerTokenServices)//令牌管理服务</span><br><span class=\"line\">                .allowedTokenEndpointRequestMethods(HttpMethod.POST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌端点的安全配置</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(AuthorizationServerSecurityConfigurer security) &#123;</span><br><span class=\"line\">        security</span><br><span class=\"line\">                .tokenKeyAccess(&quot;permitAll()&quot;)                    //oauth/token_key是公开</span><br><span class=\"line\">                .checkTokenAccess(&quot;permitAll()&quot;)                  //oauth/check_token公开</span><br><span class=\"line\">                .allowFormAuthenticationForClients()                //表单认证（申请令牌）</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>DaoAuthenticationProviderCustom是一个很重要的配置，通过这个修改的springsecuritu原先提供的登录方案（账号密码登录），但当前环境肯定涉及到多种登录方式，我们通过重写<code>additionalAuthenticationChecks和setUserDetailsService</code>方法来自定义登录方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DaoAuthenticationProviderCustom extends DaoAuthenticationProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> @Autowired</span><br><span class=\"line\"> public void setUserDetailsService(UserDetailsService userDetailsService) &#123;</span><br><span class=\"line\">  super.setUserDetailsService(userDetailsService);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> //不再校验密码</span><br><span class=\"line\"> protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>至此认证服务的相关配置就完成啦，我们可以通过<code>POST localhost:8081/oauth/token?client_id=starBlog&amp;client_secret=030321liuxinyu&amp;grant_type=password&amp;username=&#123;&quot;account&quot;:&quot;账号&quot;,&quot;authType&quot;:&quot;登录方式&quot;,&quot;password&quot;:&quot;密码&quot;&#125;</code>来进行测试</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf8661a32e914bee9e24ed8e7105e399~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这就是前端用户点击登录后获得的信息，然后将该token存储在本地，用户每次访问的时候都携带token即可，</p>\n<ul>\n<li>oauth也提供了校验token的方法<code>POST localhost:8081/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsieHVlY2hlbmctcGx1cyJdLCJ1c2VyX25hbWUiOiJ7XCJpZFwiOjE2MTY1MTYxNjUsXCJwaG9uZVwiOlwiMTM2NDg4MzcwOTNcIixcIkVtYWlsXCI6XCIyMDY0OTg5NDAzQHFxLmNvbVwiLFwiYWNjb3VudFwiOlwiMjA2NDk4OTQwM1wifSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NzUyNTI3MjIsImF1dGhvcml0aWVzIjpbInRlc3QiXSwianRpIjoiMDU1MjBlOTYtMTVhOS00MjAzLWExMWItNjRjZTNhNDQ5ZTM4IiwiY2xpZW50X2lkIjoic3RhckJsb2cifQ.I6wM4jZJdSA07gTnzmlP59vzqvm1hxNcNt3ejE0mR8w</code></li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2343a98e4ad64ee3a756ae144869cc7a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"资源服务搭建\"><a href=\"#资源服务搭建\" class=\"headerlink\" title=\"资源服务搭建\"></a>资源服务搭建</h4><ul>\n<li>引入配置文件，相比于认证服务，资源服务的配置量少很多，主要有以下两个配置文件</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ad3d5c189a4243beae77449c746b46~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>TokenConfig(和认证服务的类似，但不需要token生成)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String SIGNING_KEY = &quot;key&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JwtAccessTokenConverter accessTokenConverter;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">        return new JwtTokenStore(accessTokenConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JwtAccessTokenConverter accessTokenConverter() &#123;</span><br><span class=\"line\">        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();</span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ResouceServerConfig（资源权限的相关配置）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableResourceServer</span><br><span class=\"line\">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class=\"line\">public class ResouceServerConfig extends ResourceServerConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //资源服务标识</span><br><span class=\"line\">    public static final String RESOURCE_ID = &quot;starBlog&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    TokenStore tokenStore;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(ResourceServerSecurityConfigurer resources) &#123;</span><br><span class=\"line\">        resources.resourceId(RESOURCE_ID)//资源 id</span><br><span class=\"line\">                .tokenStore(tokenStore)</span><br><span class=\"line\">                .stateless(true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">        http.csrf()</span><br><span class=\"line\">                .disable()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                .antMatchers( &quot;/**&quot;).authenticated()//所有/r/**的请求必须认证通过</span><br><span class=\"line\">                .anyRequest().permitAll()</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样资源服务就搭建好了，我们访问资源</p>\n</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8d6f8c7a3704bfaa38e9523ae869698~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>在资源服务的方法上添加<code>@PreAuthorize(&quot;hasAuthority(&#39;test&#39;)&quot;)</code>可以指定拥有某项权限的用户才可以访问</li>\n</ul>\n<blockquote>\n<p>这样一个简单的spring-cloud-starter-oauth2+securit+jwt微服务就搭建完成了</p>\n</blockquote>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"spring-cloud-starter-oauth2-securit简介\"><a href=\"#spring-cloud-starter-oauth2-securit简介\" class=\"headerlink\" title=\"spring-cloud-starter-oauth2+securit简介\"></a>spring-cloud-starter-oauth2+securit简介</h3><h5 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h5><ul>\n<li>用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信 息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维 码登录，手机短信登录，指纹认证等方式。</li>\n</ul>\n<p><code>认证是为了保护系统的隐私数据与资源，用户的身份合法方可访问该系统的资源。</code></p>\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><ul>\n<li>授权是用户认证通过后，根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访 问，没有权限则拒绝访问。</li>\n</ul>\n<p><code>认证是为了保证用户身份的合法性，授权则是为了更细粒度的对隐私数据进行划分，授权是在认证通过 后发生的， 控制不同的用户能够访问不同的资源。</code></p>\n<h4 id=\"RBAC模型\"><a href=\"#RBAC模型\" class=\"headerlink\" title=\"RBAC模型\"></a>RBAC模型</h4><p><code>主体 -》 角色 -》 资源 -》行为</code></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2606eb94497441fb84648424a748d5e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"spring-cloud-starter-oauth2-security使用\"><a href=\"#spring-cloud-starter-oauth2-security使用\" class=\"headerlink\" title=\"spring-cloud-starter-oauth2+security使用\"></a>spring-cloud-starter-oauth2+security使用</h3><h4 id=\"相关依赖引入\"><a href=\"#相关依赖引入\" class=\"headerlink\" title=\"相关依赖引入\"></a>相关依赖引入</h4><ul>\n<li>spring-cloud-starter-oauth2+security是一套完整的用户登录授权系统，在认证服务上主要有三个依赖：<code>spring-cloud-starter-security、spring-cloud-starter-oauth2、spring-security-jwt</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      &lt;!--spring security相关依赖--&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;</span><br><span class=\"line\">          &lt;version&gt;1.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>在其他需要权限访问的服务上主要包含两个依赖：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--spring security相关依赖--&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"认证服务搭建\"><a href=\"#认证服务搭建\" class=\"headerlink\" title=\"认证服务搭建\"></a>认证服务搭建</h4><ul>\n<li>这里主要做security和oauth2的相关配置</li>\n<li>主要由以下四个配置文件</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64fdb305f8934f128f141085735d9945~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>WebSecurityConfig主要做springsecurity相关的配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableWebSecurity //开启security服务</span><br><span class=\"line\">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true) //允许在方法上加的注解来配置权限</span><br><span class=\"line\">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    DaoAuthenticationProviderCustom daoAuthenticationProviderCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用自己定义DaoAuthenticationProviderCustom来代替框架的DaoAuthenticationProvider</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class=\"line\">        auth.authenticationProvider(daoAuthenticationProviderCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class=\"line\">        return super.authenticationManagerBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PasswordEncoder passwordEncoder() &#123;</span><br><span class=\"line\">        //密码为明文方式</span><br><span class=\"line\">        return NoOpPasswordEncoder.getInstance();</span><br><span class=\"line\">        //return new BCryptPasswordEncoder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //配置安全拦截机制</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                .antMatchers(&quot;/pow/**&quot;).authenticated()//访问/r开始的请求需要认证通过</span><br><span class=\"line\">                .anyRequest().permitAll()//其它请求全部放行</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .formLogin().successForwardUrl(&quot;/login-success&quot;);//登录成功跳转到/login-success</span><br><span class=\"line\">        http.logout().logoutUrl(&quot;/logout&quot;);//退出地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>TokenConfig在认证服务中主要作token的生成配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String SIGNING_KEY = &quot;030321liuxinyu&quot;;//和其他服务一致来解析token</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    TokenStore tokenStore;</span><br><span class=\"line\"></span><br><span class=\"line\">//    @Bean</span><br><span class=\"line\">//    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">//        //使用内存存储令牌（普通令牌）</span><br><span class=\"line\">//        return new InMemoryTokenStore();</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JwtAccessTokenConverter accessTokenConverter;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">        return new JwtTokenStore(accessTokenConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JwtAccessTokenConverter accessTokenConverter() &#123;</span><br><span class=\"line\">        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();</span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌管理服务</span><br><span class=\"line\">    @Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span><br><span class=\"line\">    public AuthorizationServerTokenServices tokenService() &#123;</span><br><span class=\"line\">        DefaultTokenServices service=new DefaultTokenServices();</span><br><span class=\"line\">        service.setSupportRefreshToken(true);//支持刷新令牌</span><br><span class=\"line\">        service.setTokenStore(tokenStore);//令牌存储策略</span><br><span class=\"line\"></span><br><span class=\"line\">        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();</span><br><span class=\"line\">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter));</span><br><span class=\"line\">        service.setTokenEnhancer(tokenEnhancerChain);</span><br><span class=\"line\"></span><br><span class=\"line\">        service.setAccessTokenValiditySeconds(7200); // 令牌默认有效期2小时</span><br><span class=\"line\">        service.setRefreshTokenValiditySeconds(259200); // 刷新令牌默认有效期3天</span><br><span class=\"line\">        return service;</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>AuthorizationServer主要是授权方面也就是spring-cloud-starter-oauth2相关的配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAuthorizationServer</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class AuthorizationServer extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource(name = &quot;authorizationServerTokenServicesCustom&quot;)</span><br><span class=\"line\">    private AuthorizationServerTokenServices authorizationServerTokenServices;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    //客户端详情服务</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        clients.inMemory()// 使用in-memory存储</span><br><span class=\"line\">                .withClient(&quot;starBlog&quot;)// client_id</span><br><span class=\"line\">                .secret(&quot;030321liuxinyu&quot;)//客户端密钥</span><br><span class=\"line\">//                .secret(new BCryptPasswordEncoder().encode(&quot;XcWebApp&quot;))//客户端密钥</span><br><span class=\"line\">                .resourceIds(&quot;starBlog&quot;)//资源列表</span><br><span class=\"line\"></span><br><span class=\"line\">                .authorizedGrantTypes(&quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;implicit&quot;, &quot;refresh_token&quot;, &quot;password&quot;)// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials</span><br><span class=\"line\">                .scopes(&quot;all&quot;)// 允许的授权范围</span><br><span class=\"line\">                .autoApprove(false)//false跳转到授权页面</span><br><span class=\"line\">                //客户端接收授权码的重定向地址</span><br><span class=\"line\">                .redirectUris(&quot;http://www.xuecheng-plus.com&quot;)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌端点的访问配置</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) &#123;</span><br><span class=\"line\">        endpoints</span><br><span class=\"line\">                .authenticationManager(authenticationManager)//认证管理器</span><br><span class=\"line\">                .tokenServices(authorizationServerTokenServices)//令牌管理服务</span><br><span class=\"line\">                .allowedTokenEndpointRequestMethods(HttpMethod.POST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //令牌端点的安全配置</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(AuthorizationServerSecurityConfigurer security) &#123;</span><br><span class=\"line\">        security</span><br><span class=\"line\">                .tokenKeyAccess(&quot;permitAll()&quot;)                    //oauth/token_key是公开</span><br><span class=\"line\">                .checkTokenAccess(&quot;permitAll()&quot;)                  //oauth/check_token公开</span><br><span class=\"line\">                .allowFormAuthenticationForClients()                //表单认证（申请令牌）</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>DaoAuthenticationProviderCustom是一个很重要的配置，通过这个修改的springsecuritu原先提供的登录方案（账号密码登录），但当前环境肯定涉及到多种登录方式，我们通过重写<code>additionalAuthenticationChecks和setUserDetailsService</code>方法来自定义登录方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DaoAuthenticationProviderCustom extends DaoAuthenticationProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> @Autowired</span><br><span class=\"line\"> public void setUserDetailsService(UserDetailsService userDetailsService) &#123;</span><br><span class=\"line\">  super.setUserDetailsService(userDetailsService);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> //不再校验密码</span><br><span class=\"line\"> protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>至此认证服务的相关配置就完成啦，我们可以通过<code>POST localhost:8081/oauth/token?client_id=starBlog&amp;client_secret=030321liuxinyu&amp;grant_type=password&amp;username=&#123;&quot;account&quot;:&quot;账号&quot;,&quot;authType&quot;:&quot;登录方式&quot;,&quot;password&quot;:&quot;密码&quot;&#125;</code>来进行测试</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf8661a32e914bee9e24ed8e7105e399~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这就是前端用户点击登录后获得的信息，然后将该token存储在本地，用户每次访问的时候都携带token即可，</p>\n<ul>\n<li>oauth也提供了校验token的方法<code>POST localhost:8081/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsieHVlY2hlbmctcGx1cyJdLCJ1c2VyX25hbWUiOiJ7XCJpZFwiOjE2MTY1MTYxNjUsXCJwaG9uZVwiOlwiMTM2NDg4MzcwOTNcIixcIkVtYWlsXCI6XCIyMDY0OTg5NDAzQHFxLmNvbVwiLFwiYWNjb3VudFwiOlwiMjA2NDk4OTQwM1wifSIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NzUyNTI3MjIsImF1dGhvcml0aWVzIjpbInRlc3QiXSwianRpIjoiMDU1MjBlOTYtMTVhOS00MjAzLWExMWItNjRjZTNhNDQ5ZTM4IiwiY2xpZW50X2lkIjoic3RhckJsb2cifQ.I6wM4jZJdSA07gTnzmlP59vzqvm1hxNcNt3ejE0mR8w</code></li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2343a98e4ad64ee3a756ae144869cc7a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"资源服务搭建\"><a href=\"#资源服务搭建\" class=\"headerlink\" title=\"资源服务搭建\"></a>资源服务搭建</h4><ul>\n<li>引入配置文件，相比于认证服务，资源服务的配置量少很多，主要有以下两个配置文件</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ad3d5c189a4243beae77449c746b46~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>TokenConfig(和认证服务的类似，但不需要token生成)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String SIGNING_KEY = &quot;key&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JwtAccessTokenConverter accessTokenConverter;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public TokenStore tokenStore() &#123;</span><br><span class=\"line\">        return new JwtTokenStore(accessTokenConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JwtAccessTokenConverter accessTokenConverter() &#123;</span><br><span class=\"line\">        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();</span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY);</span><br><span class=\"line\">        return converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ResouceServerConfig（资源权限的相关配置）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableResourceServer</span><br><span class=\"line\">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class=\"line\">public class ResouceServerConfig extends ResourceServerConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //资源服务标识</span><br><span class=\"line\">    public static final String RESOURCE_ID = &quot;starBlog&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    TokenStore tokenStore;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(ResourceServerSecurityConfigurer resources) &#123;</span><br><span class=\"line\">        resources.resourceId(RESOURCE_ID)//资源 id</span><br><span class=\"line\">                .tokenStore(tokenStore)</span><br><span class=\"line\">                .stateless(true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">        http.csrf()</span><br><span class=\"line\">                .disable()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                .antMatchers( &quot;/**&quot;).authenticated()//所有/r/**的请求必须认证通过</span><br><span class=\"line\">                .anyRequest().permitAll()</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样资源服务就搭建好了，我们访问资源</p>\n</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8d6f8c7a3704bfaa38e9523ae869698~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ul>\n<li>在资源服务的方法上添加<code>@PreAuthorize(&quot;hasAuthority(&#39;test&#39;)&quot;)</code>可以指定拥有某项权限的用户才可以访问</li>\n</ul>\n<blockquote>\n<p>这样一个简单的spring-cloud-starter-oauth2+securit+jwt微服务就搭建完成了</p>\n</blockquote>\n"},{"title":"springcloud gateway初体验","keywords":"springcloud，gateway","description":"springcloud gateway","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:15:31.000Z","_content":"\n\n\n### 在springcloud alibaba中集成gateway\n##### 新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖\n```pom\n      <!--gateway⽹关-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n```\n##### 加入nacos服务发现依赖和nacos服务注册中心适配\n```\n  <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n```\n#### 在bootstrap.yml配置文件中进行相关配置\n```\nserver:\n  port: 9000\nspring:\n  application:\n    name: service-gateway\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #让gateway可以发现nacos中的微服务\n          enabled: true\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n```\n`至此便完成了gateway路由的自动装配，通过访问9000端口完成请求的分发了`\n\n#### 启动nacos\n\n\n![1](../images/springcloud-gateway初体验-1701757439810.png)\n\n#### 书写测试接口controller\n```\npackage com.example.servicecontent.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author star\n * @date 2023/1/28 12:05\n */\n@Slf4j\n@RestController\n@CrossOrigin\n@RequestMapping(\"/content\")\n@RefreshScope\npublic class testController {\n\n    @GetMapping(\"/777\")\n    public String post(){\n        return \"77777777777777777777777777777777777\";\n    }\n}\n\n```\n\n\n#### 启动果然报错\n\n![2](../images/springcloud-gateway初体验-1701757449291.png)\n\n`好在全网搜寻找到了解决方案`\n原来是我继承了common工程，导致加入springweb依赖导致的报错，删除依赖，重新启动\n\n![7](../images/springcloud-gateway初体验-1701757498800.png)\n\n#### 输入9000端口测试\n\n`再次报错`\n\n![8](../images/springcloud-gateway初体验-1701757506021.png)\n这下我发现了nacos的问题，springcloud gateway竟然在public分支里面，我的其他服务都在blog分支\n\n![9](../images/springcloud-gateway初体验-1701757512055.png)\n`修改bootstrap.yml文件后再次启动 -------successful`\n\n![10](../images/springcloud-gateway初体验-1701757517086.png)\n\n### springcloud gateway自定义配置详解\n\n`如果想要自定义路由加载的话会用到以下参数`\n\n- id，路由标识符，区别于其他 Route。\n- uri，路由指向的⽬的地 uri，即客户端请求最终被转发到的微服务。\n- order，⽤于多个 Route 之间的排序，数值越⼩排序越靠前，匹配优先级越⾼。\n- predicate，断⾔的作⽤是进⾏条件判断，只有断⾔都返回真，才会真正的执⾏路由。\n- filter，过滤器⽤于修改请求和响应信息。\n\n\n### 全网爆火的gateway执行流程图\n\n![11](../images/springcloud-gateway初体验-1701757523867.png)\n\n#### 其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\n\n","source":"_posts/springcloud-gateway初体验.md","raw":"---\ntitle: springcloud gateway初体验\ntags:\n  - springcloud\n  - 后端\n  - gateway\ncategories: 后端\nkeywords: springcloud，gateway\ndescription: springcloud gateway\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:15:31\n---\n\n\n\n### 在springcloud alibaba中集成gateway\n##### 新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖\n```pom\n      <!--gateway⽹关-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n```\n##### 加入nacos服务发现依赖和nacos服务注册中心适配\n```\n  <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n```\n#### 在bootstrap.yml配置文件中进行相关配置\n```\nserver:\n  port: 9000\nspring:\n  application:\n    name: service-gateway\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #让gateway可以发现nacos中的微服务\n          enabled: true\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n```\n`至此便完成了gateway路由的自动装配，通过访问9000端口完成请求的分发了`\n\n#### 启动nacos\n\n\n![1](../images/springcloud-gateway初体验-1701757439810.png)\n\n#### 书写测试接口controller\n```\npackage com.example.servicecontent.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author star\n * @date 2023/1/28 12:05\n */\n@Slf4j\n@RestController\n@CrossOrigin\n@RequestMapping(\"/content\")\n@RefreshScope\npublic class testController {\n\n    @GetMapping(\"/777\")\n    public String post(){\n        return \"77777777777777777777777777777777777\";\n    }\n}\n\n```\n\n\n#### 启动果然报错\n\n![2](../images/springcloud-gateway初体验-1701757449291.png)\n\n`好在全网搜寻找到了解决方案`\n原来是我继承了common工程，导致加入springweb依赖导致的报错，删除依赖，重新启动\n\n![7](../images/springcloud-gateway初体验-1701757498800.png)\n\n#### 输入9000端口测试\n\n`再次报错`\n\n![8](../images/springcloud-gateway初体验-1701757506021.png)\n这下我发现了nacos的问题，springcloud gateway竟然在public分支里面，我的其他服务都在blog分支\n\n![9](../images/springcloud-gateway初体验-1701757512055.png)\n`修改bootstrap.yml文件后再次启动 -------successful`\n\n![10](../images/springcloud-gateway初体验-1701757517086.png)\n\n### springcloud gateway自定义配置详解\n\n`如果想要自定义路由加载的话会用到以下参数`\n\n- id，路由标识符，区别于其他 Route。\n- uri，路由指向的⽬的地 uri，即客户端请求最终被转发到的微服务。\n- order，⽤于多个 Route 之间的排序，数值越⼩排序越靠前，匹配优先级越⾼。\n- predicate，断⾔的作⽤是进⾏条件判断，只有断⾔都返回真，才会真正的执⾏路由。\n- filter，过滤器⽤于修改请求和响应信息。\n\n\n### 全网爆火的gateway执行流程图\n\n![11](../images/springcloud-gateway初体验-1701757523867.png)\n\n#### 其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\n\n","slug":"springcloud-gateway初体验","published":1,"updated":"2023-12-05T06:29:15.537Z","_id":"clprymdky000jh4pk92rm1k9l","layout":"post","photos":[],"link":"","content":"<h3 id=\"在springcloud-alibaba中集成gateway\"><a href=\"#在springcloud-alibaba中集成gateway\" class=\"headerlink\" title=\"在springcloud alibaba中集成gateway\"></a>在springcloud alibaba中集成gateway</h3><h5 id=\"新建maven项目service-gateway并在pom文件中导入springcloud-gateway依赖\"><a href=\"#新建maven项目service-gateway并在pom文件中导入springcloud-gateway依赖\" class=\"headerlink\" title=\"新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖\"></a>新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--gateway⽹关--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加入nacos服务发现依赖和nacos服务注册中心适配\"><a href=\"#加入nacos服务发现依赖和nacos服务注册中心适配\" class=\"headerlink\" title=\"加入nacos服务发现依赖和nacos服务注册中心适配\"></a>加入nacos服务发现依赖和nacos服务注册中心适配</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"在bootstrap-yml配置文件中进行相关配置\"><a href=\"#在bootstrap-yml配置文件中进行相关配置\" class=\"headerlink\" title=\"在bootstrap.yml配置文件中进行相关配置\"></a>在bootstrap.yml配置文件中进行相关配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9000</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-gateway</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        locator:</span><br><span class=\"line\">          #让gateway可以发现nacos中的微服务</span><br><span class=\"line\">          enabled: true</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        server-addr: localhost:8848</span><br></pre></td></tr></table></figure>\n<p><code>至此便完成了gateway路由的自动装配，通过访问9000端口完成请求的分发了</code></p>\n<h4 id=\"启动nacos\"><a href=\"#启动nacos\" class=\"headerlink\" title=\"启动nacos\"></a>启动nacos</h4><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757439810.png\" alt=\"1\"></p>\n<h4 id=\"书写测试接口controller\"><a href=\"#书写测试接口controller\" class=\"headerlink\" title=\"书写测试接口controller\"></a>书写测试接口controller</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.servicecontent.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author star</span><br><span class=\"line\"> * @date 2023/1/28 12:05</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@CrossOrigin</span><br><span class=\"line\">@RequestMapping(&quot;/content&quot;)</span><br><span class=\"line\">@RefreshScope</span><br><span class=\"line\">public class testController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/777&quot;)</span><br><span class=\"line\">    public String post()&#123;</span><br><span class=\"line\">        return &quot;77777777777777777777777777777777777&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"启动果然报错\"><a href=\"#启动果然报错\" class=\"headerlink\" title=\"启动果然报错\"></a>启动果然报错</h4><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757449291.png\" alt=\"2\"></p>\n<p><code>好在全网搜寻找到了解决方案</code><br>原来是我继承了common工程，导致加入springweb依赖导致的报错，删除依赖，重新启动</p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757498800.png\" alt=\"7\"></p>\n<h4 id=\"输入9000端口测试\"><a href=\"#输入9000端口测试\" class=\"headerlink\" title=\"输入9000端口测试\"></a>输入9000端口测试</h4><p><code>再次报错</code></p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757506021.png\" alt=\"8\"><br>这下我发现了nacos的问题，springcloud gateway竟然在public分支里面，我的其他服务都在blog分支</p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757512055.png\" alt=\"9\"><br><code>修改bootstrap.yml文件后再次启动 -------successful</code></p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757517086.png\" alt=\"10\"></p>\n<h3 id=\"springcloud-gateway自定义配置详解\"><a href=\"#springcloud-gateway自定义配置详解\" class=\"headerlink\" title=\"springcloud gateway自定义配置详解\"></a>springcloud gateway自定义配置详解</h3><p><code>如果想要自定义路由加载的话会用到以下参数</code></p>\n<ul>\n<li>id，路由标识符，区别于其他 Route。</li>\n<li>uri，路由指向的⽬的地 uri，即客户端请求最终被转发到的微服务。</li>\n<li>order，⽤于多个 Route 之间的排序，数值越⼩排序越靠前，匹配优先级越⾼。</li>\n<li>predicate，断⾔的作⽤是进⾏条件判断，只有断⾔都返回真，才会真正的执⾏路由。</li>\n<li>filter，过滤器⽤于修改请求和响应信息。</li>\n</ul>\n<h3 id=\"全网爆火的gateway执行流程图\"><a href=\"#全网爆火的gateway执行流程图\" class=\"headerlink\" title=\"全网爆火的gateway执行流程图\"></a>全网爆火的gateway执行流程图</h3><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757523867.png\" alt=\"11\"></p>\n<h4 id=\"其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\"><a href=\"#其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\" class=\"headerlink\" title=\"其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\"></a>其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦</h4>","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"在springcloud-alibaba中集成gateway\"><a href=\"#在springcloud-alibaba中集成gateway\" class=\"headerlink\" title=\"在springcloud alibaba中集成gateway\"></a>在springcloud alibaba中集成gateway</h3><h5 id=\"新建maven项目service-gateway并在pom文件中导入springcloud-gateway依赖\"><a href=\"#新建maven项目service-gateway并在pom文件中导入springcloud-gateway依赖\" class=\"headerlink\" title=\"新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖\"></a>新建maven项目service-gateway并在pom文件中导入springcloud gateway依赖</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--gateway⽹关--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加入nacos服务发现依赖和nacos服务注册中心适配\"><a href=\"#加入nacos服务发现依赖和nacos服务注册中心适配\" class=\"headerlink\" title=\"加入nacos服务发现依赖和nacos服务注册中心适配\"></a>加入nacos服务发现依赖和nacos服务注册中心适配</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"在bootstrap-yml配置文件中进行相关配置\"><a href=\"#在bootstrap-yml配置文件中进行相关配置\" class=\"headerlink\" title=\"在bootstrap.yml配置文件中进行相关配置\"></a>在bootstrap.yml配置文件中进行相关配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9000</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-gateway</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        locator:</span><br><span class=\"line\">          #让gateway可以发现nacos中的微服务</span><br><span class=\"line\">          enabled: true</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        server-addr: localhost:8848</span><br></pre></td></tr></table></figure>\n<p><code>至此便完成了gateway路由的自动装配，通过访问9000端口完成请求的分发了</code></p>\n<h4 id=\"启动nacos\"><a href=\"#启动nacos\" class=\"headerlink\" title=\"启动nacos\"></a>启动nacos</h4><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757439810.png\" alt=\"1\"></p>\n<h4 id=\"书写测试接口controller\"><a href=\"#书写测试接口controller\" class=\"headerlink\" title=\"书写测试接口controller\"></a>书写测试接口controller</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.servicecontent.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author star</span><br><span class=\"line\"> * @date 2023/1/28 12:05</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@CrossOrigin</span><br><span class=\"line\">@RequestMapping(&quot;/content&quot;)</span><br><span class=\"line\">@RefreshScope</span><br><span class=\"line\">public class testController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/777&quot;)</span><br><span class=\"line\">    public String post()&#123;</span><br><span class=\"line\">        return &quot;77777777777777777777777777777777777&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"启动果然报错\"><a href=\"#启动果然报错\" class=\"headerlink\" title=\"启动果然报错\"></a>启动果然报错</h4><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757449291.png\" alt=\"2\"></p>\n<p><code>好在全网搜寻找到了解决方案</code><br>原来是我继承了common工程，导致加入springweb依赖导致的报错，删除依赖，重新启动</p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757498800.png\" alt=\"7\"></p>\n<h4 id=\"输入9000端口测试\"><a href=\"#输入9000端口测试\" class=\"headerlink\" title=\"输入9000端口测试\"></a>输入9000端口测试</h4><p><code>再次报错</code></p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757506021.png\" alt=\"8\"><br>这下我发现了nacos的问题，springcloud gateway竟然在public分支里面，我的其他服务都在blog分支</p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757512055.png\" alt=\"9\"><br><code>修改bootstrap.yml文件后再次启动 -------successful</code></p>\n<p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757517086.png\" alt=\"10\"></p>\n<h3 id=\"springcloud-gateway自定义配置详解\"><a href=\"#springcloud-gateway自定义配置详解\" class=\"headerlink\" title=\"springcloud gateway自定义配置详解\"></a>springcloud gateway自定义配置详解</h3><p><code>如果想要自定义路由加载的话会用到以下参数</code></p>\n<ul>\n<li>id，路由标识符，区别于其他 Route。</li>\n<li>uri，路由指向的⽬的地 uri，即客户端请求最终被转发到的微服务。</li>\n<li>order，⽤于多个 Route 之间的排序，数值越⼩排序越靠前，匹配优先级越⾼。</li>\n<li>predicate，断⾔的作⽤是进⾏条件判断，只有断⾔都返回真，才会真正的执⾏路由。</li>\n<li>filter，过滤器⽤于修改请求和响应信息。</li>\n</ul>\n<h3 id=\"全网爆火的gateway执行流程图\"><a href=\"#全网爆火的gateway执行流程图\" class=\"headerlink\" title=\"全网爆火的gateway执行流程图\"></a>全网爆火的gateway执行流程图</h3><p><img src=\"/../images/springcloud-gateway%E5%88%9D%E4%BD%93%E9%AA%8C-1701757523867.png\" alt=\"11\"></p>\n<h4 id=\"其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\"><a href=\"#其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\" class=\"headerlink\" title=\"其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦\"></a>其实还有一小部分gateway中的拦截器设置，俺觉得没啥必要不如去微服务中配就不过多阐述啦</h4>"},{"title":"前端http请求发送详解","keywords":"http，前端","description":"http，前端","top_img":"/img/qianduan.png","comments":1,"cover":"/img/qianduan.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:15:54.000Z","_content":"\n\n## promise使用\n-   `Promise`(承诺)，给予调用者一个承诺，过一会返回数据给你，就可以创建一个promise对象\n\n-   当我们`new`一个`promise`，此时我们需要传递一个回调函数，这个函数为立即执行的，称之为（executor）\n\n-   这个回调函数，我们需要传入两个参数回调函数，`reslove`,`reject`(函数可以进行传参)\n\n    -   当执行了`reslove`函数，会回调promise对象的.then函数\n    -   当执行了`reject`函数，会回调promise对象的.catche函数\n```\nnew Promise((resolve, reject) => {\n   //写入axios请求\n  console.log(`executor 立即执行`)\n})\n```\n如下代码为经典例\n\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url === 'iceweb.io') {\n        //只能传递一个参数\n        resolve('我成功了,把获取到的数据传出去')\n      } else {\n        reject('url错误，请求失败')\n      }\n    }, 3000)    \n  })\n}\n\n//第一种写法\n//url错误，请求失败,此时会有rej的打印输出\nrequestData('iceweb.org').then(res => {},rej => console.log(rej))\n\n//第二种写法\n//url错误，请求失败 此时会有e的打印输出\nrequestData('iceweb.org').catch(e => console.log(e))\n```\n\n### promise中catch的使用\n在catch后仍可以调用then方法，因为catch返回的也是一个promise对象，且此时的promise中是resolve\n```\nconst promise = new Promise((resolve, reject) => {\n  reject('ice error')\n})\n\npromise.catch(err => ({name:'ice', age: 22})).then(res => console.log(res))\n\n//{name:'ice', age: 22}\n```\n### promise中finally的使用\n-   finally，无论promise状态是fulfilled还是rejected都会执行一次`finally`方法\n```const promise = new Promise((resolve, reject) => {\n  resolve('hi ice')\n})\n\npromise.then(res => console.log(res)).finally(() => console.log('finally execute'))\n\n//finally execute\n\n```\n\n## promise回调地狱\n1. 当我发送网络请求的时候，需要拿到这次网络请求的数据，再发送网络请求，就这样重复三次，才能拿到我最终的结果。导致如下结果(`很不优雅！！！`)\n\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\n\nrequestData('iceweb.io').then(res => {\n  requestData(`iceweb.org ${res}`).then(res => {\n    requestData(`iceweb.com ${res}`).then(res => {\n      console.log(res)\n    })\n  })\n})\n\n//iceweb.com iceweb.org iceweb.io\n\nor\n\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\nrequestData('iceweb.io').then(res => {\n  return requestData(`iceweb.org ${res}`)\n}).then(res => {\n  return requestData(`iceweb.com ${res}`)\n}).then(res => {\n  console.log(res)\n})\n\n//iceweb.com iceweb.org iceweb.io\n```\n\n2.采用`async+await`解决回调地域现象\n\n`await特点`——只有await后面的方法成功执行才会执行下面的代码！\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\nasync function getData() {\n  const res1 = await requestData('iceweb.io')\n  const res2 = await requestData(`iceweb.org ${res1}`)\n  const res3 = await requestData(`iceweb.com ${res2}`)\n\n  console.log(res3)\n}\n\ngetData()\n\n//iceweb.com iceweb.org iceweb.io\n```\n\n## promise的高级封装（umi为例）\n\numi框架封装的请求可以在全局配置文件`src/app.ts`中对request进行配置\n\n对于使用可以使用useRequest具体使用api\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request: RequestConfig = {\n  timeout: 1000,\n  // other axios options you want\n  errorConfig: {\n    errorHandler(){\n    },\n    errorThrower(){\n    }\n  },\n  requestInterceptors: [],\n  responseInterceptors: []\n};\n```\n也可以通过request直接使用api\n\n```\nexport default () => {\n  const { data, error, loading } = useRequest(() => {\n    return services.getUserList('/api/test');\n  });\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n  return <div>{data.name}</div>;\n};\n```\n\n#思考与感悟\n\n*最终做项目还是封装好的好用*\n\n\n\n","source":"_posts/前端http请求发送详解.md","raw":"---\ntitle: 前端http请求发送详解\ntags:\n  - http\n  - 前端\ncategories: 前端\nkeywords: http，前端\ndescription: http，前端\ntop_img: /img/qianduan.png\ncomments: true\ncover: /img/qianduan.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:15:54\n---\n\n\n## promise使用\n-   `Promise`(承诺)，给予调用者一个承诺，过一会返回数据给你，就可以创建一个promise对象\n\n-   当我们`new`一个`promise`，此时我们需要传递一个回调函数，这个函数为立即执行的，称之为（executor）\n\n-   这个回调函数，我们需要传入两个参数回调函数，`reslove`,`reject`(函数可以进行传参)\n\n    -   当执行了`reslove`函数，会回调promise对象的.then函数\n    -   当执行了`reject`函数，会回调promise对象的.catche函数\n```\nnew Promise((resolve, reject) => {\n   //写入axios请求\n  console.log(`executor 立即执行`)\n})\n```\n如下代码为经典例\n\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url === 'iceweb.io') {\n        //只能传递一个参数\n        resolve('我成功了,把获取到的数据传出去')\n      } else {\n        reject('url错误，请求失败')\n      }\n    }, 3000)    \n  })\n}\n\n//第一种写法\n//url错误，请求失败,此时会有rej的打印输出\nrequestData('iceweb.org').then(res => {},rej => console.log(rej))\n\n//第二种写法\n//url错误，请求失败 此时会有e的打印输出\nrequestData('iceweb.org').catch(e => console.log(e))\n```\n\n### promise中catch的使用\n在catch后仍可以调用then方法，因为catch返回的也是一个promise对象，且此时的promise中是resolve\n```\nconst promise = new Promise((resolve, reject) => {\n  reject('ice error')\n})\n\npromise.catch(err => ({name:'ice', age: 22})).then(res => console.log(res))\n\n//{name:'ice', age: 22}\n```\n### promise中finally的使用\n-   finally，无论promise状态是fulfilled还是rejected都会执行一次`finally`方法\n```const promise = new Promise((resolve, reject) => {\n  resolve('hi ice')\n})\n\npromise.then(res => console.log(res)).finally(() => console.log('finally execute'))\n\n//finally execute\n\n```\n\n## promise回调地狱\n1. 当我发送网络请求的时候，需要拿到这次网络请求的数据，再发送网络请求，就这样重复三次，才能拿到我最终的结果。导致如下结果(`很不优雅！！！`)\n\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\n\nrequestData('iceweb.io').then(res => {\n  requestData(`iceweb.org ${res}`).then(res => {\n    requestData(`iceweb.com ${res}`).then(res => {\n      console.log(res)\n    })\n  })\n})\n\n//iceweb.com iceweb.org iceweb.io\n\nor\n\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\nrequestData('iceweb.io').then(res => {\n  return requestData(`iceweb.org ${res}`)\n}).then(res => {\n  return requestData(`iceweb.com ${res}`)\n}).then(res => {\n  console.log(res)\n})\n\n//iceweb.com iceweb.org iceweb.io\n```\n\n2.采用`async+await`解决回调地域现象\n\n`await特点`——只有await后面的方法成功执行才会执行下面的代码！\n```\nfunction requestData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.includes('iceweb')) {\n        resolve(url)\n      } else {\n        reject('请求错误')\n      }\n    }, 1000);\n  })\n}\n\nasync function getData() {\n  const res1 = await requestData('iceweb.io')\n  const res2 = await requestData(`iceweb.org ${res1}`)\n  const res3 = await requestData(`iceweb.com ${res2}`)\n\n  console.log(res3)\n}\n\ngetData()\n\n//iceweb.com iceweb.org iceweb.io\n```\n\n## promise的高级封装（umi为例）\n\numi框架封装的请求可以在全局配置文件`src/app.ts`中对request进行配置\n\n对于使用可以使用useRequest具体使用api\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request: RequestConfig = {\n  timeout: 1000,\n  // other axios options you want\n  errorConfig: {\n    errorHandler(){\n    },\n    errorThrower(){\n    }\n  },\n  requestInterceptors: [],\n  responseInterceptors: []\n};\n```\n也可以通过request直接使用api\n\n```\nexport default () => {\n  const { data, error, loading } = useRequest(() => {\n    return services.getUserList('/api/test');\n  });\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n  return <div>{data.name}</div>;\n};\n```\n\n#思考与感悟\n\n*最终做项目还是封装好的好用*\n\n\n\n","slug":"前端http请求发送详解","published":1,"updated":"2023-12-05T06:21:59.759Z","layout":"post","photos":[],"link":"","_id":"clprymdkz000kh4pkcqje1dqo","content":"<h2 id=\"promise使用\"><a href=\"#promise使用\" class=\"headerlink\" title=\"promise使用\"></a>promise使用</h2><ul>\n<li><p><code>Promise</code>(承诺)，给予调用者一个承诺，过一会返回数据给你，就可以创建一个promise对象</p>\n</li>\n<li><p>当我们<code>new</code>一个<code>promise</code>，此时我们需要传递一个回调函数，这个函数为立即执行的，称之为（executor）</p>\n</li>\n<li><p>这个回调函数，我们需要传入两个参数回调函数，<code>reslove</code>,<code>reject</code>(函数可以进行传参)</p>\n<ul>\n<li>当执行了<code>reslove</code>函数，会回调promise对象的.then函数</li>\n<li>当执行了<code>reject</code>函数，会回调promise对象的.catche函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">   //写入axios请求</span><br><span class=\"line\">  console.log(`executor 立即执行`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如下代码为经典例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url === &#x27;iceweb.io&#x27;) &#123;</span><br><span class=\"line\">        //只能传递一个参数</span><br><span class=\"line\">        resolve(&#x27;我成功了,把获取到的数据传出去&#x27;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;url错误，请求失败&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 3000)    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第一种写法</span><br><span class=\"line\">//url错误，请求失败,此时会有rej的打印输出</span><br><span class=\"line\">requestData(&#x27;iceweb.org&#x27;).then(res =&gt; &#123;&#125;,rej =&gt; console.log(rej))</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种写法</span><br><span class=\"line\">//url错误，请求失败 此时会有e的打印输出</span><br><span class=\"line\">requestData(&#x27;iceweb.org&#x27;).catch(e =&gt; console.log(e))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise中catch的使用\"><a href=\"#promise中catch的使用\" class=\"headerlink\" title=\"promise中catch的使用\"></a>promise中catch的使用</h3><p>在catch后仍可以调用then方法，因为catch返回的也是一个promise对象，且此时的promise中是resolve</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  reject(&#x27;ice error&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.catch(err =&gt; (&#123;name:&#x27;ice&#x27;, age: 22&#125;)).then(res =&gt; console.log(res))</span><br><span class=\"line\"></span><br><span class=\"line\">//&#123;name:&#x27;ice&#x27;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise中finally的使用\"><a href=\"#promise中finally的使用\" class=\"headerlink\" title=\"promise中finally的使用\"></a>promise中finally的使用</h3><ul>\n<li>finally，无论promise状态是fulfilled还是rejected都会执行一次<code>finally</code>方法<figure class=\"highlight plaintext\"><figcaption><span>promise </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  resolve(&#x27;hi ice&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(res =&gt; console.log(res)).finally(() =&gt; console.log(&#x27;finally execute&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">//finally execute</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"promise回调地狱\"><a href=\"#promise回调地狱\" class=\"headerlink\" title=\"promise回调地狱\"></a>promise回调地狱</h2><ol>\n<li>当我发送网络请求的时候，需要拿到这次网络请求的数据，再发送网络请求，就这样重复三次，才能拿到我最终的结果。导致如下结果(<code>很不优雅！！！</code>)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">requestData(&#x27;iceweb.io&#x27;).then(res =&gt; &#123;</span><br><span class=\"line\">  requestData(`iceweb.org $&#123;res&#125;`).then(res =&gt; &#123;</span><br><span class=\"line\">    requestData(`iceweb.com $&#123;res&#125;`).then(res =&gt; &#123;</span><br><span class=\"line\">      console.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">requestData(&#x27;iceweb.io&#x27;).then(res =&gt; &#123;</span><br><span class=\"line\">  return requestData(`iceweb.org $&#123;res&#125;`)</span><br><span class=\"line\">&#125;).then(res =&gt; &#123;</span><br><span class=\"line\">  return requestData(`iceweb.com $&#123;res&#125;`)</span><br><span class=\"line\">&#125;).then(res =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br></pre></td></tr></table></figure>\n\n<p>2.采用<code>async+await</code>解决回调地域现象</p>\n<p><code>await特点</code>——只有await后面的方法成功执行才会执行下面的代码！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function getData() &#123;</span><br><span class=\"line\">  const res1 = await requestData(&#x27;iceweb.io&#x27;)</span><br><span class=\"line\">  const res2 = await requestData(`iceweb.org $&#123;res1&#125;`)</span><br><span class=\"line\">  const res3 = await requestData(`iceweb.com $&#123;res2&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(res3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData()</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"promise的高级封装（umi为例）\"><a href=\"#promise的高级封装（umi为例）\" class=\"headerlink\" title=\"promise的高级封装（umi为例）\"></a>promise的高级封装（umi为例）</h2><p>umi框架封装的请求可以在全局配置文件<code>src/app.ts</code>中对request进行配置</p>\n<p>对于使用可以使用useRequest具体使用api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import type &#123; RequestConfig &#125; from &#x27;umi&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const request: RequestConfig = &#123;</span><br><span class=\"line\">  timeout: 1000,</span><br><span class=\"line\">  // other axios options you want</span><br><span class=\"line\">  errorConfig: &#123;</span><br><span class=\"line\">    errorHandler()&#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorThrower()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  requestInterceptors: [],</span><br><span class=\"line\">  responseInterceptors: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>也可以通过request直接使用api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const &#123; data, error, loading &#125; = useRequest(() =&gt; &#123;</span><br><span class=\"line\">    return services.getUserList(&#x27;/api/test&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  if (loading) &#123;</span><br><span class=\"line\">    return &lt;div&gt;loading...&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (error) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;error.message&#125;&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;div&gt;&#123;data.name&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>#思考与感悟</p>\n<p><em>最终做项目还是封装好的好用</em></p>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"promise使用\"><a href=\"#promise使用\" class=\"headerlink\" title=\"promise使用\"></a>promise使用</h2><ul>\n<li><p><code>Promise</code>(承诺)，给予调用者一个承诺，过一会返回数据给你，就可以创建一个promise对象</p>\n</li>\n<li><p>当我们<code>new</code>一个<code>promise</code>，此时我们需要传递一个回调函数，这个函数为立即执行的，称之为（executor）</p>\n</li>\n<li><p>这个回调函数，我们需要传入两个参数回调函数，<code>reslove</code>,<code>reject</code>(函数可以进行传参)</p>\n<ul>\n<li>当执行了<code>reslove</code>函数，会回调promise对象的.then函数</li>\n<li>当执行了<code>reject</code>函数，会回调promise对象的.catche函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">   //写入axios请求</span><br><span class=\"line\">  console.log(`executor 立即执行`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如下代码为经典例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url === &#x27;iceweb.io&#x27;) &#123;</span><br><span class=\"line\">        //只能传递一个参数</span><br><span class=\"line\">        resolve(&#x27;我成功了,把获取到的数据传出去&#x27;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;url错误，请求失败&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 3000)    </span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第一种写法</span><br><span class=\"line\">//url错误，请求失败,此时会有rej的打印输出</span><br><span class=\"line\">requestData(&#x27;iceweb.org&#x27;).then(res =&gt; &#123;&#125;,rej =&gt; console.log(rej))</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种写法</span><br><span class=\"line\">//url错误，请求失败 此时会有e的打印输出</span><br><span class=\"line\">requestData(&#x27;iceweb.org&#x27;).catch(e =&gt; console.log(e))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise中catch的使用\"><a href=\"#promise中catch的使用\" class=\"headerlink\" title=\"promise中catch的使用\"></a>promise中catch的使用</h3><p>在catch后仍可以调用then方法，因为catch返回的也是一个promise对象，且此时的promise中是resolve</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  reject(&#x27;ice error&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.catch(err =&gt; (&#123;name:&#x27;ice&#x27;, age: 22&#125;)).then(res =&gt; console.log(res))</span><br><span class=\"line\"></span><br><span class=\"line\">//&#123;name:&#x27;ice&#x27;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise中finally的使用\"><a href=\"#promise中finally的使用\" class=\"headerlink\" title=\"promise中finally的使用\"></a>promise中finally的使用</h3><ul>\n<li>finally，无论promise状态是fulfilled还是rejected都会执行一次<code>finally</code>方法<figure class=\"highlight plaintext\"><figcaption><span>promise </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  resolve(&#x27;hi ice&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(res =&gt; console.log(res)).finally(() =&gt; console.log(&#x27;finally execute&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">//finally execute</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"promise回调地狱\"><a href=\"#promise回调地狱\" class=\"headerlink\" title=\"promise回调地狱\"></a>promise回调地狱</h2><ol>\n<li>当我发送网络请求的时候，需要拿到这次网络请求的数据，再发送网络请求，就这样重复三次，才能拿到我最终的结果。导致如下结果(<code>很不优雅！！！</code>)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">requestData(&#x27;iceweb.io&#x27;).then(res =&gt; &#123;</span><br><span class=\"line\">  requestData(`iceweb.org $&#123;res&#125;`).then(res =&gt; &#123;</span><br><span class=\"line\">    requestData(`iceweb.com $&#123;res&#125;`).then(res =&gt; &#123;</span><br><span class=\"line\">      console.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">requestData(&#x27;iceweb.io&#x27;).then(res =&gt; &#123;</span><br><span class=\"line\">  return requestData(`iceweb.org $&#123;res&#125;`)</span><br><span class=\"line\">&#125;).then(res =&gt; &#123;</span><br><span class=\"line\">  return requestData(`iceweb.com $&#123;res&#125;`)</span><br><span class=\"line\">&#125;).then(res =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br></pre></td></tr></table></figure>\n\n<p>2.采用<code>async+await</code>解决回调地域现象</p>\n<p><code>await特点</code>——只有await后面的方法成功执行才会执行下面的代码！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function requestData(url) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (url.includes(&#x27;iceweb&#x27;)) &#123;</span><br><span class=\"line\">        resolve(url)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(&#x27;请求错误&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function getData() &#123;</span><br><span class=\"line\">  const res1 = await requestData(&#x27;iceweb.io&#x27;)</span><br><span class=\"line\">  const res2 = await requestData(`iceweb.org $&#123;res1&#125;`)</span><br><span class=\"line\">  const res3 = await requestData(`iceweb.com $&#123;res2&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(res3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData()</span><br><span class=\"line\"></span><br><span class=\"line\">//iceweb.com iceweb.org iceweb.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"promise的高级封装（umi为例）\"><a href=\"#promise的高级封装（umi为例）\" class=\"headerlink\" title=\"promise的高级封装（umi为例）\"></a>promise的高级封装（umi为例）</h2><p>umi框架封装的请求可以在全局配置文件<code>src/app.ts</code>中对request进行配置</p>\n<p>对于使用可以使用useRequest具体使用api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import type &#123; RequestConfig &#125; from &#x27;umi&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const request: RequestConfig = &#123;</span><br><span class=\"line\">  timeout: 1000,</span><br><span class=\"line\">  // other axios options you want</span><br><span class=\"line\">  errorConfig: &#123;</span><br><span class=\"line\">    errorHandler()&#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorThrower()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  requestInterceptors: [],</span><br><span class=\"line\">  responseInterceptors: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>也可以通过request直接使用api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">  const &#123; data, error, loading &#125; = useRequest(() =&gt; &#123;</span><br><span class=\"line\">    return services.getUserList(&#x27;/api/test&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  if (loading) &#123;</span><br><span class=\"line\">    return &lt;div&gt;loading...&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (error) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;error.message&#125;&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &lt;div&gt;&#123;data.name&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>#思考与感悟</p>\n<p><em>最终做项目还是封装好的好用</em></p>\n"},{"title":"名片创作","keywords":"前端","description":"前端","top_img":"/img/suanfa.png","comments":1,"cover":"/img/suanfa.png","copyright_author":"xingxing","copyright_author_href":"www.staraway.asia","copyright_info":"可转载哦","date":"2023-12-05T06:15:04.000Z","_content":"\n\n### 创作目的\n- 进行前端开发这么久了，一直在做业务相关的需求，写组件样式的时候也是一种为了让组件不碍眼而写样式的心态，但是就我个人的看法，前端开发是和展示挂钩的，前端创作是能和用户产生共鸣的\n-     如今的互联⽹⾏业⼀直流传着⼀句话：“⽤户⾄上”，想要提升⽤户体验，Web前端的作⽤⾮常重要\n所以我选择了个人名片创作，我想写一份能和用户产生交互式体验，带给用户视觉冲击，表达用户个性的个人名片！\n\n### 作品展示\n-       由于掘金的md不让放视频，我截图做了展示\n\n\n\n![1](../images/名片创作-1701757096669.png)\n\n![2](../images/名片创作-1701757102187.png)\n\n\n![3](../images/名片创作-1701757110488.png)\n\n### 作品架构与设计\n#### 我将整个个人名片主要分为了三部分-----头像部分、个人说明部分、底部链接部分、背景部分\n- 头像\n\n\n![4](../images/名片创作-1701757118115.png)\n```\n//html\n <div class=\"card-avatar\"></div>\n \n//css\n .card-avatar {\n --size: 60px;\n width: var(--size);\n height: var(--size);\n border-radius: 50%;\n transition: transform .2s ease;\n margin-bottom: 1rem;\n background-image: url('https://staraway.love/QQ%E5%9B%BE%E7%89%8720230107162416.jpg');\n background-size: cover;\n background-repeat: no-repeat;\n background-position: center center;\n}\n\n.card-avatar:hover {\n transform: scale(1.7);\n}\n\n```\n在这里主要通过\nbackground-size: cover;\nbackground-repeat: no-repeat;\nbackground-position: center center;三个属性让图片呈现正常的展示效果\n\n其次设置hover的时候图片放大1.7倍，至于tansition属性则是继承了父类，详情看最后的源码，也可以去作品处查看\n\n- 个人说明部分\n\n\n![5](../images/名片创作-1701757127095.png)\n\n```\n//html\n <div class=\"card-title\">小星</div>\n      <div class=\"card-subtitle\">专注于前端开发的后端工程师</div>\n      <p class=\"text-body\">So far all life is written with failure, but this does not prevent me from moving forward</p>\n      \n//css\n.card-info {\n display: flex;\n flex-direction: column;\n justify-content: center;\n align-items: center;\n transition: transform .2s ease, opacity .2s ease;\n}\n.card-title {\n color: #333;\n font-size: 1.5em;\n font-weight: 600;\n line-height: 2rem;\n}\n\n.card-subtitle {\n color: #859ba8;\n font-size: 0.8em;\n margin-top: 5px;\n}\n.text-body {\n  margin-top: 10px;\n font-size: .8em;\n text-align: center;\n color: #6f6d78;\n font-weight: 400;\n font-style: italic;\n}\n.card:hover .card-info {\n transform: translateY(-5%);\n}\n```\n这里主要通过` flex-direction: column;`属性让所有元素呈纵向排布，同时在让不同元素的字体呈现不同的样式，设计中英文混合结构形成视觉差\n\n- 底部链接部分\n\n\n![6](../images/名片创作-1701757134734.png)\n```\n.card-social {\n transform: translateY(200%);\n display: flex;\n justify-content: space-around;\n width: 100%;\n opacity: 0;\n transition: transform .2s ease, opacity .2s ease;\n\n\n}\n\n.card-social__item {\n list-style: none;\n}\n\n.card-social__item svg {\n display: block;\n height: 18px;\n width: 18px;\n fill: #515F65;\n cursor: pointer;\n transition: fill 0.2s ease ,transform 0.2s ease;\n}\n\n.card-social__item svg use{\n   transform: scaleX(-1);\n}\n\n```\n为了增加这里的交互式体验，我为三个图标均设立了hover样式，让其hover属性不生效时候不显示，并设立` transition: fill 0.2s ease ,transform 0.2s ease;`属性让其从下部弹出，在实际的开发中可以使用组件库所提供的affix标签为其提供鼠标hover时候展示说明的效果，\n\n- 背景部分\n\n![7](../images/名片创作-1701757141855.png)\n\n![8](../images/名片创作-1701757146672.png)\n\n```\n.card {\n width: 220px;\n height: 200px;\n padding: 2rem 1.5rem;\n transition: box-shadow .3s ease, transform .2s ease;\n text-align: center;\n position: relative;\n background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);\n border-radius: 7px;\n box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n}\n.card:hover {\n box-shadow: 0px 0px 30px 1px rgba(0, 255, 117, 0.30);\n  transform: scale(0.98);\n border-radius: 20px;\n \n}\n\n```\n此处主要通过背景虚化形成一种朦胧感，利用` box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;`和`background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);`属性形成色彩的错差感，当hover属性触发的时候在变清晰，形成良好的交互式体验\n\n### 灵感源泉\n\n- 其实我觉得程序员真的很需要美感，特别是开发岗，前端设计是一件很有成就感很幸福的事情，无所谓灵感，都是激励，正所谓我名片中所展示的\n>  So far all life is written with failure, but this does not prevent me from moving forward","source":"_posts/名片创作.md","raw":"---\ntitle: 名片创作\ntags:\n  - react\n  - css\ncategories: 前端\nkeywords: 前端\ndescription: 前端\ntop_img: /img/suanfa.png\ncomments: true\ncover: /img/suanfa.png\ncopyright_author: xingxing\ncopyright_author_href: www.staraway.asia\ncopyright_info: 可转载哦\ndate: 2023-12-05 14:15:04\n---\n\n\n### 创作目的\n- 进行前端开发这么久了，一直在做业务相关的需求，写组件样式的时候也是一种为了让组件不碍眼而写样式的心态，但是就我个人的看法，前端开发是和展示挂钩的，前端创作是能和用户产生共鸣的\n-     如今的互联⽹⾏业⼀直流传着⼀句话：“⽤户⾄上”，想要提升⽤户体验，Web前端的作⽤⾮常重要\n所以我选择了个人名片创作，我想写一份能和用户产生交互式体验，带给用户视觉冲击，表达用户个性的个人名片！\n\n### 作品展示\n-       由于掘金的md不让放视频，我截图做了展示\n\n\n\n![1](../images/名片创作-1701757096669.png)\n\n![2](../images/名片创作-1701757102187.png)\n\n\n![3](../images/名片创作-1701757110488.png)\n\n### 作品架构与设计\n#### 我将整个个人名片主要分为了三部分-----头像部分、个人说明部分、底部链接部分、背景部分\n- 头像\n\n\n![4](../images/名片创作-1701757118115.png)\n```\n//html\n <div class=\"card-avatar\"></div>\n \n//css\n .card-avatar {\n --size: 60px;\n width: var(--size);\n height: var(--size);\n border-radius: 50%;\n transition: transform .2s ease;\n margin-bottom: 1rem;\n background-image: url('https://staraway.love/QQ%E5%9B%BE%E7%89%8720230107162416.jpg');\n background-size: cover;\n background-repeat: no-repeat;\n background-position: center center;\n}\n\n.card-avatar:hover {\n transform: scale(1.7);\n}\n\n```\n在这里主要通过\nbackground-size: cover;\nbackground-repeat: no-repeat;\nbackground-position: center center;三个属性让图片呈现正常的展示效果\n\n其次设置hover的时候图片放大1.7倍，至于tansition属性则是继承了父类，详情看最后的源码，也可以去作品处查看\n\n- 个人说明部分\n\n\n![5](../images/名片创作-1701757127095.png)\n\n```\n//html\n <div class=\"card-title\">小星</div>\n      <div class=\"card-subtitle\">专注于前端开发的后端工程师</div>\n      <p class=\"text-body\">So far all life is written with failure, but this does not prevent me from moving forward</p>\n      \n//css\n.card-info {\n display: flex;\n flex-direction: column;\n justify-content: center;\n align-items: center;\n transition: transform .2s ease, opacity .2s ease;\n}\n.card-title {\n color: #333;\n font-size: 1.5em;\n font-weight: 600;\n line-height: 2rem;\n}\n\n.card-subtitle {\n color: #859ba8;\n font-size: 0.8em;\n margin-top: 5px;\n}\n.text-body {\n  margin-top: 10px;\n font-size: .8em;\n text-align: center;\n color: #6f6d78;\n font-weight: 400;\n font-style: italic;\n}\n.card:hover .card-info {\n transform: translateY(-5%);\n}\n```\n这里主要通过` flex-direction: column;`属性让所有元素呈纵向排布，同时在让不同元素的字体呈现不同的样式，设计中英文混合结构形成视觉差\n\n- 底部链接部分\n\n\n![6](../images/名片创作-1701757134734.png)\n```\n.card-social {\n transform: translateY(200%);\n display: flex;\n justify-content: space-around;\n width: 100%;\n opacity: 0;\n transition: transform .2s ease, opacity .2s ease;\n\n\n}\n\n.card-social__item {\n list-style: none;\n}\n\n.card-social__item svg {\n display: block;\n height: 18px;\n width: 18px;\n fill: #515F65;\n cursor: pointer;\n transition: fill 0.2s ease ,transform 0.2s ease;\n}\n\n.card-social__item svg use{\n   transform: scaleX(-1);\n}\n\n```\n为了增加这里的交互式体验，我为三个图标均设立了hover样式，让其hover属性不生效时候不显示，并设立` transition: fill 0.2s ease ,transform 0.2s ease;`属性让其从下部弹出，在实际的开发中可以使用组件库所提供的affix标签为其提供鼠标hover时候展示说明的效果，\n\n- 背景部分\n\n![7](../images/名片创作-1701757141855.png)\n\n![8](../images/名片创作-1701757146672.png)\n\n```\n.card {\n width: 220px;\n height: 200px;\n padding: 2rem 1.5rem;\n transition: box-shadow .3s ease, transform .2s ease;\n text-align: center;\n position: relative;\n background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);\n border-radius: 7px;\n box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n}\n.card:hover {\n box-shadow: 0px 0px 30px 1px rgba(0, 255, 117, 0.30);\n  transform: scale(0.98);\n border-radius: 20px;\n \n}\n\n```\n此处主要通过背景虚化形成一种朦胧感，利用` box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;`和`background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);`属性形成色彩的错差感，当hover属性触发的时候在变清晰，形成良好的交互式体验\n\n### 灵感源泉\n\n- 其实我觉得程序员真的很需要美感，特别是开发岗，前端设计是一件很有成就感很幸福的事情，无所谓灵感，都是激励，正所谓我名片中所展示的\n>  So far all life is written with failure, but this does not prevent me from moving forward","slug":"名片创作","published":1,"updated":"2023-12-05T06:29:15.558Z","_id":"clprymdl0000mh4pkfkva0pho","layout":"post","photos":[],"link":"","content":"<h3 id=\"创作目的\"><a href=\"#创作目的\" class=\"headerlink\" title=\"创作目的\"></a>创作目的</h3><ul>\n<li>进行前端开发这么久了，一直在做业务相关的需求，写组件样式的时候也是一种为了让组件不碍眼而写样式的心态，但是就我个人的看法，前端开发是和展示挂钩的，前端创作是能和用户产生共鸣的</li>\n<li><pre><code>如今的互联⽹⾏业⼀直流传着⼀句话：“⽤户⾄上”，想要提升⽤户体验，Web前端的作⽤⾮常重要\n</code></pre>\n</li>\n</ul>\n<p>所以我选择了个人名片创作，我想写一份能和用户产生交互式体验，带给用户视觉冲击，表达用户个性的个人名片！</p>\n<h3 id=\"作品展示\"><a href=\"#作品展示\" class=\"headerlink\" title=\"作品展示\"></a>作品展示</h3><ul>\n<li><pre><code>  由于掘金的md不让放视频，我截图做了展示\n</code></pre>\n</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757096669.png\" alt=\"1\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757102187.png\" alt=\"2\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757110488.png\" alt=\"3\"></p>\n<h3 id=\"作品架构与设计\"><a href=\"#作品架构与设计\" class=\"headerlink\" title=\"作品架构与设计\"></a>作品架构与设计</h3><h4 id=\"我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\"><a href=\"#我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\" class=\"headerlink\" title=\"我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\"></a>我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分</h4><ul>\n<li>头像</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757118115.png\" alt=\"4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"> &lt;div class=&quot;card-avatar&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">//css</span><br><span class=\"line\"> .card-avatar &#123;</span><br><span class=\"line\"> --size: 60px;</span><br><span class=\"line\"> width: var(--size);</span><br><span class=\"line\"> height: var(--size);</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> transition: transform .2s ease;</span><br><span class=\"line\"> margin-bottom: 1rem;</span><br><span class=\"line\"> background-image: url(&#x27;https://staraway.love/QQ%E5%9B%BE%E7%89%8720230107162416.jpg&#x27;);</span><br><span class=\"line\"> background-size: cover;</span><br><span class=\"line\"> background-repeat: no-repeat;</span><br><span class=\"line\"> background-position: center center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-avatar:hover &#123;</span><br><span class=\"line\"> transform: scale(1.7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在这里主要通过<br>background-size: cover;<br>background-repeat: no-repeat;<br>background-position: center center;三个属性让图片呈现正常的展示效果</p>\n<p>其次设置hover的时候图片放大1.7倍，至于tansition属性则是继承了父类，详情看最后的源码，也可以去作品处查看</p>\n<ul>\n<li>个人说明部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757127095.png\" alt=\"5\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"> &lt;div class=&quot;card-title&quot;&gt;小星&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;card-subtitle&quot;&gt;专注于前端开发的后端工程师&lt;/div&gt;</span><br><span class=\"line\">      &lt;p class=&quot;text-body&quot;&gt;So far all life is written with failure, but this does not prevent me from moving forward&lt;/p&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">//css</span><br><span class=\"line\">.card-info &#123;</span><br><span class=\"line\"> display: flex;</span><br><span class=\"line\"> flex-direction: column;</span><br><span class=\"line\"> justify-content: center;</span><br><span class=\"line\"> align-items: center;</span><br><span class=\"line\"> transition: transform .2s ease, opacity .2s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card-title &#123;</span><br><span class=\"line\"> color: #333;</span><br><span class=\"line\"> font-size: 1.5em;</span><br><span class=\"line\"> font-weight: 600;</span><br><span class=\"line\"> line-height: 2rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-subtitle &#123;</span><br><span class=\"line\"> color: #859ba8;</span><br><span class=\"line\"> font-size: 0.8em;</span><br><span class=\"line\"> margin-top: 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-body &#123;</span><br><span class=\"line\">  margin-top: 10px;</span><br><span class=\"line\"> font-size: .8em;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> color: #6f6d78;</span><br><span class=\"line\"> font-weight: 400;</span><br><span class=\"line\"> font-style: italic;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card:hover .card-info &#123;</span><br><span class=\"line\"> transform: translateY(-5%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要通过<code> flex-direction: column;</code>属性让所有元素呈纵向排布，同时在让不同元素的字体呈现不同的样式，设计中英文混合结构形成视觉差</p>\n<ul>\n<li>底部链接部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757134734.png\" alt=\"6\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card-social &#123;</span><br><span class=\"line\"> transform: translateY(200%);</span><br><span class=\"line\"> display: flex;</span><br><span class=\"line\"> justify-content: space-around;</span><br><span class=\"line\"> width: 100%;</span><br><span class=\"line\"> opacity: 0;</span><br><span class=\"line\"> transition: transform .2s ease, opacity .2s ease;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item &#123;</span><br><span class=\"line\"> list-style: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item svg &#123;</span><br><span class=\"line\"> display: block;</span><br><span class=\"line\"> height: 18px;</span><br><span class=\"line\"> width: 18px;</span><br><span class=\"line\"> fill: #515F65;</span><br><span class=\"line\"> cursor: pointer;</span><br><span class=\"line\"> transition: fill 0.2s ease ,transform 0.2s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item svg use&#123;</span><br><span class=\"line\">   transform: scaleX(-1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为了增加这里的交互式体验，我为三个图标均设立了hover样式，让其hover属性不生效时候不显示，并设立<code> transition: fill 0.2s ease ,transform 0.2s ease;</code>属性让其从下部弹出，在实际的开发中可以使用组件库所提供的affix标签为其提供鼠标hover时候展示说明的效果，</p>\n<ul>\n<li>背景部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757141855.png\" alt=\"7\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757146672.png\" alt=\"8\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card &#123;</span><br><span class=\"line\"> width: 220px;</span><br><span class=\"line\"> height: 200px;</span><br><span class=\"line\"> padding: 2rem 1.5rem;</span><br><span class=\"line\"> transition: box-shadow .3s ease, transform .2s ease;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);</span><br><span class=\"line\"> border-radius: 7px;</span><br><span class=\"line\"> box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card:hover &#123;</span><br><span class=\"line\"> box-shadow: 0px 0px 30px 1px rgba(0, 255, 117, 0.30);</span><br><span class=\"line\">  transform: scale(0.98);</span><br><span class=\"line\"> border-radius: 20px;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此处主要通过背景虚化形成一种朦胧感，利用<code> box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;</code>和<code>background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);</code>属性形成色彩的错差感，当hover属性触发的时候在变清晰，形成良好的交互式体验</p>\n<h3 id=\"灵感源泉\"><a href=\"#灵感源泉\" class=\"headerlink\" title=\"灵感源泉\"></a>灵感源泉</h3><ul>\n<li>其实我觉得程序员真的很需要美感，特别是开发岗，前端设计是一件很有成就感很幸福的事情，无所谓灵感，都是激励，正所谓我名片中所展示的<blockquote>\n<p> So far all life is written with failure, but this does not prevent me from moving forward</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"about":[{"class_name":"关于页","subtitle":"多一点努力，努力多一点✨","avatarImg":"https://avatars.githubusercontent.com/u/106024593?v=4","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"xingxing","description":"是一名 后端工程师、学生、独立开发者","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"Hello there!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"},{"desc":"EDU,软件工程专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，昆明市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":2002,"selfInfoTips2":"湖南信息学院","selfInfoContent2":"软件工程","selfInfoTips3":"现在职业","selfInfoContent3":"大三学生👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"生活明朗，","maxim_bottom":"万物可爱。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"原神","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"许嵩、民谣、华语流行","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}],"album":[{"class_name":"世界各地夕阳与风景","path_name":"/wordScenery","type":2,"description":"因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。","cover":"https://bu.dusays.com/2023/04/09/64329399d1175.jpg","top_background":"https://bu.dusays.com/2023/06/30/649e546ada7dd.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2022/10/26 01:00:00","content":"湘潭的一角。","address":"湖南湘潭","from":"再吃一口就减肥","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}],"equipment":[{"class_name":"好物","description":"实物装备推荐","tip":"跟 安知鱼 一起享受科技带来的乐趣","top_background":"https://bu.dusays.com/2023/07/05/64a4c38842b7a.webp","good_things":[{"title":"生产力","description":"提升自己生产效率的硬件设备","equipment_list":[{"name":"MacBook Pro 2021 16 英寸","specification":"M1 Max 64G / 1TB","description":"屏幕显示效果好、色彩准确、对比度强、性能强劲、续航优秀。可以用来开发和设计。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"/posts/571d.html"},{"name":"iPad 2020","specification":"深空灰 / 128G","description":"事事玩得转，买前生产力，买后爱奇艺。","image":"https://bu.dusays.com/2023/07/05/64a4c3b191e2e.png","link":"https://www.apple.com.cn/ipad-10.2/"},{"name":"iPhone 12 mini","specification":"绿色 / 128G","description":"超瓷晶面板，玻璃背板搭配铝金属边框，曲线优美的圆角设计，mini大小正好一只手就抓住，深得我心，唯一缺点大概就是续航不够。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/iphone-12/specs/"},{"name":"AirPods（第三代）","specification":"标准版","description":"第三代对比第二代提升很大，和我一样不喜欢入耳式耳机的可以入，空间音频等功能确实新颖，第一次使用有被惊艳到。","image":"https://bu.dusays.com/2023/07/05/64a4c3ded6319.webp","link":"https://www.apple.com.cn/airpods-3rd-generation/"}]},{"title":"出行","description":"用来出行的实物及设备","equipment_list":[{"name":"Apple Watch Series 8","specification":"黑色","description":"始终为我的健康放哨，深夜弹出站立提醒，不过确实有效的提高了我的运动频率，配合apple全家桶还是非常棒的产品，缺点依然是续航。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://www.apple.com.cn/apple-watch-series-8/"},{"name":"NATIONAL GEOGRAPHIC双肩包","specification":"黑色","description":"国家地理黑色大包，正好装下16寸 Macbook Pro，并且背起来很舒适，底部自带防雨罩也好用，各种奇怪的小口袋深得我心。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100011269828.html"},{"name":"NATIONAL GEOGRAPHIC学生书包🎒","specification":"红白色","description":"国家地理黑色大包，冰冰🧊同款，颜值在线且实用。","image":"https://bu.dusays.com/2023/07/05/64a4c40ab698a.webp","link":"https://item.jd.com/100005889786.html"}]}]}],"essay":[{"title":"即刻短文","subTitle":"xingxing的日常。","tips":"随时随地，分享生活","buttonText":"关于我","buttonLink":"/about/","limit":30,"home_essay":true,"top_background":"https://img02.anheyu.com/adminuploads/1/2022/08/21/630249e2df20f.jpg","essay_list":[{"content":"安知鱼主题指南","date":"2023/09/09","video":["https://player.bilibili.com/player.html?aid=226886152&bvid=BV1Ch41137tR&cid=1081639816&p=1&autoplay=0"]},{"content":"支持了Accesskey快捷键，可以直接按下shift + ?组合键以查看快捷键选项。","date":"2023/07/01","video":["https://cdn.jsdelivr.net/npm/anzhiyu-blog-static@1.0.0/video/%E9%A3%8E%E8%BD%A6%E6%A0%B7%E5%BC%8F%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.mp4"],"image":["https://img02.anheyu.com/adminuploads/1/2023/07/01/64a033cb2c21e.webp!blogimg"],"address":"长沙","from":"安知鱼","link":"/posts/e140.html"},{"content":"音乐支持了参数设置自定义歌单","date":"2023/01/02","link":"https://blog.anheyu.com/music/?id=7269231710&server=tencent"},{"content":"关于页的打赏仿了b站的充电功能，使用svg绘图➕一些动画参数移动，应该不会被b站警告吧😜，另外文章也支持了顶部随机b站同款春秋冬banner。","date":"2022/12/18"},{"content":"React中不能直接修改state的一个重要原因是在性能优化时的prueComponment会进行浅层比较会认为是用一个对象且不能进入队列中批量更新","date":"2022/12/10"},{"content":"好耶，马上就可以放假回家了！好想家里的好吃的😋！才不是想捏妹妹的脸了","date":"2022/12/06"},{"content":"全局音乐的动画也处理好了, nice!","date":"2022/11/13"},{"content":"把页脚, 首页顶部全都魔改到本地了, 方便后续魔改, 音乐也改成胶囊的样式了, 其实还是想让胶囊可拖拽, 不可点击改变歌词位置的, 但是弄了半天都没弄好就放弃了","date":"2022/11/13"},{"content":"朋友圈船新版本终于写完了, 耶✌️","date":"2022/11/05","link":"https://blog.anheyu.com/album/"},{"content":"终于把相册集搞定了, 耶✌️, 瀑布流在滑动滚动条一个视口范围上下100的情况执行一次, 到底部停止监听让性能高了好多，再也不会布局混乱🤪了","date":"2022/10/25","link":"https://blog.anheyu.com/album/"},{"content":"搜索🔍支持缩略图显示啦（默认获取文章内容的第一张图片）","date":"2022/10/23 08:00:00","from":"安知鱼"},{"content":"遇见彩虹🌈吃定彩虹","date":"2022/10/23 10:00:00","image":["https://bu.dusays.com/2023/04/09/64329399e285d.webp","https://bu.dusays.com/2023/04/09/64329399aa3bc.webp","https://bu.dusays.com/2023/04/09/6432939996dd7.webp"]},{"content":"ThreeJs API真多丫","date":"2022/10/19"},{"content":"妹妹强制要求我买走了她的两幅画 -¥30","date":"2022/10/02","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]},{"content":"歌曲推荐","date":"2022/09/25","aplayer":{"server":"tencent","id":"001FGQba3i10mw"}},{"content":"做了一个噩梦, 梦到从楼顶坠下去了。😷","date":"2022/09/24"},{"content":"JOJO是真的好看！","date":"2022/09/21","link":"https://www.bilibili.com/bangumi/play/ss39431?spm_id_from=333.337.0.0"}]}],"link":[{"class_name":"推荐博客","flink_style":"telescopic","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg","color":"vip","tag":"技术"}]},{"class_name":"小伙伴","class_desc":"那些人，那些事","flink_style":"anzhiyu","hundredSuffix":"","link_list":[{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱","recommend":true}]}],"bangumis":{"wantWatch":[],"watching":[{"title":"灵笼 第二季","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cf5f6595ece017215e7d61482f022094479dff37.png","totalCount":"-","id":21123554,"follow":"910.5 万","view":"1585.6 万","danmaku":"7.0 万","coin":"35.0 万","score":"-","des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"灵笼","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/cfab7e0fbdb4786ff4e885d050b7cf37f8829486.png","totalCount":"全16话","id":23432,"follow":"903.9 万","view":"6.1 亿","danmaku":"674.4 万","coin":"677.7 万","score":9.6,"des":"不久的未来，人类的世界早已拥挤不堪，迈向星河、寻找新家园的行动迫在眉捷。正当一切有条不紊的推进之时，月相异动，脚下的大地爆发了长达数十年、剧烈的地质变化，人类在这场浩劫中所剩无几。当天地逐渐恢复平静，..."},{"title":"三体","type":"国创","area":"中国大陆","cover":"https://i0.hdslb.com/bfs/bangumi/image/9870f898b8a39bbb8048f34317f8d78a02cc1770.png","totalCount":"全15话","id":4315402,"follow":"690.6 万","view":"6.2 亿","danmaku":"179.3 万","coin":"230.7 万","score":8.2,"des":"无数细线横亘在星空之中，如同一把巨大的刷子。三体星舰队将于400年后抵达。遥远蝴蝶扇动着翅膀，也改变了罗辑的命运，轰然打开的门后是世界中心——面壁计划开启。同时，智子所创建的破壁室内，破壁人一一就位…..."}],"watched":[]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"创作目的\"><a href=\"#创作目的\" class=\"headerlink\" title=\"创作目的\"></a>创作目的</h3><ul>\n<li>进行前端开发这么久了，一直在做业务相关的需求，写组件样式的时候也是一种为了让组件不碍眼而写样式的心态，但是就我个人的看法，前端开发是和展示挂钩的，前端创作是能和用户产生共鸣的</li>\n<li><pre><code>如今的互联⽹⾏业⼀直流传着⼀句话：“⽤户⾄上”，想要提升⽤户体验，Web前端的作⽤⾮常重要\n</code></pre>\n</li>\n</ul>\n<p>所以我选择了个人名片创作，我想写一份能和用户产生交互式体验，带给用户视觉冲击，表达用户个性的个人名片！</p>\n<h3 id=\"作品展示\"><a href=\"#作品展示\" class=\"headerlink\" title=\"作品展示\"></a>作品展示</h3><ul>\n<li><pre><code>  由于掘金的md不让放视频，我截图做了展示\n</code></pre>\n</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757096669.png\" alt=\"1\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757102187.png\" alt=\"2\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757110488.png\" alt=\"3\"></p>\n<h3 id=\"作品架构与设计\"><a href=\"#作品架构与设计\" class=\"headerlink\" title=\"作品架构与设计\"></a>作品架构与设计</h3><h4 id=\"我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\"><a href=\"#我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\" class=\"headerlink\" title=\"我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分\"></a>我将整个个人名片主要分为了三部分—–头像部分、个人说明部分、底部链接部分、背景部分</h4><ul>\n<li>头像</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757118115.png\" alt=\"4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"> &lt;div class=&quot;card-avatar&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">//css</span><br><span class=\"line\"> .card-avatar &#123;</span><br><span class=\"line\"> --size: 60px;</span><br><span class=\"line\"> width: var(--size);</span><br><span class=\"line\"> height: var(--size);</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> transition: transform .2s ease;</span><br><span class=\"line\"> margin-bottom: 1rem;</span><br><span class=\"line\"> background-image: url(&#x27;https://staraway.love/QQ%E5%9B%BE%E7%89%8720230107162416.jpg&#x27;);</span><br><span class=\"line\"> background-size: cover;</span><br><span class=\"line\"> background-repeat: no-repeat;</span><br><span class=\"line\"> background-position: center center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-avatar:hover &#123;</span><br><span class=\"line\"> transform: scale(1.7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在这里主要通过<br>background-size: cover;<br>background-repeat: no-repeat;<br>background-position: center center;三个属性让图片呈现正常的展示效果</p>\n<p>其次设置hover的时候图片放大1.7倍，至于tansition属性则是继承了父类，详情看最后的源码，也可以去作品处查看</p>\n<ul>\n<li>个人说明部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757127095.png\" alt=\"5\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//html</span><br><span class=\"line\"> &lt;div class=&quot;card-title&quot;&gt;小星&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;card-subtitle&quot;&gt;专注于前端开发的后端工程师&lt;/div&gt;</span><br><span class=\"line\">      &lt;p class=&quot;text-body&quot;&gt;So far all life is written with failure, but this does not prevent me from moving forward&lt;/p&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">//css</span><br><span class=\"line\">.card-info &#123;</span><br><span class=\"line\"> display: flex;</span><br><span class=\"line\"> flex-direction: column;</span><br><span class=\"line\"> justify-content: center;</span><br><span class=\"line\"> align-items: center;</span><br><span class=\"line\"> transition: transform .2s ease, opacity .2s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card-title &#123;</span><br><span class=\"line\"> color: #333;</span><br><span class=\"line\"> font-size: 1.5em;</span><br><span class=\"line\"> font-weight: 600;</span><br><span class=\"line\"> line-height: 2rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-subtitle &#123;</span><br><span class=\"line\"> color: #859ba8;</span><br><span class=\"line\"> font-size: 0.8em;</span><br><span class=\"line\"> margin-top: 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-body &#123;</span><br><span class=\"line\">  margin-top: 10px;</span><br><span class=\"line\"> font-size: .8em;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> color: #6f6d78;</span><br><span class=\"line\"> font-weight: 400;</span><br><span class=\"line\"> font-style: italic;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card:hover .card-info &#123;</span><br><span class=\"line\"> transform: translateY(-5%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要通过<code> flex-direction: column;</code>属性让所有元素呈纵向排布，同时在让不同元素的字体呈现不同的样式，设计中英文混合结构形成视觉差</p>\n<ul>\n<li>底部链接部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757134734.png\" alt=\"6\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card-social &#123;</span><br><span class=\"line\"> transform: translateY(200%);</span><br><span class=\"line\"> display: flex;</span><br><span class=\"line\"> justify-content: space-around;</span><br><span class=\"line\"> width: 100%;</span><br><span class=\"line\"> opacity: 0;</span><br><span class=\"line\"> transition: transform .2s ease, opacity .2s ease;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item &#123;</span><br><span class=\"line\"> list-style: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item svg &#123;</span><br><span class=\"line\"> display: block;</span><br><span class=\"line\"> height: 18px;</span><br><span class=\"line\"> width: 18px;</span><br><span class=\"line\"> fill: #515F65;</span><br><span class=\"line\"> cursor: pointer;</span><br><span class=\"line\"> transition: fill 0.2s ease ,transform 0.2s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.card-social__item svg use&#123;</span><br><span class=\"line\">   transform: scaleX(-1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为了增加这里的交互式体验，我为三个图标均设立了hover样式，让其hover属性不生效时候不显示，并设立<code> transition: fill 0.2s ease ,transform 0.2s ease;</code>属性让其从下部弹出，在实际的开发中可以使用组件库所提供的affix标签为其提供鼠标hover时候展示说明的效果，</p>\n<ul>\n<li>背景部分</li>\n</ul>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757141855.png\" alt=\"7\"></p>\n<p><img src=\"/../images/%E5%90%8D%E7%89%87%E5%88%9B%E4%BD%9C-1701757146672.png\" alt=\"8\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card &#123;</span><br><span class=\"line\"> width: 220px;</span><br><span class=\"line\"> height: 200px;</span><br><span class=\"line\"> padding: 2rem 1.5rem;</span><br><span class=\"line\"> transition: box-shadow .3s ease, transform .2s ease;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);</span><br><span class=\"line\"> border-radius: 7px;</span><br><span class=\"line\"> box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card:hover &#123;</span><br><span class=\"line\"> box-shadow: 0px 0px 30px 1px rgba(0, 255, 117, 0.30);</span><br><span class=\"line\">  transform: scale(0.98);</span><br><span class=\"line\"> border-radius: 20px;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此处主要通过背景虚化形成一种朦胧感，利用<code> box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;</code>和<code>background: linear-gradient(135deg, #ebadb6 0%, #aceae1 100%);</code>属性形成色彩的错差感，当hover属性触发的时候在变清晰，形成良好的交互式体验</p>\n<h3 id=\"灵感源泉\"><a href=\"#灵感源泉\" class=\"headerlink\" title=\"灵感源泉\"></a>灵感源泉</h3><ul>\n<li>其实我觉得程序员真的很需要美感，特别是开发岗，前端设计是一件很有成就感很幸福的事情，无所谓灵感，都是激励，正所谓我名片中所展示的<blockquote>\n<p> So far all life is written with failure, but this does not prevent me from moving forward</p>\n</blockquote>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clpqoimj000030cpkeicqckp0","category_id":"clpnozddn0000h0pkcfjc3xbn","_id":"clpqoimj3000a0cpk8cb2cksv"},{"post_id":"clpqoimit00000cpk2cvo4qut","category_id":"clpqoimiz00010cpkdevrf590","_id":"clpqoimj4000e0cpkgea54kv1"},{"post_id":"clpqoimj200060cpk6idgh8xf","category_id":"clpnozddn0000h0pkcfjc3xbn","_id":"clpqoimj4000g0cpk32tw5pye"},{"post_id":"clpqo03j200001wpkalr4e34i","category_id":"clpqoimj200070cpkaag2fnhw","_id":"clpqoimj4000h0cpkfvl0fqou"},{"post_id":"clpqoimj100040cpkgmm04u67","category_id":"clpqoimiz00010cpkdevrf590","_id":"clpqpah1z0001rspk3vw5e6pe"},{"post_id":"clpmnlgrn0003qopkeql89g8f","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clpqpb73t0004rspkffsuek9g"},{"post_id":"clprqo1q10000tspk1sufch0x","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clprqo1re0004tspkfzc6g05v"},{"post_id":"clprqo1qq0001tspk4nbr3zrh","category_id":"clpqoimiz00010cpkdevrf590","_id":"clprqo1re0005tspkfbduens6"},{"post_id":"clprqo1rb0003tspk1cqh7n2x","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clprqo1rf0008tspkaidyd22m"},{"post_id":"clprymdjw0000h4pk6las0dif","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clprymdkq0004h4pk93vrd2c7"},{"post_id":"clprymdk90001h4pke4hl5jrj","category_id":"clpqoimiz00010cpkdevrf590","_id":"clprymdkr0005h4pkhnzjhi2h"},{"post_id":"clprymdkp0003h4pkajfkdh16","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clprymdkr0007h4pkbjxg81vj"},{"post_id":"clprymdky000jh4pk92rm1k9l","category_id":"clpqpb73s0003rspkgp0ieqvo","_id":"clprymdl0000oh4pkdyzffl16"},{"post_id":"clprymdkz000kh4pkcqje1dqo","category_id":"clpqoimiz00010cpkdevrf590","_id":"clprymdl1000qh4pkfwu58v5g"},{"post_id":"clprymdl0000mh4pkfkva0pho","category_id":"clpqoimiz00010cpkdevrf590","_id":"clprymdl1000sh4pkhjgd6emn"}],"PostTag":[{"post_id":"clpmnlgrn0003qopkeql89g8f","tag_id":"clpnozddq0001h0pk6tvw5dko","_id":"clpnozddr0002h0pkhkyhg11r"},{"post_id":"clpqoimit00000cpk2cvo4qut","tag_id":"clpqoimj000020cpk4vdqgbi4","_id":"clpqoimj4000b0cpk2tgjhrab"},{"post_id":"clpqoimj200060cpk6idgh8xf","tag_id":"clpnozddq0001h0pk6tvw5dko","_id":"clprr6jda0002w0pkg4xjal81"},{"post_id":"clpqoimj200060cpk6idgh8xf","tag_id":"clprr6jd80000w0pk7y4hemsc","_id":"clprr6jda0003w0pkd1tjcpbh"},{"post_id":"clpqoimj200060cpk6idgh8xf","tag_id":"clprr6jda0001w0pkejc3hfia","_id":"clprr6jda0004w0pk0nf4373q"},{"post_id":"clprqo1rb0003tspk1cqh7n2x","tag_id":"clprrdvxq0000yspk7agr02ei","_id":"clprrdvxs0002yspk5y60cark"},{"post_id":"clprqo1rb0003tspk1cqh7n2x","tag_id":"clprrdvxr0001yspk4c46a181","_id":"clprrdvxs0003yspk7sdg9tot"},{"post_id":"clprqo1qq0001tspk4nbr3zrh","tag_id":"clprrdvxu0004yspkc152fi5i","_id":"clprrdvxv0006yspkgglxdrd8"},{"post_id":"clprqo1qq0001tspk4nbr3zrh","tag_id":"clprrdvxu0005yspkgrzc3fq3","_id":"clprrdvxv0007yspk54h10r1j"},{"post_id":"clprqo1q10000tspk1sufch0x","tag_id":"clprrdvye0008yspk9uof8upz","_id":"clprrdvyf000ayspk006zdt4h"},{"post_id":"clprqo1q10000tspk1sufch0x","tag_id":"clprrdvyf0009yspk7x10g1to","_id":"clprrdvyf000byspk1fgg0uox"},{"post_id":"clprqo1q10000tspk1sufch0x","tag_id":"clpnozddq0001h0pk6tvw5dko","_id":"clprrdvyf000cyspk7dg0djzx"},{"post_id":"clpqoimj100040cpkgmm04u67","tag_id":"clpqpah1y0000rspk5tym24c8","_id":"clprrdvyx000dyspk5ynrek8m"},{"post_id":"clpqoimj100040cpkgmm04u67","tag_id":"clprrdvxu0005yspkgrzc3fq3","_id":"clprrdvyx000eyspk4l8n2kju"},{"post_id":"clpqoimj000030cpkeicqckp0","tag_id":"clpnozddq0001h0pk6tvw5dko","_id":"clprrdvz0000fyspkh0gt6cio"},{"post_id":"clpqoimj000030cpkeicqckp0","tag_id":"clprr6jd80000w0pk7y4hemsc","_id":"clprrdvz0000gyspk3zeq7xjl"},{"post_id":"clpqoimj000030cpkeicqckp0","tag_id":"clprr6jda0001w0pkejc3hfia","_id":"clprrdvz0000hyspkdeo1b5gg"},{"post_id":"clpqo03j200001wpkalr4e34i","tag_id":"clpqoimj300080cpk3owkbn49","_id":"clprrf7vj000154pkcoce312e"},{"post_id":"clpqo03j200001wpkalr4e34i","tag_id":"clprrf7vh000054pk06wxftta","_id":"clprrf7vj000254pkgh697seo"},{"post_id":"clprymdjw0000h4pk6las0dif","tag_id":"clprymdkg0002h4pkf6ix1hog","_id":"clprymdks0009h4pk36z52x2x"},{"post_id":"clprymdjw0000h4pk6las0dif","tag_id":"clprymdkr0006h4pk4fredz4l","_id":"clprymdks000ah4pkb90j07jx"},{"post_id":"clprymdk90001h4pke4hl5jrj","tag_id":"clprrdvxu0005yspkgrzc3fq3","_id":"clprymdkt000ch4pkcolc4iwv"},{"post_id":"clprymdk90001h4pke4hl5jrj","tag_id":"clprymdkr0008h4pkf0bjb65k","_id":"clprymdkt000dh4pkf4jmbrjw"},{"post_id":"clprymdkp0003h4pkajfkdh16","tag_id":"clprymdkr0006h4pk4fredz4l","_id":"clprymdku000gh4pkbdcq2q3e"},{"post_id":"clprymdkp0003h4pkajfkdh16","tag_id":"clprymdkt000eh4pkfgka2tf2","_id":"clprymdku000hh4pk8qgzfx2o"},{"post_id":"clprymdkp0003h4pkajfkdh16","tag_id":"clprymdku000fh4pk75gc049j","_id":"clprymdku000ih4pk99en5xkb"},{"post_id":"clprymdkz000kh4pkcqje1dqo","tag_id":"clprymdkg0002h4pkf6ix1hog","_id":"clprymdl0000nh4pk0efk4jsa"},{"post_id":"clprymdkz000kh4pkcqje1dqo","tag_id":"clprymdkr0008h4pkf0bjb65k","_id":"clprymdl0000ph4pk99ak0urb"},{"post_id":"clprymdl0000mh4pkfkva0pho","tag_id":"clprrdvxu0005yspkgrzc3fq3","_id":"clprymdl1000rh4pkaqy5gsig"},{"post_id":"clprymdl0000mh4pkfkva0pho","tag_id":"clpqoimj000020cpk4vdqgbi4","_id":"clprymdl1000th4pkfghkfl37"},{"post_id":"clprymdky000jh4pk92rm1k9l","tag_id":"clprymdkt000eh4pkfgka2tf2","_id":"clprymdl1000uh4pka2ar6xhv"},{"post_id":"clprymdky000jh4pk92rm1k9l","tag_id":"clprymdkr0006h4pk4fredz4l","_id":"clprymdl1000vh4pkdxawhcda"},{"post_id":"clprymdky000jh4pk92rm1k9l","tag_id":"clprymdkz000lh4pk1sktc3eu","_id":"clprymdl1000wh4pkdlo0h16g"}],"Tag":[{"name":"就业","_id":"clpnozddq0001h0pk6tvw5dko"},{"name":"css","_id":"clpqoimj000020cpk4vdqgbi4"},{"name":"docker","_id":"clpqoimj300080cpk3owkbn49"},{"name":"就业，算法","_id":"clpqoo85f0000q4pk4dswa5m5"},{"name":"就业、算法","_id":"clpqooo130002q4pk9dacdbca"},{"name":"umi","_id":"clpqpah1y0000rspk5tym24c8"},{"name":"mysql 面试 就业","_id":"clprqo1r20002tspkev27a5b6"},{"name":"next.js 前端","_id":"clprqo1re0006tspk6gwi3eho"},{"name":"springboot redis","_id":"clprqo1rg0009tspk2k7n0s2y"},{"name":"mysql,面试,就业","_id":"clprqq92h0000ncpk229n7u73"},{"name":"mysql、面试、就业","_id":"clprqr9ee00007spk29og6xgw"},{"name":"next.js, react","_id":"clprr3f730000sspkbrfefoxb"},{"name":"就业, 回溯, 刷题","_id":"clprr3f7s0002sspkaq8v1lsq"},{"name":"docker, 云原生","_id":"clprr3f8n0004sspkblo44n6j"},{"name":"mysql, 面试, 就业","_id":"clprr3f8q0006sspk2631gzpg"},{"name":"就业, 刷题, 回溯","_id":"clprr3f9j0008sspkdpoub3xx"},{"name":"springboot, redis","_id":"clprr3fae000asspkf6h8fjgc"},{"name":"umi, react","_id":"clprr3fag000csspk4ae6fsde"},{"name":"回溯","_id":"clprr6jd80000w0pk7y4hemsc"},{"name":"刷题","_id":"clprr6jda0001w0pkejc3hfia"},{"name":"springboot","_id":"clprrdvxq0000yspk7agr02ei"},{"name":"redis","_id":"clprrdvxr0001yspk4c46a181"},{"name":"next.js","_id":"clprrdvxu0004yspkc152fi5i"},{"name":"react","_id":"clprrdvxu0005yspkgrzc3fq3"},{"name":"mysql","_id":"clprrdvye0008yspk9uof8upz"},{"name":"面试","_id":"clprrdvyf0009yspk7x10g1to"},{"name":"云原生","_id":"clprrf7vh000054pk06wxftta"},{"name":"http","_id":"clprymdkg0002h4pkf6ix1hog"},{"name":"后端","_id":"clprymdkr0006h4pk4fredz4l"},{"name":"前端","_id":"clprymdkr0008h4pkf0bjb65k"},{"name":"springcloud","_id":"clprymdkt000eh4pkfgka2tf2"},{"name":"springsecurity","_id":"clprymdku000fh4pk75gc049j"},{"name":"gateway","_id":"clprymdkz000lh4pk1sktc3eu"}]}}